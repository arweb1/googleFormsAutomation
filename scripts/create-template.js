#!/usr/bin/env node

const fs = require('fs-extra');
const path = require('path');
const readline = require('readline');

class TemplateCreator {
  constructor() {
    this.rl = readline.createInterface({
      input: process.stdin,
      output: process.stdout
    });
  }

  async question(prompt) {
    return new Promise((resolve) => {
      this.rl.question(prompt, resolve);
    });
  }

  async createTemplate(analysisFile) {
    try {
      console.log('üìã –°–æ–∑–¥–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö');
      console.log('='.repeat(45));
      
      // –ó–∞–≥—Ä—É–∂–∞–µ–º –∞–Ω–∞–ª–∏–∑ —Ñ–æ—Ä–º—ã
      const analysis = await fs.readJson(analysisFile);
      
      console.log(`\nüìù –§–æ—Ä–º–∞: ${analysis.title}`);
      console.log(`üìä –ü–æ–ª–µ–π: ${analysis.fields.length}`);
      
      const template = {
        name: '',
        description: '',
        emailTemplate: {},
        passwordTemplate: {},
        fieldTemplates: {}
      };
      
      // –ù–∞–∑–≤–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞
      template.name = await this.question('\nüìã –ù–∞–∑–≤–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞: ');
      template.description = await this.question('üìù –û–ø–∏—Å–∞–Ω–∏–µ: ');
      
      // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ email
      console.log('\nüìß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ email:');
      console.log('1. –°–ª—É—á–∞–π–Ω—ã–µ email (user1@gmail.com, user2@yahoo.com, ...)');
      console.log('2. –ü–æ —à–∞–±–ª–æ–Ω—É (–Ω–∞–ø—Ä–∏–º–µ—Ä: test{index}@gmail.com)');
      
      const emailChoice = await this.question('–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø (1-2): ');
      
      if (emailChoice === '1') {
        template.emailTemplate = {
          type: 'random',
          domains: ['gmail.com', 'yahoo.com', 'outlook.com', 'hotmail.com']
        };
      } else if (emailChoice === '2') {
        const pattern = await this.question('–í–≤–µ–¥–∏—Ç–µ —à–∞–±–ª–æ–Ω (–∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ {index} –¥–ª—è –Ω–æ–º–µ—Ä–∞): ');
        template.emailTemplate = {
          type: 'pattern',
          pattern: pattern
        };
      } else {
        template.emailTemplate = { type: 'random' };
      }
      
      // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–∞—Ä–æ–ª—è
      console.log('\nüîí –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–∞—Ä–æ–ª—è:');
      console.log('1. –°–ª—É—á–∞–π–Ω—ã–µ –ø–∞—Ä–æ–ª–∏');
      console.log('2. –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–∞—Ä–æ–ª—å');
      
      const passwordChoice = await this.question('–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø (1-2): ');
      
      if (passwordChoice === '1') {
        const length = await this.question('–î–ª–∏–Ω–∞ –ø–∞—Ä–æ–ª—è (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 8): ');
        template.passwordTemplate = {
          type: 'random',
          length: parseInt(length) || 8
        };
      } else if (passwordChoice === '2') {
        const password = await this.question('–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å: ');
        template.passwordTemplate = {
          type: 'fixed',
          value: password
        };
      } else {
        template.passwordTemplate = { type: 'random', length: 8 };
      }
      
      // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–ª–µ–π —Ñ–æ—Ä–º—ã
      console.log('\nüìù –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–ª–µ–π —Ñ–æ—Ä–º—ã:');
      console.log('-'.repeat(30));
      
      for (const field of analysis.fields) {
        const fieldName = field.name || field.id;
        const fieldType = field.type;
        
        console.log(`\nüìù –ü–æ–ª–µ: ${fieldName} (${fieldType})`);
        if (field.required) {
          console.log('‚ö†Ô∏è  –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ');
        }
        
        if (field.options && field.options.length > 0) {
          console.log('üéØ –î–æ—Å—Ç—É–ø–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã:');
          field.options.forEach((option, index) => {
            console.log(`   ${index + 1}. ${option.label}`);
          });
          
          console.log('\n–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:');
          console.log('1. –°–ª—É—á–∞–π–Ω—ã–π –≤—ã–±–æ—Ä –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤');
          console.log('2. –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç');
          console.log('3. –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –ø–æ–ª–µ');
          
          const choice = await this.question('–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø (1-3): ');
          
          if (choice === '1') {
            template.fieldTemplates[fieldName] = {
              type: 'random'
            };
          } else if (choice === '2') {
            const optionIndex = await this.question('–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –≤–∞—Ä–∏–∞–Ω—Ç–∞: ');
            const index = parseInt(optionIndex) - 1;
            
            if (index >= 0 && index < field.options.length) {
              template.fieldTemplates[fieldName] = {
                type: 'fixed',
                value: field.options[index].value
              };
            } else {
              console.log('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä, –ø—Ä–æ–ø—É—Å–∫–∞—é –ø–æ–ª–µ');
            }
          }
        } else {
          // –î–ª—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –ø–æ–ª–µ–π
          console.log('\n–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:');
          console.log('1. –°–ª—É—á–∞–π–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ —Å–ø–∏—Å–∫–∞');
          console.log('2. –ó–Ω–∞—á–µ–Ω–∏—è –ø–æ —à–∞–±–ª–æ–Ω—É');
          console.log('3. –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ');
          console.log('4. –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –ø–æ–ª–µ');
          
          const choice = await this.question('–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø (1-4): ');
          
          if (choice === '1') {
            const values = await this.question('–í–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏—è —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é: ');
            template.fieldTemplates[fieldName] = {
              type: 'random',
              values: values.split(',').map(v => v.trim())
            };
          } else if (choice === '2') {
            const pattern = await this.question('–í–≤–µ–¥–∏—Ç–µ —à–∞–±–ª–æ–Ω (–∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ {index} –¥–ª—è –Ω–æ–º–µ—Ä–∞): ');
            template.fieldTemplates[fieldName] = {
              type: 'pattern',
              pattern: pattern
            };
          } else if (choice === '3') {
            const value = await this.question('–í–≤–µ–¥–∏—Ç–µ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: ');
            template.fieldTemplates[fieldName] = {
              type: 'fixed',
              value: value
            };
          }
        }
      }
      
      return template;
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —à–∞–±–ª–æ–Ω–∞:', error.message);
      throw error;
    }
  }

  async saveTemplate(template, filename = null) {
    if (!filename) {
      filename = `${template.name.toLowerCase().replace(/\s+/g, '-')}-template.json`;
    }
    
    const filepath = path.join(__dirname, '../data/templates', filename);
    await fs.ensureDir(path.dirname(filepath));
    await fs.writeFile(filepath, JSON.stringify(template, null, 2));
    
    console.log(`\nüíæ –®–∞–±–ª–æ–Ω —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ —Ñ–∞–π–ª: ${filepath}`);
    return filepath;
  }

  close() {
    this.rl.close();
  }
}

// CLI –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
async function main() {
  const args = process.argv.slice(2);
  
  if (args.length === 0) {
    console.log('üìã –°–æ–∑–¥–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö');
    console.log('='.repeat(45));
    console.log('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: node create-template.js <analysis_file>');
    console.log('');
    console.log('–ü—Ä–∏–º–µ—Ä—ã:');
    console.log('  node create-template.js form-analysis.json');
    console.log('');
    process.exit(1);
  }

  const analysisFile = args[0];

  const creator = new TemplateCreator();
  
  try {
    const template = await creator.createTemplate(analysisFile);
    await creator.saveTemplate(template);
    
    console.log('\n‚úÖ –®–∞–±–ª–æ–Ω —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ!');
    console.log('\nüí° –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –µ–≥–æ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö:');
    console.log(`   node generate-data.js ${analysisFile} --template data/templates/${template.name.toLowerCase().replace(/\s+/g, '-')}-template.json`);
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
    process.exit(1);
  } finally {
    creator.close();
  }
}

if (require.main === module) {
  main();
}

module.exports = TemplateCreator;
