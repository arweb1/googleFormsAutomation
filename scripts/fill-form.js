#!/usr/bin/env node

const puppeteer = require('puppeteer');
const fs = require('fs-extra');
const path = require('path');

class FormFiller {
  constructor() {
    this.browser = null;
  }

  async initBrowser(headless = false) {
    if (!this.browser) {
      this.browser = await puppeteer.launch({
        headless: headless,
        args: ['--no-sandbox', '--disable-setuid-sandbox']
      });
    }
    return this.browser;
  }

  async fillForm(formUrl, accountData, options = {}) {
    try {
      console.log(`üîç –ó–∞–ø–æ–ª–Ω—è—é —Ñ–æ—Ä–º—É –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞: ${accountData.email}`);
      
      const browser = await this.initBrowser(options.headless);
      const page = await browser.newPage();
      
      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º User-Agent
      await page.setUserAgent('Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36');
      
      console.log('üì° –ó–∞–≥—Ä—É–∂–∞—é —Å—Ç—Ä–∞–Ω–∏—Ü—É —Ñ–æ—Ä–º—ã...');
      await page.goto(formUrl, { waitUntil: 'networkidle2' });
      
      // –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ä–º—ã
      await page.waitForSelector('form', { timeout: 10000 });
      
      console.log('üìù –ó–∞–ø–æ–ª–Ω—è—é –ø–æ–ª—è —Ñ–æ—Ä–º—ã...');
      
      // –ó–∞–ø–æ–ª–Ω—è–µ–º –ø–æ–ª—è
      for (const [fieldName, value] of Object.entries(accountData.data)) {
        try {
          await this.fillField(page, fieldName, value);
          console.log(`   ‚úÖ ${fieldName}: ${value}`);
        } catch (error) {
          console.log(`   ‚ùå ${fieldName}: ${error.message}`);
        }
      }
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ä–º—É
      if (options.submit !== false) {
        console.log('üì§ –û—Ç–ø—Ä–∞–≤–ª—è—é —Ñ–æ—Ä–º—É...');
        await this.submitForm(page);
        
        // –ñ–¥–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        await this.waitForSubmission(page);
        console.log('‚úÖ –§–æ—Ä–º–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!');
      }
      
      await page.close();
      
      return {
        success: true,
        account: accountData.email,
        timestamp: new Date().toISOString()
      };
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ–æ—Ä–º—ã:', error.message);
      throw error;
    }
  }

  async fillField(page, fieldName, value) {
    try {
      // –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã
      const selectors = [
        `[name="${fieldName}"]`,
        `#${fieldName}`,
        `input[name="${fieldName}"]`,
        `textarea[name="${fieldName}"]`,
        `select[name="${fieldName}"]`
      ];
      
      let element = null;
      for (const selector of selectors) {
        try {
          element = await page.$(selector);
          if (element) break;
        } catch (error) {
          // –ü—Ä–æ–±—É–µ–º —Å–ª–µ–¥—É—é—â–∏–π —Å–µ–ª–µ–∫—Ç–æ—Ä
        }
      }
      
      if (!element) {
        throw new Error(`–ü–æ–ª–µ ${fieldName} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ`);
      }
      
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –ø–æ–ª—è
      const tagName = await page.evaluate(el => el.tagName.toLowerCase(), element);
      const inputType = await page.evaluate(el => el.type, element);
      
      // –ó–∞–ø–æ–ª–Ω—è–µ–º –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
      if (tagName === 'select') {
        await page.select(`[name="${fieldName}"]`, value);
      } else if (inputType === 'radio') {
        await page.click(`input[name="${fieldName}"][value="${value}"]`);
      } else if (inputType === 'checkbox') {
        if (Array.isArray(value)) {
          for (const val of value) {
            await page.click(`input[name="${fieldName}"][value="${val}"]`);
          }
        } else {
          await page.click(`input[name="${fieldName}"][value="${value}"]`);
        }
      } else {
        // –¢–µ–∫—Å—Ç–æ–≤—ã–µ –ø–æ–ª—è
        await page.focus(`[name="${fieldName}"]`);
        await page.keyboard.down('Control');
        await page.keyboard.press('KeyA');
        await page.keyboard.up('Control');
        await page.type(`[name="${fieldName}"]`, value);
      }
      
    } catch (error) {
      throw new Error(`–û—à–∏–±–∫–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –ø–æ–ª—è ${fieldName}: ${error.message}`);
    }
  }

  async submitForm(page) {
    try {
      // –ò—â–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–ø—Ä–∞–≤–∫–∏
      const submitSelectors = [
        'input[type="submit"]',
        'button[type="submit"]',
        'button:contains("–û—Ç–ø—Ä–∞–≤–∏—Ç—å")',
        'button:contains("Submit")',
        '.freebirdFormviewerViewNavigationSubmitButton'
      ];
      
      for (const selector of submitSelectors) {
        try {
          await page.click(selector);
          return;
        } catch (error) {
          // –ü—Ä–æ–±—É–µ–º —Å–ª–µ–¥—É—é—â–∏–π —Å–µ–ª–µ–∫—Ç–æ—Ä
        }
      }
      
      // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –∫–Ω–æ–ø–∫—É, –ø—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —á–µ—Ä–µ–∑ Enter
      await page.keyboard.press('Enter');
      
    } catch (error) {
      throw new Error(`–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º—ã: ${error.message}`);
    }
  }

  async waitForSubmission(page) {
    try {
      // –ñ–¥–µ–º –ø–æ—è–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–µ
      await page.waitForSelector('.freebirdFormviewerViewResponseConfirmationMessage, .thank-you, .success', { 
        timeout: 10000 
      });
    } catch (error) {
      // –ï—Å–ª–∏ –Ω–µ –¥–æ–∂–¥–∞–ª–∏—Å—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è, —ç—Ç–æ –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ
      console.log('‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–∂–¥–∞—Ç—å—Å—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏');
    }
  }

  async close() {
    if (this.browser) {
      await this.browser.close();
      this.browser = null;
    }
  }
}

// CLI –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
async function main() {
  const args = process.argv.slice(2);
  
  if (args.length === 0) {
    console.log('üìù –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ Google Forms');
    console.log('='.repeat(30));
    console.log('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: node fill-form.js <form_url> <accounts_file> [options]');
    console.log('');
    console.log('–ü—Ä–∏–º–µ—Ä—ã:');
    console.log('  node fill-form.js "https://docs.google.com/forms/d/..." accounts.json');
    console.log('  node fill-form.js "https://docs.google.com/forms/d/..." accounts.json --headless');
    console.log('  node fill-form.js "https://docs.google.com/forms/d/..." accounts.json --no-submit');
    console.log('');
    process.exit(1);
  }

  const formUrl = args[0];
  const accountsFile = args[1];
  const headless = args.includes('--headless');
  const noSubmit = args.includes('--no-submit');

  const filler = new FormFiller();
  
  try {
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –∞–∫–∫–∞—É–Ω—Ç—ã
    const accounts = await fs.readJson(accountsFile);
    
    if (!Array.isArray(accounts)) {
      throw new Error('–§–∞–π–ª –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∞—Å—Å–∏–≤');
    }
    
    console.log(`üìä –ù–∞–π–¥–µ–Ω–æ ${accounts.length} –∞–∫–∫–∞—É–Ω—Ç–æ–≤`);
    console.log(`üîó URL —Ñ–æ—Ä–º—ã: ${formUrl}`);
    console.log(`üëÅÔ∏è  –†–µ–∂–∏–º –±—Ä–∞—É–∑–µ—Ä–∞: ${headless ? '—Å–∫—Ä—ã—Ç—ã–π' : '–≤–∏–¥–∏–º—ã–π'}`);
    console.log(`üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ä–º—ã: ${noSubmit ? '–æ—Ç–∫–ª—é—á–µ–Ω–∞' : '–≤–∫–ª—é—á–µ–Ω–∞'}`);
    
    const results = [];
    
    for (let i = 0; i < accounts.length; i++) {
      const account = accounts[i];
      
      console.log(`\nüë§ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∞–∫–∫–∞—É–Ω—Ç ${i + 1}/${accounts.length}: ${account.email}`);
      
      try {
        const result = await filler.fillForm(formUrl, account, {
          headless: headless,
          submit: !noSubmit
        });
        
        results.push(result);
        
        // –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏
        if (i < accounts.length - 1) {
          console.log('‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ 2 —Å–µ–∫—É–Ω–¥—ã...');
          await new Promise(resolve => setTimeout(resolve, 2000));
        }
        
      } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ ${account.email}:`, error.message);
        results.push({
          success: false,
          account: account.email,
          error: error.message,
          timestamp: new Date().toISOString()
        });
      }
    }
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    const timestamp = new Date().toISOString().replace(/[:.]/g, '-');
    const resultsFile = path.join(__dirname, '../data', `results-${timestamp}.json`);
    await fs.ensureDir(path.dirname(resultsFile));
    await fs.writeFile(resultsFile, JSON.stringify(results, null, 2));
    
    console.log(`\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´:`);
    console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ: ${results.filter(r => r.success).length}`);
    console.log(`‚ùå –û—à–∏–±–æ–∫: ${results.filter(r => !r.success).length}`);
    console.log(`üíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: ${resultsFile}`);
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
    process.exit(1);
  } finally {
    await filler.close();
  }
}

if (require.main === module) {
  main();
}

module.exports = FormFiller;
