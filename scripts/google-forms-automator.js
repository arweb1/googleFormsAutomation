#!/usr/bin/env node

const fs = require('fs-extra');
const path = require('path');
const readline = require('readline');

const FormAnalyzerCLI = require('./analyze-form');
const DataGenerator = require('./generate-data');
const TemplateCreator = require('./create-template');
const FormFiller = require('./fill-form');

class GoogleFormsAutomator {
  constructor() {
    this.rl = readline.createInterface({
      input: process.stdin,
      output: process.stdout
    });
  }

  async question(prompt) {
    return new Promise((resolve) => {
      this.rl.question(prompt, resolve);
    });
  }

  async showMenu() {
    console.log('\nüöÄ Google Forms Automator');
    console.log('='.repeat(30));
    console.log('1. üìä –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ñ–æ—Ä–º—É');
    console.log('2. üìã –°–æ–∑–¥–∞—Ç—å —à–∞–±–ª–æ–Ω –¥–∞–Ω–Ω—ã—Ö');
    console.log('3. üë• –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç–æ–≤');
    console.log('4. üìù –ó–∞–ø–æ–ª–Ω–∏—Ç—å —Ñ–æ—Ä–º—É');
    console.log('5. üîÑ –ü–æ–ª–Ω—ã–π —Ü–∏–∫–ª (–∞–Ω–∞–ª–∏–∑ ‚Üí –¥–∞–Ω–Ω—ã–µ ‚Üí –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ)');
    console.log('6. üìÅ –ü—Ä–æ—Å–º–æ—Ç—Ä —Ñ–∞–π–ª–æ–≤');
    console.log('0. ‚ùå –í—ã—Ö–æ–¥');
    console.log('');
  }

  async analyzeForm() {
    console.log('\nüìä –ê–ù–ê–õ–ò–ó –§–û–†–ú–´');
    console.log('='.repeat(20));
    
    const formUrl = await this.question('üîó –í–≤–µ–¥–∏—Ç–µ URL Google —Ñ–æ—Ä–º—ã: ');
    
    if (!formUrl.trim()) {
      console.log('‚ùå URL –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º');
      return;
    }
    
    const analyzer = new FormAnalyzerCLI();
    
    try {
      const analysis = await analyzer.analyzeForm(formUrl);
      analyzer.displayAnalysis(analysis);
      
      const save = await this.question('\nüíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∞–Ω–∞–ª–∏–∑? (y/n): ');
      if (save.toLowerCase() === 'y') {
        const filename = await analyzer.saveAnalysis(analysis);
        console.log(`‚úÖ –ê–Ω–∞–ª–∏–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: ${filename}`);
      }
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞:', error.message);
    } finally {
      await analyzer.close();
    }
  }

  async createTemplate() {
    console.log('\nüìã –°–û–ó–î–ê–ù–ò–ï –®–ê–ë–õ–û–ù–ê');
    console.log('='.repeat(25));
    
    const analysisFile = await this.question('üìÑ –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –∞–Ω–∞–ª–∏–∑–∞: ');
    
    if (!await fs.pathExists(analysisFile)) {
      console.log('‚ùå –§–∞–π–ª –∞–Ω–∞–ª–∏–∑–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω');
      return;
    }
    
    const creator = new TemplateCreator();
    
    try {
      const template = await creator.createTemplate(analysisFile);
      const filename = await creator.saveTemplate(template);
      console.log(`‚úÖ –®–∞–±–ª–æ–Ω —Å–æ–∑–¥–∞–Ω: ${filename}`);
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —à–∞–±–ª–æ–Ω–∞:', error.message);
    } finally {
      creator.close();
    }
  }

  async generateData() {
    console.log('\nüë• –ì–ï–ù–ï–†–ê–¶–ò–Ø –î–ê–ù–ù–´–•');
    console.log('='.repeat(25));
    
    const analysisFile = await this.question('üìÑ –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –∞–Ω–∞–ª–∏–∑–∞: ');
    
    if (!await fs.pathExists(analysisFile)) {
      console.log('‚ùå –§–∞–π–ª –∞–Ω–∞–ª–∏–∑–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω');
      return;
    }
    
    const useTemplate = await this.question('üìã –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —à–∞–±–ª–æ–Ω? (y/n): ');
    let templateFile = null;
    
    if (useTemplate.toLowerCase() === 'y') {
      templateFile = await this.question('üìÑ –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —à–∞–±–ª–æ–Ω–∞: ');
      
      if (!await fs.pathExists(templateFile)) {
        console.log('‚ùå –§–∞–π–ª —à–∞–±–ª–æ–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω');
        return;
      }
    }
    
    const generator = new DataGenerator();
    
    try {
      let accounts;
      
      if (templateFile) {
        accounts = await generator.generateFromTemplate(analysisFile, templateFile);
      } else {
        accounts = await generator.generateDataForForm(analysisFile);
      }
      
      await generator.saveAccounts(accounts);
      
      const saveCSV = await this.question('üìä –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ CSV? (y/n): ');
      if (saveCSV.toLowerCase() === 'y') {
        await generator.saveAsCSV(accounts);
      }
      
      console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–æ ${accounts.length} –∞–∫–∫–∞—É–Ω—Ç–æ–≤`);
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö:', error.message);
    } finally {
      generator.close();
    }
  }

  async fillForm() {
    console.log('\nüìù –ó–ê–ü–û–õ–ù–ï–ù–ò–ï –§–û–†–ú–´');
    console.log('='.repeat(25));
    
    const formUrl = await this.question('üîó URL —Ñ–æ—Ä–º—ã: ');
    const accountsFile = await this.question('üë• –§–∞–π–ª –∞–∫–∫–∞—É–Ω—Ç–æ–≤: ');
    
    if (!await fs.pathExists(accountsFile)) {
      console.log('‚ùå –§–∞–π–ª –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω');
      return;
    }
    
    const headless = await this.question('üëÅÔ∏è  –°–∫—Ä—ã—Ç—ã–π —Ä–µ–∂–∏–º –±—Ä–∞—É–∑–µ—Ä–∞? (y/n): ');
    const noSubmit = await this.question('üì§ –û—Ç–∫–ª—é—á–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É —Ñ–æ—Ä–º—ã? (y/n): ');
    
    const filler = new FormFiller();
    
    try {
      const accounts = await fs.readJson(accountsFile);
      
      if (!Array.isArray(accounts)) {
        throw new Error('–§–∞–π–ª –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∞—Å—Å–∏–≤');
      }
      
      console.log(`üìä –ù–∞–π–¥–µ–Ω–æ ${accounts.length} –∞–∫–∫–∞—É–Ω—Ç–æ–≤`);
      
      const results = [];
      
      for (let i = 0; i < accounts.length; i++) {
        const account = accounts[i];
        
        console.log(`\nüë§ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∞–∫–∫–∞—É–Ω—Ç ${i + 1}/${accounts.length}: ${account.email}`);
        
        try {
          const result = await filler.fillForm(formUrl, account, {
            headless: headless.toLowerCase() === 'y',
            submit: noSubmit.toLowerCase() !== 'y'
          });
          
          results.push(result);
          
          if (i < accounts.length - 1) {
            console.log('‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ 2 —Å–µ–∫—É–Ω–¥—ã...');
            await new Promise(resolve => setTimeout(resolve, 2000));
          }
          
        } catch (error) {
          console.error(`‚ùå –û—à–∏–±–∫–∞ –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ ${account.email}:`, error.message);
          results.push({
            success: false,
            account: account.email,
            error: error.message,
            timestamp: new Date().toISOString()
          });
        }
      }
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
      const timestamp = new Date().toISOString().replace(/[:.]/g, '-');
      const resultsFile = path.join(__dirname, '../data', `results-${timestamp}.json`);
      await fs.ensureDir(path.dirname(resultsFile));
      await fs.writeFile(resultsFile, JSON.stringify(results, null, 2));
      
      console.log(`\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´:`);
      console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ: ${results.filter(r => r.success).length}`);
      console.log(`‚ùå –û—à–∏–±–æ–∫: ${results.filter(r => !r.success).length}`);
      console.log(`üíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: ${resultsFile}`);
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ–æ—Ä–º—ã:', error.message);
    } finally {
      await filler.close();
    }
  }

  async fullCycle() {
    console.log('\nüîÑ –ü–û–õ–ù–´–ô –¶–ò–ö–õ –ê–í–¢–û–ú–ê–¢–ò–ó–ê–¶–ò–ò');
    console.log('='.repeat(35));
    
    const formUrl = await this.question('üîó –í–≤–µ–¥–∏—Ç–µ URL Google —Ñ–æ—Ä–º—ã: ');
    
    if (!formUrl.trim()) {
      console.log('‚ùå URL –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º');
      return;
    }
    
    // 1. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ñ–æ—Ä–º—É
    console.log('\nüìä –®–∞–≥ 1: –ê–Ω–∞–ª–∏–∑ —Ñ–æ—Ä–º—ã...');
    const analyzer = new FormAnalyzerCLI();
    
    try {
      const analysis = await analyzer.analyzeForm(formUrl);
      analyzer.displayAnalysis(analysis);
      
      const analysisFile = await analyzer.saveAnalysis(analysis);
      console.log(`‚úÖ –ê–Ω–∞–ª–∏–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: ${analysisFile}`);
      
      await analyzer.close();
      
      // 2. –°–æ–∑–¥–∞–µ–º —à–∞–±–ª–æ–Ω
      console.log('\nüìã –®–∞–≥ 2: –°–æ–∑–¥–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞...');
      const creator = new TemplateCreator();
      const template = await creator.createTemplate(analysisFile);
      const templateFile = await creator.saveTemplate(template);
      console.log(`‚úÖ –®–∞–±–ª–æ–Ω —Å–æ–∑–¥–∞–Ω: ${templateFile}`);
      creator.close();
      
      // 3. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
      console.log('\nüë• –®–∞–≥ 3: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö...');
      const generator = new DataGenerator();
      const accounts = await generator.generateFromTemplate(analysisFile, templateFile);
      const accountsFile = await generator.saveAccounts(accounts);
      console.log(`‚úÖ –î–∞–Ω–Ω—ã–µ —Å–æ–∑–¥–∞–Ω—ã: ${accountsFile}`);
      generator.close();
      
      // 4. –ó–∞–ø–æ–ª–Ω—è–µ–º —Ñ–æ—Ä–º—É
      console.log('\nüìù –®–∞–≥ 4: –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ–æ—Ä–º—ã...');
      const filler = new FormFiller();
      
      const results = [];
      for (let i = 0; i < accounts.length; i++) {
        const account = accounts[i];
        
        console.log(`\nüë§ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∞–∫–∫–∞—É–Ω—Ç ${i + 1}/${accounts.length}: ${account.email}`);
        
        try {
          const result = await filler.fillForm(formUrl, account, {
            headless: false,
            submit: true
          });
          
          results.push(result);
          
          if (i < accounts.length - 1) {
            console.log('‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ 2 —Å–µ–∫—É–Ω–¥—ã...');
            await new Promise(resolve => setTimeout(resolve, 2000));
          }
          
        } catch (error) {
          console.error(`‚ùå –û—à–∏–±–∫–∞ –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ ${account.email}:`, error.message);
          results.push({
            success: false,
            account: account.email,
            error: error.message,
            timestamp: new Date().toISOString()
          });
        }
      }
      
      await filler.close();
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
      const timestamp = new Date().toISOString().replace(/[:.]/g, '-');
      const resultsFile = path.join(__dirname, '../data', `results-${timestamp}.json`);
      await fs.ensureDir(path.dirname(resultsFile));
      await fs.writeFile(resultsFile, JSON.stringify(results, null, 2));
      
      console.log(`\nüéâ –ü–û–õ–ù–´–ô –¶–ò–ö–õ –ó–ê–í–ï–†–®–ï–ù!`);
      console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ: ${results.filter(r => r.success).length}`);
      console.log(`‚ùå –û—à–∏–±–æ–∫: ${results.filter(r => !r.success).length}`);
      console.log(`üíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: ${resultsFile}`);
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –≤ –ø–æ–ª–Ω–æ–º —Ü–∏–∫–ª–µ:', error.message);
    }
  }

  async listFiles() {
    console.log('\nüìÅ –§–ê–ô–õ–´ –ü–†–û–ï–ö–¢–ê');
    console.log('='.repeat(20));
    
    const dataDir = path.join(__dirname, '../data');
    await fs.ensureDir(dataDir);
    
    const files = await fs.readdir(dataDir, { withFileTypes: true });
    
    if (files.length === 0) {
      console.log('üìÇ –ü–∞–ø–∫–∞ data –ø—É—Å—Ç–∞');
      return;
    }
    
    console.log('üìÑ –§–∞–π–ª—ã –≤ –ø–∞–ø–∫–µ data:');
    files.forEach(file => {
      const filePath = path.join(dataDir, file.name);
      const stats = fs.statSync(filePath);
      const size = (stats.size / 1024).toFixed(2);
      const date = stats.mtime.toLocaleDateString('ru-RU');
      
      console.log(`   ${file.isDirectory() ? 'üìÅ' : 'üìÑ'} ${file.name} (${size} KB, ${date})`);
    });
  }

  async run() {
    while (true) {
      await this.showMenu();
      
      const choice = await this.question('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ (0-6): ');
      
      switch (choice) {
        case '1':
          await this.analyzeForm();
          break;
        case '2':
          await this.createTemplate();
          break;
        case '3':
          await this.generateData();
          break;
        case '4':
          await this.fillForm();
          break;
        case '5':
          await this.fullCycle();
          break;
        case '6':
          await this.listFiles();
          break;
        case '0':
          console.log('üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!');
          this.rl.close();
          return;
        default:
          console.log('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä');
      }
      
      await this.question('\n‚èé –ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...');
    }
  }

  close() {
    this.rl.close();
  }
}

// CLI –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
async function main() {
  const automator = new GoogleFormsAutomator();
  
  try {
    await automator.run();
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
  } finally {
    automator.close();
  }
}

if (require.main === module) {
  main();
}

module.exports = GoogleFormsAutomator;
