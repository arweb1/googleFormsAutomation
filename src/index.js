#!/usr/bin/env node

const { Command } = require('commander');
const chalk = require('chalk');
const inquirer = require('inquirer');
const FormAutomator = require('./core/FormAutomator');
const AccountManager = require('./accounts/AccountManager');
const ConfigManager = require('./core/ConfigManager');
const logger = require('./utils/logger');

const program = new Command();

program
  .name('google-forms-automator')
  .description('–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —Å–æ—Ñ—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è Google Forms')
  .version('1.0.0');

program
  .command('start')
  .description('–ó–∞–ø—É—Å—Ç–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ–æ—Ä–º')
  .option('-f, --form <formId>', 'ID —Ñ–æ—Ä–º—ã –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è')
  .option('-a, --account <accountId>', 'ID –∞–∫–∫–∞—É–Ω—Ç–∞ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è')
  .option('-c, --count <number>', '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–π', '1')
  .option('--headless', '–ó–∞–ø—É—Å–∫ –≤ headless —Ä–µ–∂–∏–º–µ')
  .action(async (options) => {
    try {
      console.log(chalk.blue('üöÄ –ó–∞–ø—É—Å–∫ Google Forms Automator...'));
      
      const configManager = new ConfigManager();
      const accountManager = new AccountManager();
      const automator = new FormAutomator();

      // –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
      await configManager.loadConfig();
      
      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–∫–∫–∞—É–Ω—Ç–æ–≤
      await accountManager.loadAccounts();
      
      // –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏
      await automator.start({
        formId: options.form,
        accountId: options.account,
        count: parseInt(options.count),
        headless: options.headless
      });

    } catch (error) {
      logger.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ:', error);
      process.exit(1);
    }
  });

program
  .command('setup')
  .description('–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏')
  .action(async () => {
    try {
      console.log(chalk.yellow('‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...'));
      
      const questions = [
        {
          type: 'input',
          name: 'formsConfig',
          message: '–ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Ñ–æ—Ä–º:',
          default: 'config/forms.json'
        },
        {
          type: 'input',
          name: 'accountsConfig',
          message: '–ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–æ–≤:',
          default: 'config/accounts.json'
        }
      ];

      const answers = await inquirer.prompt(questions);
      console.log(chalk.green('‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!'));
      
    } catch (error) {
      logger.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ:', error);
    }
  });

program
  .command('accounts')
  .description('–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏')
  .option('--list', '–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∞–∫–∫–∞—É–Ω—Ç–æ–≤')
  .option('--add', '–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –∞–∫–∫–∞—É–Ω—Ç')
  .option('--remove <accountId>', '–£–¥–∞–ª–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç')
  .action(async (options) => {
    try {
      const accountManager = new AccountManager();
      await accountManager.loadAccounts();

      if (options.list) {
        const accounts = accountManager.getAccounts();
        console.table(accounts);
      } else if (options.add) {
        await accountManager.addAccount();
      } else if (options.remove) {
        await accountManager.removeAccount(options.remove);
      }

    } catch (error) {
      logger.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏:', error);
    }
  });

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –∏—Å–∫–ª—é—á–µ–Ω–∏–π
process.on('unhandledRejection', (reason, promise) => {
  logger.error('Unhandled Rejection at:', promise, 'reason:', reason);
  process.exit(1);
});

process.on('uncaughtException', (error) => {
  logger.error('Uncaught Exception:', error);
  process.exit(1);
});

program.parse();
