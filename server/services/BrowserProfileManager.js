const puppeteer = require('puppeteer');
const proxyChain = require('proxy-chain');
const fs = require('fs-extra');
const path = require('path');

class BrowserProfileManager {
  constructor() {
    this.profilesDir = path.join(__dirname, '../../data/browser-profiles');
    this.activeBrowsers = new Map(); // –•—Ä–∞–Ω–∏—Ç –∞–∫—Ç–∏–≤–Ω—ã–µ –±—Ä–∞—É–∑–µ—Ä—ã –ø–æ ID –∞–∫–∫–∞—É–Ω—Ç–∞
    this.anonymizedProxyByAccountId = new Map(); // –•—Ä–∞–Ω–∏—Ç –∞–Ω–æ–Ω–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–æ–∫—Å–∏ URL –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
  }

  async ensureProfilesDirectory() {
    await fs.ensureDir(this.profilesDir);
  }

  getProfilePath(accountId) {
    return path.join(this.profilesDir, `profile_${accountId}`);
  }

  async createProfile(accountId, proxySettings = null) {
    await this.ensureProfilesDirectory();
    
    const profilePath = this.getProfilePath(accountId);
    
    // –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ—Ñ–∏–ª—è –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    await fs.ensureDir(profilePath);
    
    console.log(`üìÅ –°–æ–∑–¥–∞–Ω –ø—Ä–æ—Ñ–∏–ª—å –±—Ä–∞—É–∑–µ—Ä–∞ –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ ${accountId}: ${profilePath}`);
    
    return profilePath;
  }

  async launchBrowserWithProfile(accountId, options = {}, proxySettings = null) {
    // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –ù–ï –æ—á–∏—â–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –¥–æ–ª–≥–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è –∏ –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫ (Windows)
    // –û—á–∏—Å—Ç–∫–∞ –≤–∫–ª—é—á–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø—Ä–∏ —è–≤–Ω–æ–π –æ–ø—Ü–∏–∏ options.resetProfile === true
    const resetProfile = options && options.resetProfile === true;
    if (resetProfile) {
      await this.cleanupProfile(accountId);
    }
    const profilePath = await this.createProfile(accountId, proxySettings);
    
        const launchOptions = {
          headless: options.headless !== undefined ? options.headless : false,
          userDataDir: profilePath,
          defaultViewport: null,
          args: [
            '--no-sandbox',
            '--disable-setuid-sandbox',
            '--disable-dev-shm-usage',
            '--disable-accelerated-2d-canvas',
            '--no-first-run',
            '--disable-gpu',
            '--disable-web-security',
            '--disable-features=VizDisplayCompositor',
            '--disable-blink-features=AutomationControlled',
            '--disable-extensions',
            '--disable-default-apps',
            '--disable-sync',
            '--disable-translate',
            '--hide-scrollbars',
            '--mute-audio',
            '--no-default-browser-check',
            '--no-pings',
            '--proxy-bypass-list=<-loopback>',
            '--disable-background-timer-throttling',
            '--disable-backgrounding-occluded-windows',
            '--disable-renderer-backgrounding',
            '--disable-features=TranslateUI',
            '--disable-ipc-flooding-protection',
            '--remote-debugging-port=0'
          ],
          timeout: 30000,
          ignoreHTTPSErrors: true,
          ignoreDefaultArgs: ['--enable-automation']
        };

    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø—Ä–æ–∫—Å–∏ –µ—Å–ª–∏ –æ–Ω –≤–∫–ª—é—á–µ–Ω
    if (proxySettings && proxySettings.enabled && proxySettings.host && proxySettings.port) {
      try {
        const scheme = proxySettings.type && proxySettings.type.includes('socks') ? proxySettings.type : 'http';
        const hasAuth = !!(proxySettings.username && proxySettings.password);

        if (hasAuth) {
          // –°–æ–∑–¥–∞—ë–º –ª–æ–∫–∞–ª—å–Ω—ã–π –∞–Ω–æ–Ω–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–æ–∫—Å–∏ –±–µ–∑ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ proxy-chain
          const sourceProxyUrl = `${scheme}://${proxySettings.username}:${proxySettings.password}@${proxySettings.host}:${proxySettings.port}`;
          const anonymizedProxyUrl = await proxyChain.anonymizeProxy(sourceProxyUrl);
          // –ü—Ä–∏–º–µ—Ä: http://127.0.0.1:xxxxx
          launchOptions.args.push(`--proxy-server=${anonymizedProxyUrl}`);
          this.anonymizedProxyByAccountId.set(accountId, anonymizedProxyUrl);
          console.log(`üåê –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–Ω–æ–Ω–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–æ–∫—Å–∏ –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ ${accountId}: ${anonymizedProxyUrl}`);
        } else {
          // –ë–µ–∑ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –º–æ–∂–Ω–æ –ø–µ—Ä–µ–¥–∞—Ç—å –Ω–∞–ø—Ä—è–º—É—é
          const directProxyArg = scheme ? `${scheme}://${proxySettings.host}:${proxySettings.port}` : `${proxySettings.host}:${proxySettings.port}`;
          launchOptions.args.push(`--proxy-server=${directProxyArg}`);
          console.log(`üåê –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ–∫—Å–∏ –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ ${accountId}: ${directProxyArg}`);
        }
      } catch (proxyError) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–∫—Å–∏ –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ ${accountId}:`, proxyError);
        throw proxyError; // –ù–µ –∑–∞–ø—É—Å–∫–∞–µ–º –±–µ–∑ –ø—Ä–æ–∫—Å–∏, –µ—Å–ª–∏ –ø—Ä–æ–∫—Å–∏ –Ω—É–∂–µ–Ω
      }
    }

    // –ó–∞–ø—É—Å–∫–∞–µ–º –±—Ä–∞—É–∑–µ—Ä —Å —Ä–µ—Ç—Ä–∞—è–º–∏ –∏ –±–µ–∑–æ–ø–∞—Å–Ω—ã–º –∑–∞–∫—Ä—ã—Ç–∏–µ–º –∞–Ω–æ–Ω–∏–º–Ω–æ–≥–æ –ø—Ä–æ–∫—Å–∏ –ø—Ä–∏ –æ—à–∏–±–∫–µ
    const sleep = (ms) => new Promise(resolve => setTimeout(resolve, ms));
    const maxAttempts = 3;
    let lastError = null;
    for (let attempt = 1; attempt <= maxAttempts; attempt++) {
      try {
        const browser = await puppeteer.launch(launchOptions);
        this.activeBrowsers.set(accountId, browser);
        // –ê–≤—Ç–æ-—É–±–æ—Ä–∫–∞ –ø—Ä–∏ –Ω–µ—à—Ç–∞—Ç–Ω–æ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
        browser.on('disconnected', async () => {
          try {
            this.activeBrowsers.delete(accountId);
            const anonUrl = this.anonymizedProxyByAccountId.get(accountId);
            if (anonUrl) {
              await proxyChain.closeAnonymizedProxy(anonUrl).catch(() => {});
              this.anonymizedProxyByAccountId.delete(accountId);
            }
          } catch (_) {}
        });
        console.log(`‚úÖ –ë—Ä–∞—É–∑–µ—Ä –∑–∞–ø—É—â–µ–Ω —Å –ø—Ä–æ—Ñ–∏–ª–µ–º –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ ${accountId} (–ø–æ–ø—ã—Ç–∫–∞ ${attempt}/${maxAttempts})`);
        return browser;
      } catch (error) {
        lastError = error;
        console.error(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±—Ä–∞—É–∑–µ—Ä–∞ –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ ${accountId} (–ø–æ–ø—ã—Ç–∫–∞ ${attempt}/${maxAttempts}):`, error.message);
        // –ù–∞ Windows –≤–æ–∑–º–æ–∂–Ω—ã –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è/–ø–æ—Ä—Ç–æ–≤ ‚Äî –ø–æ–¥–æ–∂–¥–µ–º –∏ –ø–æ–ø—Ä–æ–±—É–µ–º –µ—â—ë —Ä–∞–∑
        if (attempt < maxAttempts) {
          await sleep(1000 * attempt);
          continue;
        }
      }
    }
    // –ï—Å–ª–∏ –≤—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –Ω–µ—É–¥–∞—á–Ω—ã ‚Äî –∑–∞–∫—Ä—ã–≤–∞–µ–º –∞–Ω–æ–Ω–∏–º–Ω—ã–π –ø—Ä–æ–∫—Å–∏ (–µ—Å–ª–∏ —Å–æ–∑–¥–∞–≤–∞–ª—Å—è) –∏ –ø—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É
    try {
      const anonUrl = this.anonymizedProxyByAccountId.get(accountId);
      if (anonUrl) {
        await proxyChain.closeAnonymizedProxy(anonUrl).catch(() => {});
        this.anonymizedProxyByAccountId.delete(accountId);
      }
    } catch (_) {}
    throw lastError;

  }

  buildProxyUrl(proxySettings) {
    const { type, host, port, username, password } = proxySettings;
    
    let proxyUrl = `${type}://`;
    
    if (username && password) {
      proxyUrl += `${username}:${password}@`;
    }
    
    proxyUrl += `${host}:${port}`;
    
    return proxyUrl;
  }

  async testProxyConnection(proxySettings) {
    try {
      const proxyUrl = this.buildProxyUrl(proxySettings);
      console.log(`üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ø—Ä–æ–∫—Å–∏: ${proxyUrl}`);
      
      // –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ø—Ä–æ–∫—Å–∏
      const testOptions = {
        headless: true,
        args: [
          '--no-sandbox',
          '--disable-setuid-sandbox',
          '--disable-dev-shm-usage',
          '--proxy-server=' + proxyUrl,
          '--proxy-bypass-list=<-loopback>'
        ],
        timeout: 10000
      };
      
      const browser = await puppeteer.launch(testOptions);
      const page = await browser.newPage();
      
      // –ü—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–æ—Å—Ç—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
      await page.goto('https://httpbin.org/ip', { timeout: 10000 });
      await browser.close();
      
      console.log(`‚úÖ –ü—Ä–æ–∫—Å–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç: ${proxyUrl}`);
      return true;
    } catch (error) {
      console.log(`‚ùå –ü—Ä–æ–∫—Å–∏ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç: ${error.message}`);
      return false;
    }
  }

  async getBrowserForAccount(accountId) {
    return this.activeBrowsers.get(accountId);
  }

  async closeBrowserForAccount(accountId) {
    const browser = this.activeBrowsers.get(accountId);
    if (browser) {
      try {
        await browser.close();
        this.activeBrowsers.delete(accountId);
        console.log(`üîí –ë—Ä–∞—É–∑–µ—Ä –∑–∞–∫—Ä—ã—Ç –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ ${accountId}`);
        // –ó–∞–∫—Ä—ã–≤–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π –∞–Ω–æ–Ω–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–æ–∫—Å–∏, –µ—Å–ª–∏ –æ–Ω –±—ã–ª —Å–æ–∑–¥–∞–Ω
        const anonUrl = this.anonymizedProxyByAccountId.get(accountId);
        if (anonUrl) {
          try {
            await proxyChain.closeAnonymizedProxy(anonUrl);
            this.anonymizedProxyByAccountId.delete(accountId);
            console.log(`üõë –ê–Ω–æ–Ω–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–æ–∫—Å–∏ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ ${accountId}`);
          } catch (closeErr) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∞–Ω–æ–Ω–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ–∫—Å–∏ –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ ${accountId}:`, closeErr);
          }
        }
        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤ –ø—Ä–æ—Ñ–∏–ª—è, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–µ –∑–∞–ø—É—Å–∫–∏
        try {
          const profilePath = this.getProfilePath(accountId);
          const artifacts = [
            'DevToolsActivePort',
            'SingletonLock',
            'SingletonCookie',
            'SingletonSocket'
          ];
          for (const name of artifacts) {
            const p = path.join(profilePath, name);
            if (await fs.pathExists(p)) {
              await fs.remove(p).catch(() => {});
            }
          }
        } catch (_) {}
      } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –±—Ä–∞—É–∑–µ—Ä–∞ –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ ${accountId}:`, error);
      }
    }
  }

  async closeAllBrowsers() {
    console.log(`üîí –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –±—Ä–∞—É–∑–µ—Ä—ã...`);
    
    const closePromises = Array.from(this.activeBrowsers.entries()).map(async ([accountId, browser]) => {
      try {
        await browser.close();
        console.log(`‚úÖ –ë—Ä–∞—É–∑–µ—Ä –∑–∞–∫—Ä—ã—Ç –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ ${accountId}`);
      } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –±—Ä–∞—É–∑–µ—Ä–∞ –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ ${accountId}:`, error);
      }
    });
    
    await Promise.all(closePromises);
    this.activeBrowsers.clear();
    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ –∞–Ω–æ–Ω–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø—Ä–æ–∫—Å–∏
    const stopProxyPromises = Array.from(this.anonymizedProxyByAccountId.entries()).map(async ([accountId, anonUrl]) => {
      try {
        await proxyChain.closeAnonymizedProxy(anonUrl).catch(() => {});
        console.log(`üõë –ê–Ω–æ–Ω–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–æ–∫—Å–∏ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ ${accountId}`);
      } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∞–Ω–æ–Ω–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ–∫—Å–∏ –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ ${accountId}:`, error);
      }
    });
    await Promise.all(stopProxyPromises);
    this.anonymizedProxyByAccountId.clear();
    
    console.log(`‚úÖ –í—Å–µ –±—Ä–∞—É–∑–µ—Ä—ã –∑–∞–∫—Ä—ã—Ç—ã`);
  }

  async cleanupProfile(accountId) {
    const profilePath = this.getProfilePath(accountId);
    
    try {
      if (await fs.pathExists(profilePath)) {
        await fs.remove(profilePath);
        console.log(`üóëÔ∏è –ü—Ä–æ—Ñ–∏–ª—å —É–¥–∞–ª–µ–Ω –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ ${accountId}`);
      }
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ ${accountId}:`, error);
    }
  }

  async cleanupAllProfiles() {
    try {
      if (await fs.pathExists(this.profilesDir)) {
        await fs.remove(this.profilesDir);
        console.log(`üóëÔ∏è –í—Å–µ –ø—Ä–æ—Ñ–∏–ª–∏ –±—Ä–∞—É–∑–µ—Ä–∞ —É–¥–∞–ª–µ–Ω—ã`);
      }
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª–µ–π:`, error);
    }
  }

  getActiveBrowsersCount() {
    return this.activeBrowsers.size;
  }

  getActiveAccountIds() {
    return Array.from(this.activeBrowsers.keys());
  }
}

module.exports = BrowserProfileManager;
