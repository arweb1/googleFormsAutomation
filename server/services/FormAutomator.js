const puppeteer = require('puppeteer');
const FormConfig = require('../models/FormConfig');
const AccountManager = require('./AccountManager');
const fs = require('fs-extra');
const path = require('path');

class FormAutomator {
  constructor() {
    this.jobs = new Map();
    this.browser = null;
  }

  async initBrowser() {
    if (!this.browser) {
      this.browser = await puppeteer.launch({
        headless: false, // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –±—Ä–∞—É–∑–µ—Ä –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        args: ['--no-sandbox', '--disable-setuid-sandbox']
      });
    }
    return this.browser;
  }

  async startAutomation(formConfigId, accountIds, options = {}) {
    const jobId = `job_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
    
    try {
      // –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Ñ–æ—Ä–º—ã
      const formConfig = await FormConfig.getById(formConfigId);
      if (!formConfig) {
        throw new Error('–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ñ–æ—Ä–º—ã –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
      }

      let accounts = [];
      
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç–æ–≤
      accounts = options.accountData.map(accountData => ({
        id: accountData.id,
        name: accountData.name,
        email: `${accountData.name}@example.com`,
        fields: accountData.fields,
        loginMode: options.loginMode || 'anonymous'
      }));
      
      // –ï—Å–ª–∏ —Ä–µ–∂–∏–º —Å –ª–æ–≥–∏–Ω–æ–º Google, –¥–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–∫–∫–∞—É–Ω—Ç–∞—Ö
      if (options.loginMode === 'google' && accountIds && accountIds.length > 0) {
        const accountManager = new AccountManager();
        const googleAccounts = await accountManager.getAccountsByIds(accountIds);
        
        // –°–æ–ø–æ—Å—Ç–∞–≤–ª—è–µ–º Google –∞–∫–∫–∞—É–Ω—Ç—ã —Å –¥–∞–Ω–Ω—ã–º–∏
        accounts.forEach((account, index) => {
          if (googleAccounts[index]) {
            account.googleAccount = googleAccounts[index];
            account.email = googleAccounts[index].email;
          }
        });
      }

      // –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É
      const job = {
        id: jobId,
        formConfigId,
        accountIds,
        status: 'running',
        startTime: new Date(),
        endTime: null,
        progress: {
          total: accounts.length,
          completed: 0,
          failed: 0
        },
        results: [],
        options
      };

      this.jobs.set(jobId, job);

      // –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—é –≤ —Ñ–æ–Ω–µ
      this.runAutomation(jobId, formConfig, accounts, options).catch(error => {
        console.error(`–û—à–∏–±–∫–∞ –≤ –∑–∞–¥–∞—á–µ ${jobId}:`, error);
        this.updateJobStatus(jobId, 'failed', error.message);
      });

      return jobId;

    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏:', error);
      throw error;
    }
  }

  async runAutomation(jobId, formConfig, accounts, options) {
    const job = this.jobs.get(jobId);
    if (!job) return;

    try {
      const browser = await this.initBrowser();
      
      for (let i = 0; i < accounts.length; i++) {
        const account = accounts[i];
        
        try {
          console.log(`–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∞–∫–∫–∞—É–Ω—Ç ${i + 1}/${accounts.length}: ${account.email}`);
          
          const result = await this.fillFormForAccount(browser, formConfig, account, options);
          
          job.results.push({
            accountId: account.id,
            email: account.email,
            status: 'success',
            timestamp: new Date(),
            data: result
          });
          
          job.progress.completed++;
          
        } catch (error) {
          console.error(`–û—à–∏–±–∫–∞ –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ ${account.email}:`, error);
          
          job.results.push({
            accountId: account.id,
            email: account.email,
            status: 'failed',
            timestamp: new Date(),
            error: error.message
          });
          
          job.progress.failed++;
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏
        this.jobs.set(jobId, job);
        
        // –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏
        if (options.delay && options.delay > 0) {
          await this.sleep(options.delay);
        }
      }
      
      // –ó–∞–≤–µ—Ä—à–∞–µ–º –∑–∞–¥–∞—á—É
      this.updateJobStatus(jobId, 'completed');
      
    } catch (error) {
      console.error(`–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –∑–∞–¥–∞—á–µ ${jobId}:`, error);
      this.updateJobStatus(jobId, 'failed', error.message);
    }
  }

  async fillFormForAccount(browser, formConfig, account, options) {
    const page = await browser.newPage();
    
    try {
      console.log(`\nüöÄ –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ–æ—Ä–º—ã –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞: ${account.name}`);
      console.log(`üìù URL —Ñ–æ—Ä–º—ã: ${formConfig.url}`);
      console.log(`üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª–µ–π: ${formConfig.fields.length}`);
      
      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º User-Agent
      await page.setUserAgent('Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36');
      
      // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Ñ–æ—Ä–º—É
      console.log('üåê –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Ñ–æ—Ä–º—ã...');
      await page.goto(formConfig.url, { waitUntil: 'networkidle2' });
      
      // –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ä–º—ã (—Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ Google Forms –º–æ–≥—É—Ç –Ω–µ –∏–º–µ—Ç—å —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–π —Ñ–æ—Ä–º—ã)
      console.log('‚è≥ –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ä–º—ã...');
      try {
        await page.waitForSelector('form', { timeout: 5000 });
        console.log('‚úÖ –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è —Ñ–æ—Ä–º–∞ –Ω–∞–π–¥–µ–Ω–∞');
      } catch (error) {
        console.log('‚ö†Ô∏è –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è —Ñ–æ—Ä–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –∂–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª–µ–π –≤–≤–æ–¥–∞...');
        await page.waitForSelector('input[type="text"], textarea, select', { timeout: 10000 });
        console.log('‚úÖ –ü–æ–ª—è –≤–≤–æ–¥–∞ –Ω–∞–π–¥–µ–Ω—ã');
      }
      
      // –ó–∞–ø–æ–ª–Ω—è–µ–º –ø–æ–ª—è —Ñ–æ—Ä–º—ã
      console.log('üìù –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ–ª–µ–π...');
      for (const field of formConfig.fields) {
        await this.fillField(page, field, account, options, formConfig);
      }
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ä–º—É
      if (options.submit !== false) {
        console.log('üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ä–º—É...');
        // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
        await page.waitForTimeout(1000);
        await this.submitForm(page, formConfig);
      }
      
      // –ñ–¥–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏
      console.log('‚è≥ –ñ–¥–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏...');
      await this.waitForSubmission(page);
      
      console.log('‚úÖ –§–æ—Ä–º–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!');
      return {
        success: true,
        submittedAt: new Date()
      };
      
    } finally {
      await page.close();
    }
  }

  async fillField(page, field, account, options, formConfig) {
    try {
      const selector = `[name="${field.name}"], #${field.id}`;
      
      switch (field.type) {
        case 'text':
        case 'email':
        case 'tel':
        case 'url':
        case 'textarea':
          await this.fillTextField(page, selector, field, account, formConfig);
          break;
          
        case 'number':
          await this.fillNumberField(page, selector, field, account);
          break;
          
        case 'date':
        case 'time':
        case 'datetime':
          await this.fillDateTimeField(page, selector, field, account);
          break;
          
        case 'select':
          await this.fillSelectField(page, selector, field, account);
          break;
          
        case 'radio':
          await this.fillRadioField(page, field, account);
          break;
          
        case 'checkbox':
          await this.fillCheckboxField(page, field, account);
          break;
          
        case 'file':
          await this.fillFileField(page, selector, field, account);
          break;
      }
      
    } catch (error) {
      console.error(`–û—à–∏–±–∫–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –ø–æ–ª—è ${field.name}:`, error);
      throw error;
    }
  }

  async fillTextField(page, selector, field, account, formConfig) {
    const value = this.getValueForField(field, account);
    if (!value) {
      console.log(`–ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–æ–ª–µ ${field.title} - –Ω–µ—Ç –∑–Ω–∞—á–µ–Ω–∏—è`);
      return;
    }

    console.log(`–ó–∞–ø–æ–ª–Ω—è–µ–º –ø–æ–ª–µ ${field.title} –∑–Ω–∞—á–µ–Ω–∏–µ–º: ${value}`);

    try {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–æ–ª–µ–µ —Ç–æ—á–Ω—ã–π –ø–æ–¥—Ö–æ–¥ –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ–ª—è
      let filled = false;
      
      // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –ø–æ–ª–µ –ø–æ –∏–Ω–¥–µ–∫—Å—É (–ø–æ—Ä—è–¥–∫—É –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ)
      const allInputs = await page.$$('input[type="text"], textarea');
      const fieldIndex = formConfig.fields.indexOf(field);
      
      if (allInputs.length > fieldIndex) {
        try {
          await allInputs[fieldIndex].click();
          await allInputs[fieldIndex].type(value);
          console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ –ø–æ–ª–µ ${field.title} –ø–æ –∏–Ω–¥–µ–∫—Å—É ${fieldIndex}`);
          filled = true;
        } catch (error) {
          console.log(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø–æ–ª–Ω–∏—Ç—å –ø–æ–ª–µ ${field.title} –ø–æ –∏–Ω–¥–µ–∫—Å—É: ${error.message}`);
        }
      }
      
      // –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –ø–æ –∏–Ω–¥–µ–∫—Å—É, –ø—Ä–æ–±—É–µ–º –¥—Ä—É–≥–∏–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã
      if (!filled) {
        const selectors = [
          selector, // –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Å–µ–ª–µ–∫—Ç–æ—Ä
          'input[aria-label*="' + field.title + '"]', // –ü–æ aria-label
          'input[placeholder*="' + field.title + '"]', // –ü–æ placeholder
          '.whsOnd.zHQkBf', // –ö–ª–∞—Å—Å –¥–ª—è –ø–æ–ª–µ–π Google Forms
          'input[type="text"]' // –û–±—â–∏–π —Å–µ–ª–µ–∫—Ç–æ—Ä –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –ø–æ–ª–µ–π
        ];

        for (const sel of selectors) {
          try {
            const elements = await page.$$(sel);
            if (elements.length > 0) {
              // –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π –¥–æ—Å—Ç—É–ø–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç
              await elements[0].click();
              await elements[0].type(value);
              console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ –ø–æ–ª–µ ${field.title} —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–º: ${sel}`);
              filled = true;
              break;
            }
          } catch (error) {
            console.log(`‚ùå –°–µ–ª–µ–∫—Ç–æ—Ä ${sel} –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª: ${error.message}`);
            continue;
          }
        }
      }

      if (!filled) {
        console.log(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø–æ–ª–Ω–∏—Ç—å –ø–æ–ª–µ ${field.title}`);
      }

    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –ø–æ–ª—è ${field.title}:`, error.message);
    }
  }

  async fillNumberField(page, selector, field, account) {
    const value = this.getValueForField(field, account);
    if (value) {
      await page.type(selector, value.toString());
    }
  }

  async fillDateTimeField(page, selector, field, account) {
    const value = this.getValueForField(field, account);
    if (value) {
      await page.type(selector, value);
    }
  }

  async fillSelectField(page, selector, field, account) {
    const value = this.getValueForField(field, account);
    if (value) {
      await page.select(selector, value);
    }
  }

  async fillRadioField(page, field, account) {
    const value = this.getValueForField(field, account);
    if (value) {
      const selector = `input[name="${field.name}"][value="${value}"]`;
      await page.click(selector);
    }
  }

  async fillCheckboxField(page, field, account) {
    const values = this.getValueForField(field, account);
    if (Array.isArray(values)) {
      for (const value of values) {
        const selector = `input[name="${field.name}"][value="${value}"]`;
        await page.click(selector);
      }
    } else if (values) {
      const selector = `input[name="${field.name}"][value="${values}"]`;
      await page.click(selector);
    }
  }

  async fillFileField(page, selector, field, account) {
    const filePath = this.getValueForField(field, account);
    if (filePath) {
      const fileInput = await page.$(selector);
      if (fileInput) {
        await fileInput.uploadFile(filePath);
      }
    }
  }

  getValueForField(field, account) {
    // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ (–µ—Å–ª–∏ –µ—Å—Ç—å)
    if (account.fields && account.fields[field.id]) {
      return account.fields[field.id];
    }
    
    // –ò—â–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –¥–∞–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–∞ –ø–æ –∏–º–µ–Ω–∏ –ø–æ–ª—è
    let value = account.data && account.data[field.name];
    
    // –ï—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –ø–æ ID
    if (value === undefined) {
      value = account.data && account.data[field.id];
    }
    
    // –ï—Å–ª–∏ –≤—Å–µ –µ—â–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    if (value === undefined && field.defaultValue) {
      value = field.defaultValue;
    }
    
    return value;
  }

  async submitForm(page, formConfig) {
    console.log('–ò—â–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º—ã...');
    
    try {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º page.evaluate –¥–ª—è –ø–æ–∏—Å–∫–∞ –∫–Ω–æ–ø–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏
      const submitButton = await page.evaluate(() => {
        // –ò—â–µ–º –∫–Ω–æ–ø–∫–∏ —Å —Ç–µ–∫—Å—Ç–æ–º Submit –∏–ª–∏ –û—Ç–ø—Ä–∞–≤–∏—Ç—å
        const buttons = Array.from(document.querySelectorAll('button, input[type="submit"], div[role="button"], span'));
        
        for (const button of buttons) {
          const text = button.textContent?.toLowerCase() || '';
          const ariaLabel = button.getAttribute('aria-label')?.toLowerCase() || '';
          
          if (text.includes('submit') || text.includes('–æ—Ç–ø—Ä–∞–≤–∏—Ç—å') || 
              ariaLabel.includes('submit') || ariaLabel.includes('–æ—Ç–ø—Ä–∞–≤–∏—Ç—å')) {
            return {
              tagName: button.tagName,
              className: button.className,
              id: button.id,
              text: button.textContent
            };
          }
        }
        
        // –ò—â–µ–º –∫–Ω–æ–ø–∫–∏ —Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–º–∏ –∫–ª–∞—Å—Å–∞–º–∏ Google Forms
        const googleButtons = document.querySelectorAll('.freebirdFormviewerViewNavigationSubmitButton, [jsname="M2UYVd"], button[data-value="Submit"]');
        if (googleButtons.length > 0) {
          const button = googleButtons[0];
          return {
            tagName: button.tagName,
            className: button.className,
            id: button.id,
            text: button.textContent
          };
        }
        
        return null;
      });
      
      if (submitButton) {
        console.log(`–ù–∞–π–¥–µ–Ω–∞ –∫–Ω–æ–ø–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏:`, submitButton);
        
        // –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã –∫–ª–∏–∫–∞
        const clickMethods = [
          // –ú–µ—Ç–æ–¥ 1: –ö–ª–∏–∫ –ø–æ —Å–µ–ª–µ–∫—Ç–æ—Ä—É
          async () => {
            const selector = submitButton.id ? `#${submitButton.id}` : 
                           submitButton.className ? `.${submitButton.className.split(' ')[0]}` : 
                           submitButton.tagName.toLowerCase();
            await page.click(selector);
          },
          
          // –ú–µ—Ç–æ–¥ 2: –ö–ª–∏–∫ —á–µ—Ä–µ–∑ evaluate
          async () => {
            await page.evaluate(() => {
              const buttons = Array.from(document.querySelectorAll('button, input[type="submit"], div[role="button"], span'));
              for (const button of buttons) {
                const text = button.textContent?.toLowerCase() || '';
                if (text.includes('submit') || text.includes('–æ—Ç–ø—Ä–∞–≤–∏—Ç—å')) {
                  button.click();
                  return;
                }
              }
            });
          },
          
          // –ú–µ—Ç–æ–¥ 3: –ö–ª–∏–∫ –ø–æ Google Forms –∫–Ω–æ–ø–∫–µ
          async () => {
            await page.evaluate(() => {
              const googleButton = document.querySelector('.freebirdFormviewerViewNavigationSubmitButton, [jsname="M2UYVd"]');
              if (googleButton) {
                googleButton.click();
              }
            });
          }
        ];
        
        for (const clickMethod of clickMethods) {
          try {
            await clickMethod();
            console.log('‚úÖ –ö–Ω–æ–ø–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–∂–∞—Ç–∞ —É—Å–ø–µ—à–Ω–æ!');
            return;
          } catch (error) {
            console.log(`‚ùå –ú–µ—Ç–æ–¥ –∫–ª–∏–∫–∞ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª: ${error.message}`);
            continue;
          }
        }
      }
      
      // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –∫–Ω–æ–ø–∫—É, –ø—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ä–º—É —á–µ—Ä–µ–∑ Enter
      console.log('–ö–Ω–æ–ø–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –ø—Ä–æ–±—É–µ–º Enter...');
      await page.keyboard.press('Enter');
      
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∫–Ω–æ–ø–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏:', error.message);
      // –í –∫—Ä–∞–π–Ω–µ–º —Å–ª—É—á–∞–µ –ø—Ä–æ–±—É–µ–º Enter
      await page.keyboard.press('Enter');
    }
  }

  async waitForSubmission(page) {
    try {
      console.log('‚è≥ –ñ–¥–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º—ã...');
      
      // –ñ–¥–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è URL –∏–ª–∏ –ø–æ—è–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–µ
      await Promise.race([
        // –ñ–¥–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è URL (Google Forms –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏)
        page.waitForFunction(() => {
          return window.location.href.includes('formResponse') || 
                 window.location.href.includes('thankyou') ||
                 window.location.href.includes('confirmation');
        }, { timeout: 15000 }),
        
        // –ñ–¥–µ–º –ø–æ—è–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–µ
        page.waitForSelector('.freebirdFormviewerViewResponseConfirmationMessage, .thank-you, .success, [data-response-id]', { 
          timeout: 15000 
        }),
        
        // –ñ–¥–µ–º –∏—Å—á–µ–∑–Ω–æ–≤–µ–Ω–∏—è —Ñ–æ—Ä–º—ã
        page.waitForFunction(() => {
          const form = document.querySelector('form');
          return !form || form.style.display === 'none';
        }, { timeout: 15000 })
      ]);
      
      console.log('‚úÖ –§–æ—Ä–º–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!');
      
    } catch (error) {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è –ª–∏ URL
      const currentUrl = page.url();
      if (currentUrl.includes('formResponse') || currentUrl.includes('thankyou')) {
        console.log('‚úÖ –§–æ—Ä–º–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ (–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ –ø–æ URL)');
        return;
      }
      
      console.log('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–∂–¥–∞—Ç—å—Å—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏, –Ω–æ —Ñ–æ—Ä–º–∞ –º–æ–≥–ª–∞ –±—ã—Ç—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞');
    }
  }

  updateJobStatus(jobId, status, error = null) {
    const job = this.jobs.get(jobId);
    if (job) {
      job.status = status;
      job.endTime = new Date();
      if (error) {
        job.error = error;
      }
      this.jobs.set(jobId, job);
    }
  }

  async getJobStatus(jobId) {
    return this.jobs.get(jobId) || null;
  }

  async stopJob(jobId) {
    const job = this.jobs.get(jobId);
    if (job && job.status === 'running') {
      job.status = 'stopped';
      job.endTime = new Date();
      this.jobs.set(jobId, job);
    }
  }

  async getJobResults(jobId) {
    const job = this.jobs.get(jobId);
    return job ? job.results : [];
  }

  async getAllJobs() {
    return Array.from(this.jobs.values());
  }

  sleep(ms) {
    return new Promise(resolve => setTimeout(resolve, ms));
  }

  generateAnonymousAccounts(count, formConfig) {
    const accounts = [];
    
    for (let i = 0; i < count; i++) {
      const account = {
        id: `anon_${Date.now()}_${i}`,
        email: `anonymous_${i + 1}`,
        password: '',
        data: this.generateAnonymousData(formConfig.fields, i)
      };
      accounts.push(account);
    }
    
    return accounts;
  }

  generateAnonymousData(fields, index) {
    const data = {};
    
    fields.forEach(field => {
      const fieldName = field.name || field.id;
      
      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –ø–æ–ª—è
      switch (field.type) {
        case 'text':
        case 'textarea':
          if (fieldName.toLowerCase().includes('email')) {
            data[fieldName] = `user${index + 1}@example.com`;
          } else if (fieldName.toLowerCase().includes('name')) {
            data[fieldName] = `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${index + 1}`;
          } else if (fieldName.toLowerCase().includes('phone')) {
            data[fieldName] = `+7${Math.floor(Math.random() * 9000000000) + 1000000000}`;
          } else {
            data[fieldName] = `–û—Ç–≤–µ—Ç ${index + 1}`;
          }
          break;
          
        case 'number':
          data[fieldName] = Math.floor(Math.random() * 100) + 1;
          break;
          
        case 'select':
        case 'radio':
          if (field.options && field.options.length > 0) {
            const randomOption = field.options[Math.floor(Math.random() * field.options.length)];
            data[fieldName] = randomOption.value;
          }
          break;
          
        case 'checkbox':
          if (field.options && field.options.length > 0) {
            const selectedCount = Math.floor(Math.random() * field.options.length) + 1;
            const selected = [];
            for (let i = 0; i < selectedCount; i++) {
              const option = field.options[Math.floor(Math.random() * field.options.length)];
              if (!selected.includes(option.value)) {
                selected.push(option.value);
              }
            }
            data[fieldName] = selected;
          }
          break;
          
        case 'date':
          const date = new Date();
          date.setDate(date.getDate() + Math.floor(Math.random() * 365));
          data[fieldName] = date.toISOString().split('T')[0];
          break;
          
        default:
          data[fieldName] = `–ó–Ω–∞—á–µ–Ω–∏–µ ${index + 1}`;
      }
    });
    
    return data;
  }

  async close() {
    if (this.browser) {
      await this.browser.close();
      this.browser = null;
    }
  }
}

module.exports = FormAutomator;
