const puppeteer = require('puppeteer');
const FormConfig = require('../models/FormConfig');
const AccountManager = require('./AccountManager');
const AutomationJob = require('../models/AutomationJob');
const BrowserProfileManager = require('./BrowserProfileManager');
const Proxy = require('../models/Proxy');
const fs = require('fs-extra');
const path = require('path');

class FormAutomator {
  constructor() {
    this.jobs = new Map();
    this.browser = null;
    this.jobModel = new AutomationJob();
    this.profileManager = new BrowserProfileManager();
    this.usedProxies = new Map(); // –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø—Ä–æ–∫—Å–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –∑–∞–¥–∞—á–∏
    this.maxConcurrentBrowsers = 1; // –£—Å—Ç–∞—Ä–µ–≤—à–∏–π –≥–ª–æ–±–∞–ª—å–Ω—ã–π –ª–∏–º–∏—Ç (–Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∑–∞–¥–∞—á)
    this.activeBrowsers = new Set(); // –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Ç—Ä–µ–∫–∏–Ω–≥ (—Å–æ—Ö—Ä–∞–Ω—è–µ–º –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –ª–æ–≥–æ–≤)
    this.batchSize = 1; // –ü–∞–∫–µ—Ç –∏–∑ –æ–¥–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
    this.batchDelay = 0; // –ë–µ–∑ –∑–∞–¥–µ—Ä–∂–∫–∏ –º–µ–∂–¥—É –ø–∞–∫–µ—Ç–∞–º–∏
    this.cancellationTokens = new Map(); // jobId -> { cancelled: boolean }
    this.jobBrowsers = new Map(); // jobId -> Set(accountId)
    this.jobConcurrency = new Map(); // jobId -> number
  }

  async initBrowser(options = {}) {
    if (!this.browser) {
      try {
        const headless = options.headless !== undefined ? options.headless : false;–∞—á–∏–æ 
        console.log(`üåê –ó–∞–ø—É—Å–∫ –±—Ä–∞—É–∑–µ—Ä–∞ Puppeteer... (headless: ${headless})`);
        
        const browserOptions = {
          headless: headless,
          args: [
            '--no-sandbox',
            '--disable-setuid-sandbox',
            '--disable-dev-shm-usage',
            '--disable-accelerated-2d-canvas',
            '--no-first-run',
            '--no-zygote',
            '--disable-gpu',
            '--disable-web-security',
            '--disable-features=VizDisplayCompositor',
            '--disable-background-timer-throttling',
            '--disable-backgrounding-occluded-windows',
            '--disable-renderer-backgrounding',
            '--disable-extensions',
            '--disable-plugins',
            '--disable-images'
          ],
          timeout: 60000
        };

        if (options.proxy) {
          browserOptions.args.push(`--proxy-server=${options.proxy}`);
          console.log(`üåê –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ–∫—Å–∏: ${options.proxy}`);
        }

        this.browser = await puppeteer.launch(browserOptions);
        console.log(`‚úÖ –ë—Ä–∞—É–∑–µ—Ä —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω (headless: ${headless})`);

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–∫—Ä—ã—Ç–∏—è –±—Ä–∞—É–∑–µ—Ä–∞
        this.browser.on('disconnected', () => {
          console.log('‚ö†Ô∏è –ë—Ä–∞—É–∑–µ—Ä –æ—Ç–∫–ª—é—á–µ–Ω');
          this.browser = null;
        });

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ –±—Ä–∞—É–∑–µ—Ä–∞
        this.browser.on('error', (error) => {
          console.error('‚ùå –û—à–∏–±–∫–∞ –±—Ä–∞—É–∑–µ—Ä–∞:', error);
          this.browser = null;
        });

      } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±—Ä–∞—É–∑–µ—Ä–∞:`, error);
        throw error;
      }
    }
    return this.browser;
  }

  async startAutomation(formConfigId, accountIds, options = {}) {
    const jobId = `job_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
    
    console.log(`üéØ –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏: ${jobId}`);
    console.log(`üìù ID –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Ñ–æ—Ä–º—ã: ${formConfigId}`);
    console.log(`üë• –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤: ${options.accountData?.length || 0}`);
    console.log(`üîê –†–µ–∂–∏–º –≤—Ö–æ–¥–∞: ${options.loginMode || 'anonymous'}`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤
    const accountCount = options.accountData?.length || 0;
    if (accountCount === 0) {
      throw new Error('–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏');
    }
    
    if (accountCount > 1000) {
      console.log(`‚ö†Ô∏è –ë–æ–ª—å—à–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ (${accountCount}). –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É.`);
    }
    
    try {
      // –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Ñ–æ—Ä–º—ã
      console.log(`üîç –ü–æ–∏—Å–∫ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Ñ–æ—Ä–º—ã...`);
      const formConfig = await FormConfig.getById(formConfigId);
      if (!formConfig) {
        throw new Error('–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ñ–æ—Ä–º—ã –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
      }
      console.log(`‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ñ–æ—Ä–º—ã –Ω–∞–π–¥–µ–Ω–∞: ${formConfig.title}`);

      let accounts = [];
      
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç–æ–≤
      accounts = options.accountData.map(accountData => ({
        id: accountData.id,
        name: accountData.name,
        email: `${accountData.name}@example.com`,
        fields: accountData.fields,
        loginMode: options.loginMode || 'anonymous'
      }));
      
      // –ï—Å–ª–∏ —Ä–µ–∂–∏–º —Å –ª–æ–≥–∏–Ω–æ–º Google, –¥–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–∫–∫–∞—É–Ω—Ç–∞—Ö
      if (options.loginMode === 'google' && accountIds && accountIds.length > 0) {
        const accountManager = new AccountManager();
        const googleAccounts = await accountManager.getAccountsByIds(accountIds);
        
        // –°–æ–ø–æ—Å—Ç–∞–≤–ª—è–µ–º Google –∞–∫–∫–∞—É–Ω—Ç—ã —Å –¥–∞–Ω–Ω—ã–º–∏
        accounts.forEach((account, index) => {
          if (googleAccounts[index]) {
            account.googleAccount = googleAccounts[index];
            account.email = googleAccounts[index].email;
          }
        });
      }

      // –°–æ–∑–¥–∞–µ–º –ø–æ–Ω—è—Ç–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏
      const taskName = `${formConfig.title || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'} - ${accounts.length} –∞–∫–∫–∞—É–Ω—Ç–æ–≤ (${options.loginMode === 'google' ? '—Å –ª–æ–≥–∏–Ω–æ–º' : '–∞–Ω–æ–Ω–∏–º–Ω–æ'})`;
      
      // –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
      console.log(`üíæ –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...`);
      const job = await this.jobModel.create({
        id: jobId,
        name: taskName,
        formConfigId,
        formTitle: formConfig.title,
        status: 'running',
        startTime: new Date().toISOString(),
        totalAccounts: accounts.length,
        completedAccounts: 0,
        failedAccounts: 0,
        loginMode: options.loginMode || 'anonymous'
      });
      console.log(`‚úÖ –ó–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö`);

      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø—Ä–æ–∫—Å–∏ –¥–ª—è —ç—Ç–æ–π –∑–∞–¥–∞—á–∏
      this.usedProxies.set(jobId, new Set());
      console.log(`üìä –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø—Ä–æ–∫—Å–∏ –¥–ª—è –∑–∞–¥–∞—á–∏ ${jobId}`);

      // –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–π –ª–æ–≥
      console.log(`üìù –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ –ª–æ–≥–∞...`);
      await this.jobModel.addLog(jobId, {
        type: 'info',
        message: `–ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –¥–ª—è ${accounts.length} –∞–∫–∫–∞—É–Ω—Ç–æ–≤ (${options.loginMode === 'google' ? '—Å –ª–æ–≥–∏–Ω–æ–º Google' : '–∞–Ω–æ–Ω–∏–º–Ω–æ'})`
      });

      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω –æ—Ç–º–µ–Ω—ã
      this.cancellationTokens.set(jobId, { cancelled: false });

      // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–æ–Ω–∫—É—Ä—Ä–µ–Ω—Å–∏
      const desiredConcurrency = Math.max(1, Math.min(8, Number(options.concurrency) || 1));
      this.jobConcurrency.set(jobId, desiredConcurrency);
      console.log(`üßµ –ö–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω–æ—Å—Ç—å –¥–ª—è –∑–∞–¥–∞—á–∏ ${jobId}: ${desiredConcurrency}`);

      // –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—é –≤ —Ñ–æ–Ω–µ
      console.log(`üöÄ –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ...`);
      this.runAutomation(jobId, formConfig, accounts, options).catch(error => {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –≤ –∑–∞–¥–∞—á–µ ${jobId}:`, error);
        this.updateJobStatus(jobId, 'failed', error.message);
      });

      return jobId;

    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏:', error);
      throw error;
    }
  }

  // –Ø–≤–Ω–æ–µ –æ–∂–∏–¥–∞–Ω–∏–µ –ø–æ—è–≤–ª–µ–Ω–∏—è —ç–∫—Ä–∞–Ω–∞ —á–µ–ª–µ–Ω–¥–∂–∞ –∏ –≤–æ–∑–≤—Ä–∞—Ç –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
  async waitForChallenge(page, timeoutMs = 20000) {
    const start = Date.now();
    const selectors = [
      'div[id*="challenge"]',
      'div[data-challengetype]',
      'input[name="idvAnyPhonePin"]',
      'div[aria-label*="2-Step Verification" i]',
      'form[action*="challenge"]'
    ];
    while (Date.now() - start < timeoutMs) {
      for (const sel of selectors) {
        const el = await page.$(sel);
        if (el) {
          const visible = await page.evaluate(e => {
            const r = e.getBoundingClientRect();
            return r.width > 0 && r.height > 0 && getComputedStyle(e).visibility !== 'hidden';
          }, el).catch(() => false);
          if (visible) return el;
        }
      }
      await page.waitForTimeout(500);
    }
    throw new Error('–≠–∫—Ä–∞–Ω –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –Ω–µ –ø–æ—è–≤–∏–ª—Å—è –≤–æ–≤—Ä–µ–º—è');
  }

  async runAutomation(jobId, formConfig, accounts, options) {
    console.log(`üöÄ –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –¥–ª—è –∑–∞–¥–∞—á–∏ ${jobId}`);
    console.log(`üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤: ${accounts.length}`);
    console.log(`üìù –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ñ–æ—Ä–º—ã: ${formConfig.title}`);
    // –°–≤–æ–¥–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –æ–ø—Ü–∏—è–º, –±–µ–∑ –æ–≥—Ä–æ–º–Ω—ã—Ö JSON
    console.log(`‚öôÔ∏è –û–ø—Ü–∏–∏: loginMode=${options.loginMode}, headless=${options.headless !== false}, accounts=${accounts.length}`);
    
    const job = await this.jobModel.getById(jobId);
    if (!job) {
      console.error(`‚ùå –ó–∞–¥–∞—á–∞ ${jobId} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö`);
      return;
    }

    console.log(`‚úÖ –ó–∞–¥–∞—á–∞ –Ω–∞–π–¥–µ–Ω–∞: ${job.status}`);
    const jobConc = this.jobConcurrency.get(jobId) || 1;

    try {
      // –ï—Å–ª–∏ –∫–æ–Ω–∫—É—Ä—Ä–µ–Ω—Å–∏ –±–æ–ª—å—à–µ 1 ‚Äî –∑–∞–ø—É—Å–∫–∞–µ–º –ø—É–ª –≤–æ—Ä–∫–µ—Ä–æ–≤ —Å –¥–∂–∏—Ç—Ç–µ—Ä–æ–º
      const jobConc = this.jobConcurrency.get(jobId) || 1;
      if (jobConc > 1) {
        console.log(`üßµ –ó–∞–ø—É—Å–∫ –ø—É–ª–∞ –≤–æ—Ä–∫–µ—Ä–æ–≤: ${jobConc}`);
        await this.runAutomationWithConcurrency(jobId, formConfig, accounts, options, jobConc);
        // –ü–æ—Å–ª–µ –ø—É–ª–∞ ‚Äî —Ç–µ –∂–µ –∑–∞–≤–µ—Ä—à–∞—é—â–∏–µ –¥–µ–π—Å—Ç–≤–∏—è
        const tokenEnd = this.cancellationTokens.get(jobId);
        const finalStatus = tokenEnd && tokenEnd.cancelled ? 'stopped' : 'completed';
        await this.updateJobStatus(jobId, finalStatus);
        await this.jobModel.addLog(jobId, {
          type: finalStatus === 'stopped' ? 'warning' : 'success',
          message: finalStatus === 'stopped' ? `–ó–∞–¥–∞—á–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º` : `–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${job.completedAccounts}, –û—à–∏–±–æ–∫: ${job.failedAccounts}`
        });
        this.usedProxies.delete(jobId);
        await this.closeJobBrowsers(jobId);
        return;
      }
      // –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥ –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
      await this.jobModel.addLog(jobId, {
        type: 'info',
        message: '–ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –∞–∫–∫–∞—É–Ω—Ç–æ–≤'
      });
      
      // –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–π —Ä–∞–∑–º–µ—Ä –ø–∞–∫–µ—Ç–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤
      let batchSize = this.batchSize;
      if (accounts.length > 500) {
        batchSize = 5; // –ú–µ–Ω—å—à–∏–µ –ø–∞–∫–µ—Ç—ã –¥–ª—è –±–æ–ª—å—à–∏—Ö –æ–±—ä–µ–º–æ–≤
      } else if (accounts.length > 100) {
        batchSize = 8;
      }
      
      const totalBatches = Math.ceil(accounts.length / batchSize);
      console.log(`üì¶ –û–±—Ä–∞–±–æ—Ç–∫–∞ ${accounts.length} –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –ø–∞–∫–µ—Ç–∞–º–∏ –ø–æ ${batchSize} (–≤—Å–µ–≥–æ –ø–∞–∫–µ—Ç–æ–≤: ${totalBatches})`);
      
      for (let batchIndex = 0; batchIndex < totalBatches; batchIndex++) {
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–º–µ–Ω—ã –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º –ø–∞–∫–µ—Ç–∞
        const token = this.cancellationTokens.get(jobId);
        if (token && token.cancelled) {
          console.log(`üõë –ó–∞–¥–∞—á–∞ ${jobId} –æ—Ç–º–µ–Ω–µ–Ω–∞ –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º –ø–∞–∫–µ—Ç–∞ ${batchIndex + 1}`);
          await this.jobModel.addLog(jobId, { type: 'warning', message: `–ó–∞–¥–∞—á–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º` });
          break;
        }
        const startIndex = batchIndex * batchSize;
        const endIndex = Math.min(startIndex + batchSize, accounts.length);
        const batch = accounts.slice(startIndex, endIndex);
        
        console.log(`\nüì¶ === –ü–ê–ö–ï–¢ ${batchIndex + 1}/${totalBatches} ===`);
        console.log(`üìä –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∞–∫–∫–∞—É–Ω—Ç—ã ${startIndex + 1}-${endIndex} –∏–∑ ${accounts.length}`);
        console.log(`üë• –ê–∫–∫–∞—É–Ω—Ç–æ–≤ –≤ –ø–∞–∫–µ—Ç–µ: ${batch.length}`);
        const jobActiveBefore = (this.jobBrowsers.get(jobId)?.size || 0);
        console.log(`üåê –ê–∫—Ç–∏–≤–Ω—ã—Ö –±—Ä–∞—É–∑–µ—Ä–æ–≤ –∑–∞–¥–∞—á–∏ –ø–µ—Ä–µ–¥ –ø–∞–∫–µ—Ç–æ–º: ${jobActiveBefore}/${jobConc}`);
        
        // –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥ –æ –Ω–∞—á–∞–ª–µ –ø–∞–∫–µ—Ç–∞
        await this.jobModel.addLog(jobId, {
          type: 'info',
          message: `–ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–∞–∫–µ—Ç–∞ ${batchIndex + 1}/${totalBatches} (–∞–∫–∫–∞—É–Ω—Ç—ã ${startIndex + 1}-${endIndex})`
        });
        
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∞–∫–∫–∞—É–Ω—Ç—ã –≤ —Ç–µ–∫—É—â–µ–º –ø–∞–∫–µ—Ç–µ
        for (let i = 0; i < batch.length; i++) {
          const tokenInner = this.cancellationTokens.get(jobId);
          if (tokenInner && tokenInner.cancelled) {
            console.log(`üõë –ó–∞–¥–∞—á–∞ ${jobId} –æ—Ç–º–µ–Ω–µ–Ω–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–∞–∫–µ—Ç–∞`);
            await this.jobModel.addLog(jobId, { type: 'warning', message: `–ó–∞–¥–∞—á–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º (–≤ –ø—Ä–æ—Ü–µ—Å—Å–µ)` });
            break;
          }
          const account = batch[i];
          const globalIndex = startIndex + i;
          
          console.log(`\nüîÑ === –ò–¢–ï–†–ê–¶–ò–Ø ${globalIndex + 1}/${accounts.length} ===`);
          console.log(`üë§ –ê–∫–∫–∞—É–Ω—Ç: ${account.email}`);
          console.log(`üÜî ID –∞–∫–∫–∞—É–Ω—Ç–∞: ${account.id}`);
          console.log(`üìä –ü—Ä–æ–≥—Ä–µ—Å—Å: ${globalIndex}/${accounts.length} (${Math.round((globalIndex/accounts.length)*100)}%)`);
          console.log(`üì¶ –ü–∞–∫–µ—Ç: ${batchIndex + 1}/${totalBatches}, –ü–æ–∑–∏—Ü–∏—è –≤ –ø–∞–∫–µ—Ç–µ: ${i + 1}/${batch.length}`);
          
          console.log(`\nüöÄ –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –∞–∫–∫–∞—É–Ω—Ç–∞ ${globalIndex + 1}/${accounts.length}: ${account.email}`);
          console.log(`üìä –í—Å–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: ${accounts.length}`);
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –±—Ä–∞—É–∑–µ—Ä–æ–≤ –¢–û–õ–¨–ö–û —Ç–µ–∫—É—â–µ–π –∑–∞–¥–∞—á–∏
          const activeBrowserCount = (this.jobBrowsers.get(jobId)?.size || 0);
          console.log(`üåê –ê–∫—Ç–∏–≤–Ω—ã—Ö –±—Ä–∞—É–∑–µ—Ä–æ–≤ –∑–∞–¥–∞—á–∏: ${activeBrowserCount}/${jobConc}`);
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –ª–∏ —É–∂–µ —ç—Ç–æ—Ç –∞–∫–∫–∞—É–Ω—Ç
          if ((this.jobBrowsers.get(jobId)?.has(account.id)) === true) {
            console.log(`‚ö†Ô∏è –ê–∫–∫–∞—É–Ω—Ç ${account.id} —É–∂–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è! –ü—Ä–æ–ø—É—Å–∫–∞–µ–º...`);
            await this.jobModel.addLog(jobId, {
              type: 'warning',
              message: `–ê–∫–∫–∞—É–Ω—Ç ${account.email} —É–∂–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º.`,
              accountId: account.id
            });
            continue; // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –∞–∫–∫–∞—É–Ω—Ç—É
          }
          
          if (activeBrowserCount >= jobConc) {
            console.log(`‚è≥ –î–æ—Å—Ç–∏–≥–Ω—É—Ç–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±—Ä–∞—É–∑–µ—Ä–æ–≤. –ñ–¥–µ–º –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è...`);
            await this.jobModel.addLog(jobId, {
              type: 'info',
              message: `–î–æ—Å—Ç–∏–≥–Ω—É—Ç–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±—Ä–∞—É–∑–µ—Ä–æ–≤ (${jobConc}). –ñ–¥–µ–º –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è...`,
              accountId: account.id
            });
            
            // –ñ–¥–µ–º –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è –±—Ä–∞—É–∑–µ—Ä–æ–≤ –±–µ–∑ –≥–ª–æ–±–∞–ª—å–Ω–æ–π –∑–∞—á–∏—Å—Ç–∫–∏, —Å —É–≤–µ–ª–∏—á–∏–≤–∞—é—â–∏–º—Å—è –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º
            let waitTime = 0;
            const maxWaitTime = 60000; // –¥–æ 60 —Å–µ–∫—É–Ω–¥
            let interval = 500; // —Å—Ç–∞—Ä—Ç–æ–≤—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª
            console.log(`‚è≥ –ù–∞—á–∏–Ω–∞–µ–º –æ–∂–∏–¥–∞–Ω–∏–µ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è –±—Ä–∞—É–∑–µ—Ä–æ–≤...`);
            console.log(`üìã –ê–∫—Ç–∏–≤–Ω—ã–µ –±—Ä–∞—É–∑–µ—Ä—ã –∑–∞–¥–∞—á–∏:`, Array.from(this.jobBrowsers.get(jobId) || []));
            
            while ((this.jobBrowsers.get(jobId)?.size || 0) >= jobConc && waitTime < maxWaitTime) {
              const tokenWait = this.cancellationTokens.get(jobId);
              if (tokenWait && tokenWait.cancelled) {
                console.log(`üõë –ó–∞–¥–∞—á–∞ ${jobId} –æ—Ç–º–µ–Ω–µ–Ω–∞ –≤–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è —Å–ª–æ—Ç–æ–≤ –±—Ä–∞—É–∑–µ—Ä–∞`);
                break;
              }
              await this.sleep(interval);
              waitTime += interval;
              interval = Math.min(interval + 500, 3000); // –ø–ª–∞–≤–Ω–æ–µ —É–≤–µ–ª–∏—á–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞
              const currentJobActive = (this.jobBrowsers.get(jobId)?.size || 0);
              console.log(`‚è≥ –ñ–¥–µ–º –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è –±—Ä–∞—É–∑–µ—Ä–æ–≤ –∑–∞–¥–∞—á–∏... (${currentJobActive}/${jobConc}) - ${waitTime}–º—Å`);
            }
            
            if (waitTime >= maxWaitTime) {
              console.log(`‚ö†Ô∏è –¢–∞–π–º–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è –±—Ä–∞—É–∑–µ—Ä–æ–≤ (${maxWaitTime}–º—Å). –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏.`);
            } else {
              console.log(`‚úÖ –ë—Ä–∞—É–∑–µ—Ä—ã –æ—Å–≤–æ–±–æ–¥–∏–ª–∏—Å—å –∑–∞ ${waitTime}–º—Å`);
            }
          }
          
          // –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥ –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–∞
          await this.jobModel.addLog(jobId, {
            type: 'info',
            message: `–û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–∞ ${globalIndex + 1}/${accounts.length}: ${account.email}`,
            accountId: account.id
          });
          
          const result = await this.fillFormForAccountWithProfile(formConfig, account, options, globalIndex, jobId);
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–µ undefined
          if (!result) {
            console.error(`‚ùå –ú–µ—Ç–æ–¥ fillFormForAccountWithProfile –≤–µ—Ä–Ω—É–ª undefined –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ ${account.id}`);
            await this.jobModel.addResult(jobId, {
              accountId: account.id,
              accountName: account.name,
              accountEmail: account.email,
              success: false,
              error: '–ú–µ—Ç–æ–¥ fillFormForAccountWithProfile –≤–µ—Ä–Ω—É–ª undefined',
              submittedAt: new Date().toISOString(),
              filledData: account.fields
            });
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –Ω–µ—É–¥–∞—á–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤
            const updatedJob = await this.jobModel.getById(jobId);
            await this.jobModel.update(jobId, {
              failedAccounts: updatedJob.failedAccounts + 1
            });
            
            continue; // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –∞–∫–∫–∞—É–Ω—Ç—É
          }
          
          // –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ (—É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –¥–ª—è —É—Å–ø–µ—Ö–∞ –∏ –æ—à–∏–±–∫–∏)
          await this.jobModel.addResult(jobId, {
            accountId: account.id,
            accountName: account.name,
            accountEmail: account.email,
            success: result.success,
            submittedAt: result.submittedAt || new Date().toISOString(),
            filledData: account.fields,
            skipped: result.skipped || false,
            message: result.message || (result.success ? '–£—Å–ø–µ—à–Ω–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ' : '–û—à–∏–±–∫–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è'),
            error: result.error || null
          });
          
          // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
          const updatedJob = await this.jobModel.getById(jobId);
          if (result.success) {
            await this.jobModel.update(jobId, {
              completedAccounts: updatedJob.completedAccounts + 1
            });
          } else {
            await this.jobModel.update(jobId, {
              failedAccounts: updatedJob.failedAccounts + 1
            });
            
            // –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥ –æ–± –æ—à–∏–±–∫–µ
            await this.jobModel.addLog(jobId, {
              type: 'error',
              message: `–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–∞ ${account.email}: ${result.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`,
              accountId: account.id
            });
          }
          
          // –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥ –æ–± —É—Å–ø–µ—Ö–µ
          const logMessage = result.skipped 
            ? `–ê–∫–∫–∞—É–Ω—Ç ${account.email} –ø—Ä–æ–ø—É—â–µ–Ω (—Ñ–æ—Ä–º–∞ —É–∂–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞)`
            : `–ê–∫–∫–∞—É–Ω—Ç ${account.email} —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω`;
            
          await this.jobModel.addLog(jobId, {
            type: result.skipped ? 'warning' : 'success',
            message: logMessage,
            accountId: account.id
          });
          
          console.log(`‚úÖ ${logMessage} (${globalIndex + 1}/${accounts.length})`);
          
          // –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥ –æ –∑–∞–¥–µ—Ä–∂–∫–µ –º–µ–∂–¥—É —Å–∞–±–º–∏—Ç–∞–º–∏
          if (options.delaySettings && options.delaySettings.enabled) {
            const submitDelay = this.calculateSubmitDelay(options.delaySettings, globalIndex);
            if (submitDelay > 0) {
              console.log(`‚è≥ –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Å–∞–±–º–∏—Ç–∞–º–∏: ${submitDelay}–º—Å (${options.delaySettings.type})`);
              await this.jobModel.addLog(jobId, {
                type: 'info',
                message: `–ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Å–∞–±–º–∏—Ç–∞–º–∏: ${submitDelay}–º—Å (${options.delaySettings.type})`,
                accountId: account.id
              });
              await this.sleep(submitDelay);
              console.log(`‚úÖ –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Å–∞–±–º–∏—Ç–∞–º–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞`);
            }
          }

          // –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏ (–∫—Ä–æ–º–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤ –ø–∞–∫–µ—Ç–µ)
          if (i < batch.length - 1) {
            const accountDelay = options.delay || 1000;
            console.log(`‚è≥ –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏: ${accountDelay}–º—Å`);
            await this.jobModel.addLog(jobId, {
              type: 'info',
              message: `–ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏: ${accountDelay}–º—Å`
            });
            await this.sleep(accountDelay);
            console.log(`‚úÖ –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞`);
          }
          
          console.log(`üîÑ –ó–∞–≤–µ—Ä—à–µ–Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–∞ ${globalIndex + 1}/${accounts.length}. –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É...`);
          
          // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏
          await this.jobModel.update(jobId, {
            completedAccounts: globalIndex + 1,
            status: 'running'
          });
          console.log(`üìä –û–±–Ω–æ–≤–ª–µ–Ω —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏: ${globalIndex + 1}/${accounts.length} –∑–∞–≤–µ—Ä—à–µ–Ω–æ`);
          
          console.log(`üîÑ === –ü–ï–†–ï–•–û–î –ö –°–õ–ï–î–£–Æ–©–ï–ú–£ –ê–ö–ö–ê–£–ù–¢–£ ===`);
          console.log(`üìä –¢–µ–∫—É—â–∏–π –∏–Ω–¥–µ–∫—Å: ${i}, –†–∞–∑–º–µ—Ä –ø–∞–∫–µ—Ç–∞: ${batch.length}`);
          console.log(`üìä –°–ª–µ–¥—É—é—â–∏–π –∞–∫–∫–∞—É–Ω—Ç –≤ –ø–∞–∫–µ—Ç–µ: ${i + 1 < batch.length ? '–î–∞' : '–ù–µ—Ç'}`);
          
          // –û—á–∏—Å—Ç–∫–∞ –ø–∞–º—è—Ç–∏ –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ (–±–µ–∑ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∑–∞–∫—Ä—ã—Ç–∏—è –±—Ä–∞—É–∑–µ—Ä–æ–≤)
          if (global.gc) {
            global.gc();
            console.log(`üßπ –û—á–∏—Å—Ç–∫–∞ –ø–∞–º—è—Ç–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞`);
          }
          
        
        // –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–∞
        console.log(`üèÅ –ó–∞–≤–µ—Ä—à–µ–Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–∞ ${globalIndex + 1}/${accounts.length}: ${account.email}`);
        console.log(`üîÑ === –ö–û–ù–ï–¶ –ò–¢–ï–†–ê–¶–ò–ò ${globalIndex + 1}/${accounts.length} ===`);
      }
      
      console.log(`üì¶ === –ö–û–ù–ï–¶ –ü–ê–ö–ï–¢–ê ${batchIndex + 1}/${totalBatches} ===`);
      console.log(`üìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –≤ –ø–∞–∫–µ—Ç–µ: ${batch.length}`);
      
      // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –±—Ä–∞—É–∑–µ—Ä–æ–≤ –¢–û–õ–¨–ö–û —Ç–µ–∫—É—â–µ–π –∑–∞–¥–∞—á–∏
      console.log(`üßπ –û—á–∏—Å—Ç–∫–∞ –±—Ä–∞—É–∑–µ—Ä–æ–≤ —Ç–µ–∫—É—â–µ–≥–æ –ø–∞–∫–µ—Ç–∞ –∑–∞–¥–∞—á–∏ ${jobId}...`);
      try {
        await this.closeJobBrowsers(jobId);
        console.log(`‚úÖ –ë—Ä–∞—É–∑–µ—Ä—ã –∑–∞–¥–∞—á–∏ ${jobId} –∑–∞–∫—Ä—ã—Ç—ã –ø–æ—Å–ª–µ –ø–∞–∫–µ—Ç–∞`);
      } catch (cleanupError) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –±—Ä–∞—É–∑–µ—Ä–æ–≤ –∑–∞–¥–∞—á–∏ ${jobId}:`, cleanupError);
      }
      
      // –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –ø–∞–∫–µ—Ç–∞–º–∏ (–∫—Ä–æ–º–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ)
      if (batchIndex < totalBatches - 1) {
        console.log(`‚è≥ –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –ø–∞–∫–µ—Ç–∞–º–∏: ${this.batchDelay}–º—Å`);
        await this.jobModel.addLog(jobId, {
          type: 'info',
          message: `–ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –ø–∞–∫–µ—Ç–∞–º–∏: ${this.batchDelay}–º—Å`
        });
        await this.sleep(this.batchDelay);
        console.log(`‚úÖ –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –ø–∞–∫–µ—Ç–∞–º–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞`);
      }
      
      console.log(`üì¶ –ü–∞–∫–µ—Ç ${batchIndex + 1}/${totalBatches} –∑–∞–≤–µ—Ä—à–µ–Ω`);
    }
    
    console.log(`üéâ –í—Å–µ –ø–∞–∫–µ—Ç—ã –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã! –ó–∞–≤–µ—Ä—à–∞–µ–º –∑–∞–¥–∞—á—É...`);
      
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å —Å —É—á–µ—Ç–æ–º –æ—Ç–º–µ–Ω—ã
      const tokenEnd = this.cancellationTokens.get(jobId);
      const finalStatus = tokenEnd && tokenEnd.cancelled ? 'stopped' : 'completed';
      await this.updateJobStatus(jobId, finalStatus);
      await this.jobModel.addLog(jobId, {
        type: finalStatus === 'stopped' ? 'warning' : 'success',
        message: finalStatus === 'stopped' ? `–ó–∞–¥–∞—á–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º` : `–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${job.completedAccounts}, –û—à–∏–±–æ–∫: ${job.failedAccounts}`
      });

      // –û—á–∏—â–∞–µ–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø—Ä–æ–∫—Å–∏ –¥–ª—è —ç—Ç–æ–π –∑–∞–¥–∞—á–∏
      this.usedProxies.delete(jobId);
      console.log(`üßπ –û—á–∏—â–µ–Ω–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø—Ä–æ–∫—Å–∏ –¥–ª—è –∑–∞–¥–∞—á–∏ ${jobId}`);
      
      // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
      await new Promise(resolve => setTimeout(resolve, 1000));
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å —É—Å–ø–µ—à–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã
      if (job.completedAccounts > 0) {
        const notificationType = job.failedAccounts === 0 ? 'success' : 'warning';
        const notificationMessage = job.failedAccounts === 0 
          ? `üéâ –ó–∞–¥–∞—á–∞ "${formConfig.title}" –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ! –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${job.completedAccounts}`
          : `‚ö†Ô∏è –ó–∞–¥–∞—á–∞ "${formConfig.title}" –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Å –æ—à–∏–±–∫–∞–º–∏! –£—Å–ø–µ—à–Ω–æ: ${job.completedAccounts}, –û—à–∏–±–æ–∫: ${job.failedAccounts}`;
        
        await this.sendNotification({
          type: notificationType,
          message: notificationMessage,
          sound: true
        });
      }
      
      // –ó–∞–∫—Ä—ã–≤–∞–µ–º –±—Ä–∞—É–∑–µ—Ä—ã —Ç–æ–ª—å–∫–æ —Ç–µ–∫—É—â–µ–π –∑–∞–¥–∞—á–∏
      console.log(`üîí –ó–∞–∫—Ä—ã–≤–∞–µ–º –±—Ä–∞—É–∑–µ—Ä—ã –∑–∞–¥–∞—á–∏ ${jobId}...`);
      await this.closeJobBrowsers(jobId);
      console.log(`‚úÖ –ë—Ä–∞—É–∑–µ—Ä—ã –∑–∞–¥–∞—á–∏ ${jobId} –∑–∞–∫—Ä—ã—Ç—ã`);
      
    } catch (error) {
      console.error(`–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –∑–∞–¥–∞—á–µ ${jobId}:`, error);
      
      // –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –±—Ä–∞—É–∑–µ—Ä—ã –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
      try {
        console.log(`üîí –ó–∞–∫—Ä—ã–≤–∞–µ–º –±—Ä–∞—É–∑–µ—Ä—ã –∑–∞–¥–∞—á–∏ ${jobId} –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏...`);
        await this.closeJobBrowsers(jobId);
        console.log(`‚úÖ –ë—Ä–∞—É–∑–µ—Ä—ã –∑–∞–¥–∞—á–∏ ${jobId} –∑–∞–∫—Ä—ã—Ç—ã`);
      } catch (closeError) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –±—Ä–∞—É–∑–µ—Ä–æ–≤:', closeError);
      }
      
      await this.updateJobStatus(jobId, 'failed', error.message);
      
      // –û—á–∏—â–∞–µ–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø—Ä–æ–∫—Å–∏ –¥–ª—è —ç—Ç–æ–π –∑–∞–¥–∞—á–∏
      this.usedProxies.delete(jobId);
      console.log(`üßπ –û—á–∏—â–µ–Ω–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø—Ä–æ–∫—Å–∏ –¥–ª—è –∑–∞–¥–∞—á–∏ ${jobId} (–æ—à–∏–±–∫–∞)`);
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
      await this.sendNotification({
        type: 'error',
        message: `‚ùå –ó–∞–¥–∞—á–∞ "${formConfig?.title || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è'}" –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –æ—à–∏–±–∫–æ–π: ${error.message}`,
        sound: true
      });
    }
  }

  // –ù–æ–≤—ã–π –º–µ—Ç–æ–¥: –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –ø—É–ª–æ–º –≤–æ—Ä–∫–µ—Ä–æ–≤
  async runAutomationWithConcurrency(jobId, formConfig, accounts, options, concurrency) {
    const queue = accounts.map((account, index) => ({ account, index }));
    let current = 0;

    const worker = async (workerId) => {
      // –î–∂–∏—Ç—Ç–µ—Ä —Å—Ç–∞—Ä—Ç–∞ –≤–æ—Ä–∫–µ—Ä–∞, —á—Ç–æ–±—ã –ø–æ—Ç–æ–∫–∏ —à–ª–∏ –Ω–µ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
      const startJitter = 500 + Math.floor(Math.random() * 2000);
      console.log(`üßµ –í–æ—Ä–∫–µ—Ä ${workerId} —Å—Ç–∞—Ä—Ç—É–µ—Ç —á–µ—Ä–µ–∑ ${startJitter}–º—Å`);
      await this.sleep(startJitter);

      while (true) {
        // –ü–æ–ª—É—á–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π —ç–ª–µ–º–µ–Ω—Ç –æ—á–µ—Ä–µ–¥–∏
        let task;
        if (current < queue.length) {
          task = queue[current++];
        } else {
          break;
        }

        const { account, index } = task;
        const token = this.cancellationTokens.get(jobId);
        if (token && token.cancelled) {
          console.log(`üõë –í–æ—Ä–∫–µ—Ä ${workerId}: –∑–∞–¥–∞—á–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞, –≤—ã—Ö–æ–¥–∏–º`);
          break;
        }

        try {
          console.log(`üßµ –í–æ—Ä–∫–µ—Ä ${workerId}: –Ω–∞—á–∏–Ω–∞—é –∞–∫–∫–∞—É–Ω—Ç ${index + 1}/${accounts.length} (${account.email})`);
          const result = await this.fillFormForAccountWithProfile(formConfig, account, options, index, jobId);

          await this.jobModel.addResult(jobId, {
            accountId: account.id,
            accountName: account.name,
            accountEmail: account.email,
            success: result?.success || false,
            submittedAt: result?.submittedAt || new Date().toISOString(),
            filledData: account.fields,
            skipped: result?.skipped || false,
            message: result?.message || (result?.success ? '–£—Å–ø–µ—à–Ω–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ' : '–û—à–∏–±–∫–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è'),
            error: result?.error || null
          });

          const job = await this.jobModel.getById(jobId);
          await this.jobModel.update(jobId, {
            completedAccounts: job.completedAccounts + (result?.success ? 1 : 0),
            failedAccounts: job.failedAccounts + (!result?.success ? 1 : 0)
          });

          const delaySettings = options.delaySettings;
          if (delaySettings && delaySettings.enabled) {
            const submitDelay = this.calculateSubmitDelay(delaySettings, index);
            if (submitDelay > 0) {
              console.log(`üßµ –í–æ—Ä–∫–µ—Ä ${workerId}: –∑–∞–¥–µ—Ä–∂–∫–∞ –ø–æ—Å–ª–µ –∞–∫–∫–∞—É–Ω—Ç–∞ ${submitDelay}–º—Å`);
              await this.sleep(submitDelay);
            }
          }

          // –ù–µ–±–æ–ª—å—à–æ–π –¥–∂–∏—Ç—Ç–µ—Ä –º–µ–∂–¥—É –∑–∞–¥–∞—á–∞–º–∏ —É –≤–æ—Ä–∫–µ—Ä–∞
          const perWorkerJitter = 200 + Math.floor(Math.random() * 800);
          await this.sleep(perWorkerJitter);
        } catch (err) {
          console.error(`‚ùå –í–æ—Ä–∫–µ—Ä ${workerId}: –æ—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–∞ ${account.email}:`, err);
          await this.jobModel.addResult(jobId, {
            accountId: account.id,
            accountName: account.name,
            accountEmail: account.email,
            success: false,
            submittedAt: new Date().toISOString(),
            filledData: account.fields,
            skipped: false,
            message: '–û—à–∏–±–∫–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è',
            error: err.message || String(err)
          });
        }
      }
    };

    // –ó–∞–ø—É—Å–∫–∞–µ–º –≤–æ—Ä–∫–µ—Ä—ã
    const workers = Array.from({ length: concurrency }, (_, i) => worker(i + 1));
    await Promise.all(workers);
  }

  // –ó–∞–∫—Ä—ã—Ç—å –≤—Å–µ –±—Ä–∞—É–∑–µ—Ä—ã, –∑–∞–ø—É—â–µ–Ω–Ω—ã–µ –≤ —Ä–∞–º–∫–∞—Ö –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∑–∞–¥–∞—á–∏
  async closeJobBrowsers(jobId) {
    try {
      const set = this.jobBrowsers.get(jobId);
      if (!set || set.size === 0) return;
      const ids = Array.from(set);
      for (const accountId of ids) {
        await this.profileManager.closeBrowserForAccount(accountId).catch(() => {});
      }
      set.clear();
    } catch (e) {
      console.log(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –±—Ä–∞—É–∑–µ—Ä–æ–≤ –¥–ª—è –∑–∞–¥–∞—á–∏ ${jobId}: ${e.message}`);
    }
  }

  async fillFormForAccountWithProfile(formConfig, account, options, accountIndex = 0, jobId = null) {
    let browser = null;
    let page = null;
    // –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á –ø—Ä–æ—Ñ–∏–ª—è: –¥–ª—è Google-–ª–æ–≥–∏–Ω–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–π ID –∞–∫–∫–∞—É–Ω—Ç–∞, –∏–Ω–∞—á–µ jobId+–ª–æ–∫–∞–ª—å–Ω—ã–π id
    const profileKey = (options.loginMode === 'google' && account.googleAccount && account.googleAccount.id)
      ? account.googleAccount.id
      : `${jobId}_${account.id}`;
    
    console.log(`\nüîß === fillFormForAccountWithProfile START ===`);
    console.log(`üë§ –ê–∫–∫–∞—É–Ω—Ç: ${account.email} (${account.id})`);
    console.log(`üìä –ò–Ω–¥–µ–∫—Å –∞–∫–∫–∞—É–Ω—Ç–∞: ${accountIndex}`);
    console.log(`üîê –†–µ–∂–∏–º –≤—Ö–æ–¥–∞: ${options.loginMode}`);
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±—â–∏–π —Ç–∞–π–º–∞—É—Ç –¥–ª—è –≤—Å–µ–π –æ–ø–µ—Ä–∞—Ü–∏–∏: –∏—Å–ø–æ–ª—å–∑—É–µ–º Promise.race –≤–º–µ—Å—Ç–æ throw –≤ setTimeout
    const operationMs = 300000; // 5 –º–∏–Ω—É—Ç
    let timeoutHandle;
    const withTimeout = (promise) => Promise.race([
      promise,
      new Promise((_, reject) => {
        timeoutHandle = setTimeout(() => {
          reject(new Error(`–¢–∞–π–º–∞—É—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏ –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ ${account.email} (–ø—Ä–µ–≤—ã—à–µ–Ω–æ ${operationMs}–º—Å)`));
        }, operationMs);
      })
    ]);
    
    try {
      // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø—Ä–æ–∫—Å–∏ –¥–ª—è Google –∞–∫–∫–∞—É–Ω—Ç–æ–≤
      let proxySettings = null;
      if (options.loginMode === 'google' && options.selectedProxyGroup) {
        try {
          // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–∫—Å–∏ –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –≥—Ä—É–ø–ø—ã
          const proxies = await Proxy.getByGroup(options.selectedProxyGroup);
          console.log(`üìä –ù–∞–π–¥–µ–Ω–æ –ø—Ä–æ–∫—Å–∏ –≤ –≥—Ä—É–ø–ø–µ "${options.selectedProxyGroup}": ${proxies.length}`);
          
          if (proxies.length > 0) {
            // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø—Ä–æ–∫—Å–∏ –¥–ª—è —ç—Ç–æ–π –∑–∞–¥–∞—á–∏
            const usedProxiesForJob = this.usedProxies.get(jobId) || new Set();
            console.log(`üìä –£–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ –ø—Ä–æ–∫—Å–∏ –≤ —ç—Ç–æ–π –∑–∞–¥–∞—á–µ: ${usedProxiesForJob.size}`);
            
            // –ù–∞—Ö–æ–¥–∏–º –ø–µ—Ä–≤—ã–π –Ω–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–æ–∫—Å–∏
            let selectedProxy = null;
            let selectedProxyIndex = -1;
            
            for (let i = 0; i < proxies.length; i++) {
              const proxyId = proxies[i].id;
              if (!usedProxiesForJob.has(proxyId)) {
                selectedProxy = proxies[i];
                selectedProxyIndex = i;
                break;
              }
            }
            
            if (selectedProxy) {
              console.log(`üîó –í—ã–±–∏—Ä–∞–µ–º –Ω–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–æ–∫—Å–∏ ${selectedProxyIndex + 1}/${proxies.length} –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ ${account.id}: ${selectedProxy.host}:${selectedProxy.port}`);
              
              // –û—Ç–º–µ—á–∞–µ–º –ø—Ä–æ–∫—Å–∏ –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π –≤ —Ä–∞–º–∫–∞—Ö —ç—Ç–æ–π –∑–∞–¥–∞—á–∏
              usedProxiesForJob.add(selectedProxy.id);
              this.usedProxies.set(jobId, usedProxiesForJob);
              
              proxySettings = {
                enabled: true,
                type: selectedProxy.type,
                host: selectedProxy.host,
                port: selectedProxy.port,
                username: selectedProxy.username,
                password: selectedProxy.password
              };
              
              console.log(`‚úÖ –ü—Ä–æ–∫—Å–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ ${account.id}: ${selectedProxy.host}:${selectedProxy.port}`);
              console.log(`üìä –¢–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ –ø—Ä–æ–∫—Å–∏ –≤ —ç—Ç–æ–π –∑–∞–¥–∞—á–µ: ${usedProxiesForJob.size}/${proxies.length}`);
            } else {
              // –í—Å–µ –ø—Ä–æ–∫—Å–∏ –≤ –≥—Ä—É–ø–ø–µ —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã –≤ —Ä–∞–º–∫–∞—Ö —Ç–µ–∫—É—â–µ–π –∑–∞–¥–∞—á–∏.
              // –†–∞–∑—Ä–µ—à–∞–µ–º –ø–æ–≤—Ç–æ—Ä–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –∏ –±–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π –¥–æ—Å—Ç—É–ø–Ω—ã–π (round-robin).
              console.log(`‚ö†Ô∏è –í—Å–µ –ø—Ä–æ–∫—Å–∏ –≤ –≥—Ä—É–ø–ø–µ "${options.selectedProxyGroup}" —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã –≤ —ç—Ç–æ–π –∑–∞–¥–∞—á–µ. –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º —Ü–∏–∫–ª –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è (round-robin).`);
              usedProxiesForJob.clear();
              this.usedProxies.set(jobId, usedProxiesForJob);

              const fallbackProxy = proxies[0];
              proxySettings = {
                enabled: true,
                type: fallbackProxy.type,
                host: fallbackProxy.host,
                port: fallbackProxy.port,
                username: fallbackProxy.username,
                password: fallbackProxy.password
              };

              // –û—Ç–º–µ—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø—Ä–æ–∫—Å–∏ –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π –ø–æ—Å–ª–µ —Å–±—Ä–æ—Å–∞
              usedProxiesForJob.add(fallbackProxy.id);
              this.usedProxies.set(jobId, usedProxiesForJob);
              console.log(`üîÅ –ü–æ–≤—Ç–æ—Ä–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ–∫—Å–∏: ${fallbackProxy.host}:${fallbackProxy.port}`);
            }
          } else {
            console.log(`‚ö†Ô∏è –í –≥—Ä—É–ø–ø–µ –ø—Ä–æ–∫—Å–∏ "${options.selectedProxyGroup}" –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ–∫—Å–∏`);
            throw new Error(`–í –≥—Ä—É–ø–ø–µ –ø—Ä–æ–∫—Å–∏ "${options.selectedProxyGroup}" –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ–∫—Å–∏`);
          }
        } catch (proxyError) {
          console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –ø—Ä–æ–∫—Å–∏:`, proxyError);
          throw proxyError; // –ù–µ –∑–∞–ø—É—Å–∫–∞–µ–º –±–µ–∑ –ø—Ä–æ–∫—Å–∏, –µ—Å–ª–∏ –ø—Ä–æ–∫—Å–∏ –Ω—É–∂–µ–Ω
        }
      }
      
      // –ó–∞–ø—É—Å–∫–∞–µ–º –±—Ä–∞—É–∑–µ—Ä —Å –ø—Ä–æ—Ñ–∏–ª–µ–º –¥–ª—è —ç—Ç–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
      console.log(`üåê –ó–∞–ø—É—Å–∫ –±—Ä–∞—É–∑–µ—Ä–∞ —Å –ø—Ä–æ—Ñ–∏–ª–µ–º –¥–ª—è –∫–ª—é—á–∞: ${profileKey} (–∞–∫–∫–∞—É–Ω—Ç ${account.id})`);
      // –õ–æ–≥–∏ –±–µ–∑ –≤—ã–≤–æ–¥–∞ –æ–≥—Ä–æ–º–Ω–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞ options (–∫–æ—Ç–æ—Ä—ã–π –≤–∫–ª—é—á–∞–µ—Ç –≤–µ—Å—å —Å–ø–∏—Å–æ–∫ –∞–∫–∫–∞—É–Ω—Ç–æ–≤)
      const optionsSummary = `headless=${options.headless !== undefined ? options.headless : false}, loginMode=${options.loginMode || 'anonymous'}, resetProfile=${options.resetProfile === true}, proxyGroup=${options.selectedProxyGroup || 'none'}`;
      console.log(`‚öôÔ∏è –û–ø—Ü–∏–∏ –±—Ä–∞—É–∑–µ—Ä–∞: ${optionsSummary}`);
      console.log(`üîó –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–∫—Å–∏:`, proxySettings ? '–ù–∞—Å—Ç—Ä–æ–µ–Ω—ã' : '–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã');
      
      try {
        browser = await withTimeout(this.profileManager.launchBrowserWithProfile(profileKey, options, proxySettings));
        console.log(`‚úÖ –ë—Ä–∞—É–∑–µ—Ä —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω –¥–ª—è –∫–ª—é—á–∞ –ø—Ä–æ—Ñ–∏–ª—è: ${profileKey}`);
        
        // –î–æ–±–∞–≤–ª—è–µ–º –±—Ä–∞—É–∑–µ—Ä –≤ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ (–≥–ª–æ–±–∞–ª—å–Ω–æ –∏ –¥–ª—è –∑–∞–¥–∞—á–∏)
        const wasAdded = this.activeBrowsers.add(profileKey);
        const set = this.jobBrowsers.get(jobId) || new Set();
        set.add(profileKey);
        this.jobBrowsers.set(jobId, set);
        console.log(`‚úÖ –ë—Ä–∞—É–∑–µ—Ä –¥–æ–±–∞–≤–ª–µ–Ω –≤ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ: ${profileKey} (–∑–∞–¥–∞—á–∞ ${jobId})`);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Å –ø—Ä–æ—Ñ–∏–ª—å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º
        const profileManagerBrowsers = Array.from(this.profileManager.activeBrowsers.keys());
        console.log(`üîß –ë—Ä–∞—É–∑–µ—Ä—ã –≤ –ø—Ä–æ—Ñ–∏–ª—å –º–µ–Ω–µ–¥–∂–µ—Ä–µ:`, profileManagerBrowsers);
        console.log(`üîç –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è: ${JSON.stringify(Array.from(this.activeBrowsers).sort()) === JSON.stringify(profileManagerBrowsers.sort())}`);
      } catch (browserError) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±—Ä–∞—É–∑–µ—Ä–∞ –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ ${account.id}:`, browserError);
        throw browserError;
      }
      
      // –ï—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è –≤—Ö–æ–¥ –≤ Google, –∞–≤—Ç–æ—Ä–∏–∑—É–µ–º—Å—è –ø—Ä–µ–∂–¥–µ —á–µ–º –∏–¥—Ç–∏ –Ω–∞ —Ñ–æ—Ä–º—É
      if ((options.loginMode === 'google')) {
        const loginEmail = (account.googleAccount && account.googleAccount.email) || account.email;
        const loginPassword = (account.googleAccount && account.googleAccount.password) || account.password;
        const backupEmail =
          (account.googleAccount && account.googleAccount.data && account.googleAccount.data.backupEmail) ||
          (account.googleAccount && account.googleAccount.backupEmail) ||
          (account.data && account.data.backupEmail) ||
          account.backupEmail ||
          null;

        if (!loginEmail || !loginPassword) {
          throw new Error('–£ –∞–∫–∫–∞—É–Ω—Ç–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç email –∏–ª–∏ –ø–∞—Ä–æ–ª—å –¥–ª—è –≤—Ö–æ–¥–∞ –≤ Google');
        }

        console.log(`üîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤ Google –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞: ${loginEmail}`);
        await this.ensureLoggedInGoogle(browser, loginEmail, loginPassword, backupEmail);
        console.log('‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤ Google —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞');
      }

      // –ó–∞–ø–æ–ª–Ω—è–µ–º —Ñ–æ—Ä–º—É
      const result = await withTimeout(this.fillFormForAccount(browser, formConfig, account, options, accountIndex, jobId));
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–µ undefined
      if (!result) {
        console.error(`‚ùå –ú–µ—Ç–æ–¥ fillFormForAccount –≤–µ—Ä–Ω—É–ª undefined –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ ${account.id}`);
        return {
          success: false,
          error: '–ú–µ—Ç–æ–¥ fillFormForAccount –≤–µ—Ä–Ω—É–ª undefined',
          submittedAt: new Date().toISOString()
        };
      }
      
      // –ï—Å–ª–∏ —Ñ–æ—Ä–º–∞ —É–∂–µ –±—ã–ª–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞, –±—Ä–∞—É–∑–µ—Ä —É–∂–µ –∑–∞–∫—Ä—ã—Ç –≤ fillFormForAccount
      if (result.skipped) {
        return result;
      }
      
      return result;
      
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –≤ fillFormForAccountWithProfile –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ ${account.id}:`, error);
      
      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±—ä–µ–∫—Ç –æ—à–∏–±–∫–∏ –≤–º–µ—Å—Ç–æ –ø—Ä–æ–±—Ä–æ—Å–∞ –∏—Å–∫–ª—é—á–µ–Ω–∏—è
      return {
        success: false,
        error: error.message,
        submittedAt: new Date().toISOString()
      };
    } finally {
      // –û—á–∏—â–∞–µ–º —Ç–∞–π–º–∞—É—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏
      if (timeoutHandle) clearTimeout(timeoutHandle);
      
      // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –±—Ä–∞—É–∑–µ—Ä—ã –¥–ª—è —ç—Ç–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
      console.log(`üîí –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –±—Ä–∞—É–∑–µ—Ä—ã –¥–ª—è –ø—Ä–æ—Ñ–∏–ª—è ${profileKey}...`);
      console.log(`üìã –ê–∫—Ç–∏–≤–Ω—ã–µ –±—Ä–∞—É–∑–µ—Ä—ã –ø–µ—Ä–µ–¥ –∑–∞–∫—Ä—ã—Ç–∏–µ–º:`, Array.from(this.activeBrowsers));
      
      try {
        // –ó–∞–∫—Ä—ã–≤–∞–µ–º —á–µ—Ä–µ–∑ –ø—Ä–æ—Ñ–∏–ª—å –º–µ–Ω–µ–¥–∂–µ—Ä
        console.log(`üîß –ó–∞–∫—Ä—ã–≤–∞–µ–º –±—Ä–∞—É–∑–µ—Ä —á–µ—Ä–µ–∑ –ø—Ä–æ—Ñ–∏–ª—å –º–µ–Ω–µ–¥–∂–µ—Ä...`);
        await this.profileManager.closeBrowserForAccount(profileKey);
        console.log(`‚úÖ –ë—Ä–∞—É–∑–µ—Ä —á–µ—Ä–µ–∑ –ø—Ä–æ—Ñ–∏–ª—å –º–µ–Ω–µ–¥–∂–µ—Ä –∑–∞–∫—Ä—ã—Ç –¥–ª—è –ø—Ä–æ—Ñ–∏–ª—è ${profileKey}`);
        
        // –£–¥–∞–ª—è–µ–º –±—Ä–∞—É–∑–µ—Ä –∏–∑ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
        const wasRemoved = this.activeBrowsers.delete(profileKey);
        const set = this.jobBrowsers.get(jobId);
        if (set) set.delete(profileKey);
        console.log(`üóëÔ∏è –ë—Ä–∞—É–∑–µ—Ä ${profileKey} —É–¥–∞–ª–µ–Ω –∏–∑ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è (–∑–∞–¥–∞—á–∞ ${jobId}): ${wasRemoved}`);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Å –ø—Ä–æ—Ñ–∏–ª—å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è
        const profileManagerBrowsers = Array.from(this.profileManager.activeBrowsers.keys());
        console.log(`üîß –ë—Ä–∞—É–∑–µ—Ä—ã –≤ –ø—Ä–æ—Ñ–∏–ª—å –º–µ–Ω–µ–¥–∂–µ—Ä–µ –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è:`, profileManagerBrowsers);
        console.log(`üîç –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è: ${JSON.stringify(Array.from(this.activeBrowsers).sort()) === JSON.stringify(profileManagerBrowsers.sort())}`);
      } catch (closeError) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –±—Ä–∞—É–∑–µ—Ä–∞ —á–µ—Ä–µ–∑ –ø—Ä–æ—Ñ–∏–ª—å –º–µ–Ω–µ–¥–∂–µ—Ä:`, closeError);
        // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É–¥–∞–ª—è–µ–º –∏–∑ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –¥–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
        this.activeBrowsers.delete(account.id);
        console.log(`üßπ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É–¥–∞–ª–µ–Ω –±—Ä–∞—É–∑–µ—Ä ${account.id} –∏–∑ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è`);
      }
      
      // –£–±–∏—Ä–∞–µ–º –ø–æ–≤—Ç–æ—Ä–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ: –±—Ä–∞—É–∑–µ—Ä —É–∂–µ –∑–∞–∫—Ä—ã—Ç —á–µ—Ä–µ–∑ –ø—Ä–æ—Ñ–∏–ª—å –º–µ–Ω–µ–¥–∂–µ—Ä
      
      // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –ø–∞–º—è—Ç–∏
      if (global.gc) {
        global.gc();
        console.log(`üßπ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –ø–∞–º—è—Ç–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞`);
      }
      
      console.log(`üîß === fillFormForAccountWithProfile END ===\n`);
    }
  }

  async ensureLoggedInGoogle(browser, email, password, backupEmail = null) {
    const page = await browser.newPage();
    try {
      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç—ã –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã
      page.setDefaultTimeout(30000); // 30 —Å–µ–∫—É–Ω–¥
      page.setDefaultNavigationTimeout(60000); // 60 —Å–µ–∫—É–Ω–¥
      
      await page.setUserAgent('Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/114.0.5735.110 Safari/537.36');

      console.log(`üîê –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –≤—Ö–æ–¥–∞ –≤ Google –¥–ª—è: ${email}`);

      // –û—á–∏—â–∞–µ–º cookies —á–µ—Ä–µ–∑ Chrome DevTools Protocol
      console.log(`üßπ –û—á–∏—â–∞–µ–º cookies –∏ –∫—ç—à...`);
      const client = await page.target().createCDPSession();
      await client.send('Network.clearBrowserCookies');
      await client.send('Network.clearBrowserCache');

      // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤—Ö–æ–¥–∞ Google
      console.log(`üåê –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤—Ö–æ–¥–∞ Google...`);
      await page.goto('https://accounts.google.com/signin', { waitUntil: 'networkidle2', timeout: 60000 });

      // –¢–µ–ø–µ—Ä—å –æ—á–∏—â–∞–µ–º localStorage –∏ sessionStorage –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
      console.log(`üßπ –û—á–∏—â–∞–µ–º localStorage –∏ sessionStorage...`);
      try {
        await page.evaluate(() => {
          try {
            // –û—á–∏—â–∞–µ–º localStorage
            if (typeof localStorage !== 'undefined') {
              localStorage.clear();
            }
            // –û—á–∏—â–∞–µ–º sessionStorage
            if (typeof sessionStorage !== 'undefined') {
              sessionStorage.clear();
            }
            // –û—á–∏—â–∞–µ–º IndexedDB
            if (window.indexedDB) {
              indexedDB.databases().then(databases => {
                databases.forEach(db => {
                  indexedDB.deleteDatabase(db.name);
                });
              }).catch(() => {
                // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ IndexedDB
              });
            }
          } catch (error) {
            console.log('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ storage:', error.message);
          }
        });
      } catch (storageError) {
        console.log(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ storage: ${storageError.message}`);
        // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, —Ç–∞–∫ –∫–∞–∫ —ç—Ç–æ –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–ª–æ–≥–∏–Ω–µ–Ω –ª–∏ —É–∂–µ –¥—Ä—É–≥–æ–π –∞–∫–∫–∞—É–Ω—Ç
      const currentUrl = page.url();
      console.log(`üìç –¢–µ–∫—É—â–∏–π URL: ${currentUrl}`);

      // –ï—Å–ª–∏ –º—ã —É–∂–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –∞–∫–∫–∞—É–Ω—Ç–∞, –Ω—É–∂–Ω–æ –≤—ã–π—Ç–∏
      if (currentUrl.includes('myaccount.google.com') || currentUrl.includes('accounts.google.com/b/0/ManageAccount')) {
        console.log(`üö™ –û–±–Ω–∞—Ä—É–∂–µ–Ω –≤—Ö–æ–¥ –≤ –¥—Ä—É–≥–æ–π –∞–∫–∫–∞—É–Ω—Ç, –≤—ã—Ö–æ–¥–∏–º...`);
        try {
          // –ò—â–µ–º –∫–Ω–æ–ø–∫—É –≤—ã—Ö–æ–¥–∞
          const signOutButton = await page.$('a[href*="Logout"], button[aria-label*="Sign out"], a[aria-label*="Sign out"]');
          if (signOutButton) {
            await signOutButton.click();
            await page.waitForNavigation({ waitUntil: 'networkidle2', timeout: 30000 });
            console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ –≤—ã—à–ª–∏ –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞`);
          } else {
            // –ï—Å–ª–∏ –∫–Ω–æ–ø–∫–∞ –≤—ã—Ö–æ–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤—Ö–æ–¥–∞
            await page.goto('https://accounts.google.com/signin', { waitUntil: 'networkidle2', timeout: 60000 });
          }
        } catch (logoutError) {
          console.log(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤—Ö–æ–¥–∞: ${logoutError.message}`);
          await page.goto('https://accounts.google.com/signin', { waitUntil: 'networkidle2', timeout: 60000 });
        }
      }

      // –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –≤—Ö–æ–¥–∞
      await page.waitForSelector('input[type="email"], input#identifierId', { timeout: 30000 });

      // –í–≤–æ–¥–∏–º email
      console.log(`üìù –í–≤–æ–¥–∏–º email: ${email}`);
      const emailSelectorCandidates = ['input#identifierId', 'input[type="email"]'];
      let emailSelector = null;
      for (const sel of emailSelectorCandidates) {
        const el = await page.$(sel);
        if (el) { 
          emailSelector = sel; 
          break; 
        }
      }
      
      if (!emailSelector) {
        throw new Error('–ü–æ–ª–µ email –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ Google –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
      }

      // –û—á–∏—â–∞–µ–º –ø–æ–ª–µ –∏ –≤–≤–æ–¥–∏–º email
      await page.click(emailSelector, { clickCount: 3 });
      await page.type(emailSelector, String(email), { delay: 100 });
      
      // –ù–∞–∂–∏–º–∞–µ–º Next
      const nextBtn1 = await page.$('#identifierNext button, #identifierNext');
      if (!nextBtn1) throw new Error('–ö–Ω–æ–ø–∫–∞ Next –Ω–∞ —à–∞–≥–µ email –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
      await nextBtn1.click();

      // –ñ–¥–µ–º –ø–æ–ª–µ –ø–∞—Ä–æ–ª—è
      console.log(`üîë –ñ–¥–µ–º –ø–æ–ª–µ –ø–∞—Ä–æ–ª—è...`);
      await page.waitForSelector('input[name="Passwd"], input[type="password"]', { visible: true, timeout: 60000 });
      const passSelector = (await page.$('input[name="Passwd"]')) ? 'input[name="Passwd"]' : 'input[type="password"]';
      
      console.log(`üîë –í–≤–æ–¥–∏–º –ø–∞—Ä–æ–ª—å...`);
      await page.click(passSelector, { clickCount: 3 });
      await page.type(passSelector, String(password), { delay: 100 });
      
      // –ù–∞–∂–∏–º–∞–µ–º Next –¥–ª—è –ø–∞—Ä–æ–ª—è
      const nextBtn2 = await page.$('#passwordNext button, #passwordNext');
      if (!nextBtn2) throw new Error('–ö–Ω–æ–ø–∫–∞ Next –Ω–∞ —à–∞–≥–µ –ø–∞—Ä–æ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
      
      console.log(`‚è≥ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ä–º—É –≤—Ö–æ–¥–∞...`);
      await Promise.all([
        page.waitForNavigation({ waitUntil: 'domcontentloaded', timeout: 60000 }).catch(() => {}),
        nextBtn2.click()
      ]);

      // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞, —á—Ç–æ–±—ã —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∏ —Ñ—Ä–µ–π–º—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–ª–∏—Å—å
      await page.waitForTimeout(500);
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–Ω–æ–ø–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è #confirm —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –≤–≤–æ–¥–∞ –ø–∞—Ä–æ–ª—è
      await this.handleConfirmButton(page);

      // –î–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü–µ —Å—Ç–∞–±–∏–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å—Å—è –∏ –∂–¥–µ–º —è–≤–Ω–æ–≥–æ –ø–æ—è–≤–ª–µ–Ω–∏—è challenge –ø–µ—Ä–µ–¥ –ø–æ–ø—ã—Ç–∫–æ–π –∫–ª–∏–∫–∞
      await page.waitForTimeout(1500);
      const challengeAppeared = await this.waitForChallenge(page, 20000).catch(() => false);
      if (challengeAppeared) {
        console.log('üîí –û–±–Ω–∞—Ä—É–∂–µ–Ω —ç–∫—Ä–∞–Ω –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏. –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –æ–±—Ä–∞–±–æ—Ç–∫–µ...');
        try {
          await this.handleVerificationChallenges(page, backupEmail);
        } catch (verifErr) {
          console.log(`‚ÑπÔ∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é —á–µ—Ä–µ–∑ —Ä–µ–∑–µ—Ä–≤–Ω—É—é –ø–æ—á—Ç—É: ${verifErr.message}`);
        }
      } else {
        console.log('‚ÑπÔ∏è –≠–∫—Ä–∞–Ω –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –≤–≤–æ–¥–∞ –ø–∞—Ä–æ–ª—è');
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥
      console.log(`üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—à–Ω–æ—Å—Ç—å –≤—Ö–æ–¥–∞...`);
      const finalUrl = page.url();
      console.log(`üìç –§–∏–Ω–∞–ª—å–Ω—ã–π URL: ${finalUrl}`);
      
      // –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
      await page.waitForTimeout(3000);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã —É—Å–ø–µ—à–Ω–æ–≥–æ –≤—Ö–æ–¥–∞
      const isLoggedIn = await page.evaluate(() => {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤, —É–∫–∞–∑—ã–≤–∞—é—â–∏—Ö –Ω–∞ —É—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥
        const indicators = [
          'a[href*="SignOutOptions"]',
          'a[href*="Logout"]', 
          'img[alt*="Google Account"]',
          'a[aria-label*="Google Account"]',
          'div[aria-label*="Google Account"]',
          'button[aria-label*="Google Account"]'
        ];
        
        for (const selector of indicators) {
          if (document.querySelector(selector)) {
            return true;
          }
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º URL
        return window.location.href.includes('myaccount.google.com') || 
               window.location.href.includes('accounts.google.com/b/0/ManageAccount');
      });

      if (!isLoggedIn) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è –ª–∏ –¥–æ–ø. –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ª–∏—á–Ω–æ—Å—Ç–∏ (challenge)
        let needChallenge = await page.$('div[id*="challenge"], div[data-challengetype], input[name="idvAnyPhonePin"], div[aria-label*="2-Step Verification"], form[action*="challenge"]');
        if (needChallenge && backupEmail) {
          console.log('üîê –û–±–Ω–∞—Ä—É–∂–µ–Ω challenge –ø–æ—Å–ª–µ –≤—Ö–æ–¥–∞. –ü—ã—Ç–∞–µ–º—Å—è –ø—Ä–æ–π—Ç–∏ —á–µ—Ä–µ–∑ —Ä–µ–∑–µ—Ä–≤–Ω—ã–π email...');
          try {
            await this.handleVerificationChallenges(page, backupEmail);
            // –ü–µ—Ä–µ–æ—Ü–µ–Ω–∏–≤–∞–µ–º —É—Å–ø–µ—à–Ω–æ—Å—Ç—å –≤—Ö–æ–¥–∞ –ø–æ—Å–ª–µ –ø–æ–ø—ã—Ç–∫–∏
            await page.waitForTimeout(1500);
            const stillOnChallenge = await page.$('div[id*="challenge"], div[data-challengetype], form[action*="challenge"]');
            if (!stillOnChallenge) {
              // –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏
              const recheckLoggedIn = await page.evaluate(() => {
                const indicators = [
                  'a[href*="SignOutOptions"]',
                  'a[href*="Logout"]', 
                  'img[alt*="Google Account"]',
                  'a[aria-label*="Google Account"]',
                  'div[aria-label*="Google Account"]',
                  'button[aria-label*="Google Account"]'
                ];
                for (const selector of indicators) {
                  if (document.querySelector(selector)) return true;
                }
                return window.location.href.includes('myaccount.google.com') || 
                       window.location.href.includes('accounts.google.com/b/0/ManageAccount');
              });
              if (recheckLoggedIn) {
                console.log('‚úÖ –£—Å–ø–µ—à–Ω–æ –ø—Ä–æ—à–ª–∏ challenge —á–µ—Ä–µ–∑ —Ä–µ–∑–µ—Ä–≤–Ω—ã–π email');
                return;
              }
            }
          } catch (challengeErr) {
            console.log(`‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–π—Ç–∏ challenge —á–µ—Ä–µ–∑ —Ä–µ–∑–µ—Ä–≤–Ω—ã–π email: ${challengeErr.message}`);
          }
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—Ä—É–≥–∏–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã
        const errorMessage = await page.evaluate(() => {
          const errorSelectors = [
            'div[role="alert"]',
            '.error-msg',
            '[data-error]',
            '.error'
          ];
          
          for (const selector of errorSelectors) {
            const element = document.querySelector(selector);
            if (element && element.textContent.trim()) {
              return element.textContent.trim();
            }
          }
          return null;
        });
        
        if (errorMessage) {
          throw new Error(`–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞ –≤ Google: ${errorMessage}`);
        }
        
        // –ï—Å–ª–∏ –æ—Å—Ç–∞–ª—Å—è challenge –∏ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –ø–æ—á—Ç—ã –Ω–µ—Ç –∏–ª–∏ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–æ ‚Äî —Å–æ–æ–±—â–∞–µ–º –ø–æ–Ω—è—Ç–Ω–µ–µ
        needChallenge = await page.$('div[id*="challenge"], div[data-challengetype], input[name="idvAnyPhonePin"], div[aria-label*="2-Step Verification"]');
        if (needChallenge) {
          if (backupEmail) {
            throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–π—Ç–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –ª–∏—á–Ω–æ—Å—Ç–∏ —á–µ—Ä–µ–∑ —Ä–µ–∑–µ—Ä–≤–Ω—ã–π email.');
          }
          throw new Error('–¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏—á–Ω–æ—Å—Ç–∏ (2FA/Challenge). –£–∫–∞–∂–∏—Ç–µ —Ä–µ–∑–µ—Ä–≤–Ω—É—é –ø–æ—á—Ç—É –≤ –∞–∫–∫–∞—É–Ω—Ç–µ.');
        }

        throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤—Ö–æ–¥ –≤ Google. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç–∞.');
      }

      console.log(`‚úÖ –£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥ –≤ Google –∞–∫–∫–∞—É–Ω—Ç: ${email}`);

    } finally {
      await page.close().catch(() => {});
    }
  }

  async fillFormForAccount(browser, formConfig, account, options, accountIndex = 0, jobId = null) {
    const page = await browser.newPage();
    
    try {
      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç—ã –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã
      page.setDefaultTimeout(30000); // 30 —Å–µ–∫—É–Ω–¥
      page.setDefaultNavigationTimeout(60000); // 60 —Å–µ–∫—É–Ω–¥
      
      console.log(`\nüöÄ –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ–æ—Ä–º—ã –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞: ${account.name}`);
      console.log(`üìù URL —Ñ–æ—Ä–º—ã: ${formConfig.url}`);
      
      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º User-Agent
      await page.setUserAgent('Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36');
      
      // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Ñ–æ—Ä–º—É
      console.log('üåê –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Ñ–æ—Ä–º—ã...');
      await page.goto(formConfig.url, { waitUntil: 'networkidle2' });
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞ –ª–∏ —É–∂–µ —Ñ–æ—Ä–º–∞
      console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —Ñ–æ—Ä–º—ã...');
      const formStatus = await page.evaluate(() => {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã —É–∂–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ–π —Ñ–æ—Ä–º—ã
        const indicators = [
          'div[data-response-id]', // Google Forms –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç
          '.freebirdFormviewerViewResponseConfirmContentContainer', // –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
          'div[role="main"] div[data-response-id]', // –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç —Å –æ—Ç–≤–µ—Ç–æ–º
          '.freebirdFormviewerViewResponsePageContainer', // –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã –æ—Ç–≤–µ—Ç–∞
          'div[aria-label*="Your response has been recorded"]', // –°–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–ø–∏—Å–∏ –æ—Ç–≤–µ—Ç–∞
          'div[aria-label*="–í–∞—à –æ—Ç–≤–µ—Ç –±—ã–ª –∑–∞–ø–∏—Å–∞–Ω"]' // –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —Ä—É—Å—Å–∫–æ–º
        ];
        
        for (const selector of indicators) {
          const element = document.querySelector(selector);
          if (element) {
            return { filled: true, selector, text: element.textContent?.trim() };
          }
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–æ–ª–µ–π –≤–≤–æ–¥–∞
        const inputFields = document.querySelectorAll('input[type="text"], textarea, select, input[type="email"], input[type="number"]');
        return { filled: false, inputFields: inputFields.length };
      });
      
      console.log('üìä –°—Ç–∞—Ç—É—Å —Ñ–æ—Ä–º—ã:', formStatus);
      
      if (formStatus.filled) {
        console.log(`‚ö†Ô∏è –§–æ—Ä–º–∞ —É–∂–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞! –°–µ–ª–µ–∫—Ç–æ—Ä: ${formStatus.selector}`);
        console.log(`üìù –¢–µ–∫—Å—Ç: ${formStatus.text}`);
        
        // –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥ –æ –ø—Ä–æ–ø—É—Å–∫–µ
        if (jobId) {
          await this.jobModel.addLog(jobId, {
            type: 'warning',
            message: `–§–æ—Ä–º–∞ —É–∂–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞ –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ ${account.email}. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º.`,
            accountId: account.id
          });
        }
        
        // –ó–∞–∫—Ä—ã–≤–∞–µ–º –±—Ä–∞—É–∑–µ—Ä –¥–ª—è —ç—Ç–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞, —á—Ç–æ–±—ã –æ—Å–≤–æ–±–æ–¥–∏—Ç—å —Ä–µ—Å—É—Ä—Å—ã
        try {
          await browser.close();
          console.log(`üîí –ë—Ä–∞—É–∑–µ—Ä –∑–∞–∫—Ä—ã—Ç –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ ${account.id} (—Ñ–æ—Ä–º–∞ —É–∂–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞)`);
        } catch (closeError) {
          console.log(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –±—Ä–∞—É–∑–µ—Ä–∞: ${closeError.message}`);
        }
        
        return {
          success: true,
          submittedAt: new Date().toISOString(),
          message: '–§–æ—Ä–º–∞ —É–∂–µ –±—ã–ª–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞',
          skipped: true
        };
      }
      
      // –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ä–º—ã (—Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ Google Forms –º–æ–≥—É—Ç –Ω–µ –∏–º–µ—Ç—å —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–π —Ñ–æ—Ä–º—ã)
      console.log('‚è≥ –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ä–º—ã...');
      try {
        await page.waitForSelector('form', { timeout: 5000 });
        console.log('‚úÖ –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è —Ñ–æ—Ä–º–∞ –Ω–∞–π–¥–µ–Ω–∞');
      } catch (error) {
        console.log('‚ö†Ô∏è –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è —Ñ–æ—Ä–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –∂–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª–µ–π –≤–≤–æ–¥–∞...');
        try {
          await page.waitForSelector('input[type="text"], textarea, select', { timeout: 10000 });
          console.log('‚úÖ –ü–æ–ª—è –≤–≤–æ–¥–∞ –Ω–∞–π–¥–µ–Ω—ã');
        } catch (timeoutError) {
          console.log('‚ùå –¢–∞–π–º–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è –ø–æ–ª–µ–π –≤–≤–æ–¥–∞');
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–µ—Ç –±—ã—Ç—å —Ñ–æ—Ä–º–∞ —É–∂–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞
          const currentUrl = page.url();
          console.log(`üìç –¢–µ–∫—É—â–∏–π URL: ${currentUrl}`);
          
          if (currentUrl.includes('response') || currentUrl.includes('confirm')) {
            console.log('‚úÖ –§–æ—Ä–º–∞ —É–∂–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞ (–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ –ø–æ URL)');
            
            if (jobId) {
              await this.jobModel.addLog(jobId, {
                type: 'warning',
                message: `–§–æ—Ä–º–∞ —É–∂–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞ –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ ${account.email} (–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ –ø–æ URL). –ü—Ä–æ–ø—É—Å–∫–∞–µ–º.`,
                accountId: account.id
              });
            }
            
            return {
              success: true,
              submittedAt: new Date().toISOString(),
              message: '–§–æ—Ä–º–∞ —É–∂–µ –±—ã–ª–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞ (–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ –ø–æ URL)',
              skipped: true
            };
          }
          
          throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–ª—è –≤–≤–æ–¥–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ —Ñ–æ—Ä–º—ã. URL: ${currentUrl}`);
        }
      }
      
      // –ó–∞–ø–æ–ª–Ω—è–µ–º –ø–æ–ª—è —Ñ–æ—Ä–º—ã
      console.log('üìù –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ–ª–µ–π...');
      for (const field of formConfig.fields) {
        await this.fillField(page, field, account, options, formConfig);
      }
      
      // –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º —á–µ–∫–±–æ–∫—Å "—É–∫–∞–∑–∞—Ç—å –º–æ–π email –≤ –æ—Ç–≤–µ—Ç–µ" –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
      try {
        if (options && options.loginMode === 'google') {
          const consentEmail = (account && account.email) || '';
          await this.ensureEmailConsentCheckbox(page, consentEmail);
        }
      } catch (consentErr) {
        console.log(`‚ÑπÔ∏è –ß–µ–∫–±–æ–∫—Å email-—Å–æ–≥–ª–∞—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –∫–ª–∏–∫ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è: ${consentErr.message}`);
      }
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ä–º—É
      if (options.submit !== false) {
        console.log('üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ä–º—É...');
        
        // –ñ–¥–µ–º –ø–æ–ª–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ä–º—ã –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
        console.log('‚è≥ –ñ–¥–µ–º –ø–æ–ª–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ä–º—ã...');
        await page.waitForTimeout(3000);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –ø–æ–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω—ã
        const formReady = await page.evaluate(() => {
          const inputs = document.querySelectorAll('input, textarea, select');
          let filledCount = 0;
          let totalCount = 0;
          
          inputs.forEach(input => {
            if (input.type !== 'hidden' && input.type !== 'submit' && input.type !== 'button') {
              totalCount++;
              if (input.value && input.value.trim() !== '') {
                filledCount++;
              }
            }
          });
          
          console.log(`–ó–∞–ø–æ–ª–Ω–µ–Ω–æ –ø–æ–ª–µ–π: ${filledCount}/${totalCount}`);
          return filledCount > 0;
        });
        
        if (formReady) {
          console.log('‚úÖ –§–æ—Ä–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ');
        } else {
          console.log('‚ö†Ô∏è –§–æ—Ä–º–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ –≥–æ—Ç–æ–≤–∞, –Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º...');
        }
        
        await this.submitForm(page, formConfig);
      }
      
      // –ñ–¥–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏
      console.log('‚è≥ –ñ–¥–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏...');
      await this.waitForSubmission(page);
      
      console.log('‚úÖ –§–æ—Ä–º–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!');
      
      // –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Å–∞–±–º–∏—Ç–∞–º–∏ —Ñ–æ—Ä–º
      if (options.delaySettings && options.delaySettings.enabled) {
        const submitDelay = this.calculateSubmitDelay(options.delaySettings, accountIndex);
        if (submitDelay > 0) {
          console.log(`‚è≥ –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Å–∞–±–º–∏—Ç–∞–º–∏: ${submitDelay}–º—Å (${options.delaySettings.type})`);
          await this.sleep(submitDelay);
          console.log('‚úÖ –ó–∞–¥–µ—Ä–∂–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
        }
      }
      
      return {
        success: true,
        submittedAt: new Date().toISOString()
      };
      
    } finally {
      try {
        await page.close();
      } catch (closeErr) {
        console.log(`‚ö†Ô∏è –°—Ç—Ä–∞–Ω–∏—Ü–∞ —É–∂–µ –∑–∞–∫—Ä—ã—Ç–∞ –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞: ${closeErr.message}`);
      }
    }
  }

  async fillField(page, field, account, options, formConfig) {
    try {
      const selector = `[name="${field.name}"], #${field.id}`;
      
      switch (field.type) {
        case 'text':
        case 'email':
        case 'tel':
        case 'url':
        case 'textarea':
          await this.fillTextField(page, selector, field, account, formConfig);
          break;
          
        case 'number':
          await this.fillNumberField(page, selector, field, account);
          break;
          
        case 'date':
        case 'time':
        case 'datetime':
          await this.fillDateTimeField(page, selector, field, account);
          break;
          
        case 'select':
          await this.fillSelectField(page, selector, field, account);
          break;
          
        case 'radio':
          await this.fillRadioField(page, field, account);
          break;
          
        case 'checkbox':
          await this.fillCheckboxField(page, field, account);
          break;
          
        case 'file':
          await this.fillFileField(page, selector, field, account);
          break;
      }
      
    } catch (error) {
      console.error(`–û—à–∏–±–∫–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –ø–æ–ª—è ${field.name}:`, error);
      throw error;
    }
  }

  async fillTextField(page, selector, field, account, formConfig) {
    const value = this.getValueForField(field, account);
    if (!value) {
      console.log(`–ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–æ–ª–µ ${field.title} - –Ω–µ—Ç –∑–Ω–∞—á–µ–Ω–∏—è`);
      return;
    }

    console.log(`–ó–∞–ø–æ–ª–Ω—è–µ–º –ø–æ–ª–µ ${field.title} –∑–Ω–∞—á–µ–Ω–∏–µ–º: ${value}`);

    try {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–æ–ª–µ–µ —Ç–æ—á–Ω—ã–π –ø–æ–¥—Ö–æ–¥ –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ–ª—è
      let filled = false;
      
      // –ü–†–û–°–¢–ê–Ø –õ–û–ì–ò–ö–ê: –ó–∞–ø–æ–ª–Ω—è–µ–º –ø–æ–ª—è —Å—Ç—Ä–æ–≥–æ –ø–æ –ø–æ—Ä—è–¥–∫—É
      const textFieldsInConfig = formConfig.fields.filter(f => f.type === 'text' || f.type === 'textarea' || f.type === 'email');
      const currentFieldIndex = textFieldsInConfig.indexOf(field);
      
      console.log(`üìä –¢–µ–∫—Å—Ç–æ–≤—ã—Ö –ø–æ–ª–µ–π –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: ${textFieldsInConfig.length}`);
      console.log(`üìä –ò–Ω–¥–µ–∫—Å —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—è –≤ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—è—Ö: ${currentFieldIndex}`);
      
      // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –ø–æ–ª–µ –ø–æ –∏–Ω–¥–µ–∫—Å—É (—Å–∞–º—ã–π –Ω–∞–¥–µ–∂–Ω—ã–π —Å–ø–æ—Å–æ–±)
      if (currentFieldIndex >= 0) {
        try {
          const googleFormsInputs = await page.$$('input[type="text"], textarea, input[type="email"]');
          console.log(`üîç –ù–∞–π–¥–µ–Ω–æ ${googleFormsInputs.length} —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –ø–æ–ª–µ–π –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ`);
          
          if (googleFormsInputs.length > currentFieldIndex) {
            const targetInput = googleFormsInputs[currentFieldIndex];
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª–µ –≤–∏–¥–∏–º–æ –∏ –Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ
            const isVisible = await page.evaluate(el => {
              const rect = el.getBoundingClientRect();
              return rect.width > 0 && rect.height > 0 && el.offsetParent !== null;
            }, targetInput);
            
            const isEmpty = await page.evaluate(el => !el.value || el.value.trim() === '', targetInput);
            
            if (isVisible && isEmpty) {
              await targetInput.click();
              await page.waitForTimeout(100); // –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞
              await targetInput.type(value, { delay: 50 });
              console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ –ø–æ–ª–µ ${field.title} –ø–æ –∏–Ω–¥–µ–∫—Å—É ${currentFieldIndex}`);
              filled = true;
            } else {
              console.log(`‚ö†Ô∏è –ü–æ–ª–µ ${currentFieldIndex} –Ω–µ –≤–∏–¥–∏–º–æ –∏–ª–∏ —É–∂–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ`);
            }
          }
        } catch (error) {
          console.log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–∏ –ø–æ –∏–Ω–¥–µ–∫—Å—É: ${error.message}`);
        }
      }
      
      // –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –ø–æ –∏–Ω–¥–µ–∫—Å—É, –ø—Ä–æ–±—É–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã
      if (!filled) {
        console.log(`‚ö†Ô∏è –ü–æ–∏—Å–∫ –ø–æ –∏–Ω–¥–µ–∫—Å—É –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª, –ø—Ä–æ–±—É–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã –¥–ª—è –ø–æ–ª—è ${field.title}`);
        
        const selectors = [
          selector, // –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Å–µ–ª–µ–∫—Ç–æ—Ä
          'input[aria-label*="' + field.title + '"]', // –ü–æ aria-label
          'input[placeholder*="' + field.title + '"]', // –ü–æ placeholder
        ];

        for (const sel of selectors) {
          try {
            const elements = await page.$$(sel);
            if (elements.length > 0) {
              const element = elements[0];
              const isEmpty = await page.evaluate(el => !el.value || el.value.trim() === '', element);
              
              if (isEmpty) {
                await element.click();
                await page.waitForTimeout(100);
                await element.type(value, { delay: 50 });
                console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ –ø–æ–ª–µ ${field.title} —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–º: ${sel}`);
                filled = true;
                break;
              }
            }
          } catch (error) {
            console.log(`‚ùå –°–µ–ª–µ–∫—Ç–æ—Ä ${sel} –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª: ${error.message}`);
            continue;
          }
        }
      }

      if (!filled) {
        console.log(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø–æ–ª–Ω–∏—Ç—å –ø–æ–ª–µ ${field.title}`);
      }

    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –ø–æ–ª—è ${field.title}:`, error.message);
    }
  }

  async fillNumberField(page, selector, field, account) {
    const value = this.getValueForField(field, account);
    if (value) {
      await page.type(selector, value.toString());
    }
  }

  async fillDateTimeField(page, selector, field, account) {
    const value = this.getValueForField(field, account);
    if (value) {
      await page.type(selector, value);
    }
  }

  async fillSelectField(page, selector, field, account) {
    const value = this.getValueForField(field, account);
    if (value) {
      await page.select(selector, value);
    }
  }

  async fillRadioField(page, field, account) {
    const value = this.getValueForField(field, account);
    if (!value) {
      console.log(`–ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ä–∞–¥–∏–æ-–∫–Ω–æ–ø–∫—É ${field.title} - –Ω–µ—Ç –∑–Ω–∞—á–µ–Ω–∏—è`);
      return;
    }

    console.log(`–ó–∞–ø–æ–ª–Ω—è–µ–º —Ä–∞–¥–∏–æ-–∫–Ω–æ–ø–∫—É ${field.title} –∑–Ω–∞—á–µ–Ω–∏–µ–º: ${value}`);

    try {
      // –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã –ø–æ–∏—Å–∫–∞ —Ä–∞–¥–∏–æ-–∫–Ω–æ–ø–∫–∏
      const selectors = [
        `input[name="${field.name}"][value="${value}"]`,
        `input[name="${field.name}"][type="radio"]`,
        `input[type="radio"]`,
        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã –¥–ª—è —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö Google Forms
        `[role="radio"][aria-label="${value}"]`,
        `[role="radio"][data-value="${value}"]`,
        `[role="radio"]`,
        // –°–µ–ª–µ–∫—Ç–æ—Ä—ã –ø–æ —Ç–µ–∫—Å—Ç—É –≤ span —ç–ª–µ–º–µ–Ω—Ç–∞—Ö
        `[role="radio"]:has-text("${value}")`,
        `input[type="radio"]:has-text("${value}")`,
        // –°–µ–ª–µ–∫—Ç–æ—Ä—ã –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã Google Forms
        `div[jscontroller="D8e5bc"][role="radio"]`,
        `div.Od2TWd[role="radio"]`
      ];
      
      let clicked = false;
      for (const selector of selectors) {
        try {
          const elements = await page.$$(selector);
          if (elements.length > 0) {
            // –ò—â–µ–º —ç–ª–µ–º–µ–Ω—Ç —Å –Ω—É–∂–Ω—ã–º –∑–Ω–∞—á–µ–Ω–∏–µ–º
            for (const element of elements) {
              const elementValue = await page.evaluate(el => el.value, element);
              const ariaLabel = await page.evaluate(el => el.getAttribute('aria-label'), element);
              const dataValue = await page.evaluate(el => el.getAttribute('data-value'), element);
              const textContent = await page.evaluate(el => el.textContent, element);
              
              // –î–ª—è —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö Google Forms –∏—â–µ–º —Ç–µ–∫—Å—Ç –≤ —Å–æ—Å–µ–¥–Ω–∏—Ö span —ç–ª–µ–º–µ–Ω—Ç–∞—Ö
              let spanText = '';
              try {
                const parent = await page.evaluateHandle(el => el.closest('div'), element);
                if (parent) {
                  const textSpan = await parent.$('span.aDTYNe, span.snByac, span.OvPDhc, span.OIC90c, span[dir="auto"]');
                  if (textSpan) {
                    spanText = await page.evaluate(el => el.textContent.trim(), textSpan);
                  }
                }
              } catch (error) {
                // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–æ–∏—Å–∫–∞ span
              }
              
              // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –ø–æ –∑–Ω–∞—á–µ–Ω–∏—é, aria-label, data-value, —Ç–µ–∫—Å—Ç—É –∏–ª–∏ span —Ç–µ–∫—Å—Ç—É
              if (elementValue === value || 
                  ariaLabel === value || 
                  dataValue === value ||
                  textContent.trim() === value ||
                  spanText === value) {
                await element.click();
                console.log(`‚úÖ –†–∞–¥–∏–æ-–∫–Ω–æ–ø–∫–∞ "${value}" –≤—ã–±—Ä–∞–Ω–∞ (–Ω–∞–π–¥–µ–Ω–∞ –ø–æ: ${elementValue === value ? 'value' : ariaLabel === value ? 'aria-label' : dataValue === value ? 'data-value' : spanText === value ? 'span-text' : 'text-content'})`);
                clicked = true;
                break;
              }
            }
            if (clicked) break;
          }
        } catch (error) {
          console.log(`‚ùå –°–µ–ª–µ–∫—Ç–æ—Ä ${selector} –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª: ${error.message}`);
          continue;
        }
      }
      
      // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ —Å–µ–ª–µ–∫—Ç–æ—Ä–∞–º, –ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –ø–æ —Ç–µ–∫—Å—Ç—É –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
      if (!clicked) {
        try {
          // –ò—â–µ–º –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã —Å role="radio" –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∏—Ö aria-label
          const radioElements = await page.$$('[role="radio"]');
          for (const element of radioElements) {
            const ariaLabel = await page.evaluate(el => el.getAttribute('aria-label'), element);
            if (ariaLabel && ariaLabel.includes(value)) {
              await element.click();
              console.log(`‚úÖ –†–∞–¥–∏–æ-–∫–Ω–æ–ø–∫–∞ –Ω–∞–π–¥–µ–Ω–∞ –ø–æ aria-label: "${ariaLabel}"`);
              clicked = true;
              break;
            }
          }
        } catch (error) {
          console.log(`‚ùå –ü–æ–∏—Å–∫ –ø–æ aria-label –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª: ${error.message}`);
        }
      }
      
      // –ï—Å–ª–∏ –≤—Å–µ –µ—â–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –ø–æ –ø–æ–∑–∏—Ü–∏–∏ (–µ—Å–ª–∏ –µ—Å—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–Ω–∞ –æ–ø—Ü–∏—è)
      if (!clicked && field.options && field.options.length === 1) {
        try {
          const radioElements = await page.$$('[role="radio"], input[type="radio"]');
          if (radioElements.length === 1) {
            await radioElements[0].click();
            console.log(`‚úÖ –ï–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–∞—è —Ä–∞–¥–∏–æ-–∫–Ω–æ–ø–∫–∞ –≤—ã–±—Ä–∞–Ω–∞`);
            clicked = true;
          }
        } catch (error) {
          console.log(`‚ùå –ü–æ–∏—Å–∫ –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–π —Ä–∞–¥–∏–æ-–∫–Ω–æ–ø–∫–∏ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª: ${error.message}`);
        }
      }
      
      if (!clicked) {
        console.log(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–±—Ä–∞—Ç—å —Ä–∞–¥–∏–æ-–∫–Ω–æ–ø–∫—É "${value}"`);
        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ—Ç–ª–∞–¥–∫–∞
        const allRadios = await page.$$('[role="radio"], input[type="radio"]');
        console.log(`–ù–∞–π–¥–µ–Ω–æ —Ä–∞–¥–∏–æ-–∫–Ω–æ–ø–æ–∫ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ: ${allRadios.length}`);
        for (let i = 0; i < allRadios.length; i++) {
          const ariaLabel = await page.evaluate(el => el.getAttribute('aria-label'), allRadios[i]);
          const value = await page.evaluate(el => el.value, allRadios[i]);
          console.log(`  –†–∞–¥–∏–æ-–∫–Ω–æ–ø–∫–∞ ${i + 1}: aria-label="${ariaLabel}", value="${value}"`);
        }
      }
      
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è —Ä–∞–¥–∏–æ-–∫–Ω–æ–ø–∫–∏ ${field.title}:`, error.message);
    }
  }

  async fillCheckboxField(page, field, account) {
    const values = this.getValueForField(field, account);
    
      // –î–ª—è —á–µ–∫–±–æ–∫—Å–æ–≤ –∑–Ω–∞—á–µ–Ω–∏–µ –º–æ–∂–µ—Ç –±—ã—Ç—å false (–Ω–µ –æ—Ç–º–µ—á–µ–Ω) –∏–ª–∏ –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞, —á—Ç–æ —è–≤–ª—è–µ—Ç—Å—è –≤–∞–ª–∏–¥–Ω—ã–º
      if (values === undefined || values === null || values === '') {
        console.log(`–ü—Ä–æ–ø—É—Å–∫–∞–µ–º —á–µ–∫–±–æ–∫—Å ${field.title} - –Ω–µ—Ç –∑–Ω–∞—á–µ–Ω–∏—è (${values})`);
        return;
      }

    console.log(`–ó–∞–ø–æ–ª–Ω—è–µ–º —á–µ–∫–±–æ–∫—Å ${field.title} –∑–Ω–∞—á–µ–Ω–∏—è–º–∏:`, values);

    try {
      // –ï—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ boolean (true/false), –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ –ø—Ä–æ—Å—Ç–æ–π —á–µ–∫–±–æ–∫—Å
      if (typeof values === 'boolean') {
        if (values === true) {
          console.log(`üîç –ò—â–µ–º —á–µ–∫–±–æ–∫—Å –¥–ª—è –ø–æ–ª—è "${field.title}"...`);
          
          // –¢–∞–∫–∂–µ –ø–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã —Å —Ç–µ–∫—Å—Ç–æ–º, —Å–æ–¥–µ—Ä–∂–∞—â–∏–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
          const textElements = await page.evaluate((searchText) => {
            const elements = [];
            const allElements = document.querySelectorAll('*');
            allElements.forEach((el, index) => {
              const text = el.textContent || el.innerText;
              if (text && text.toLowerCase().includes(searchText.toLowerCase())) {
                elements.push({
                  index,
                  tagName: el.tagName,
                  text: text.substring(0, 100),
                  className: el.className,
                  id: el.id,
                  ariaLabel: el.getAttribute('aria-label'),
                  outerHTML: el.outerHTML.substring(0, 200)
                });
              }
            });
            return elements;
          }, field.title);
          
          // –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ —ç–ª–µ–º–µ–Ω—Ç—ã –ø–æ –∞–Ω–≥–ª–∏–π—Å–∫–∏–º –ø–µ—Ä–µ–≤–æ–¥–∞–º
          const englishTranslations = await page.evaluate(() => {
            const elements = [];
            const allElements = document.querySelectorAll('*');
            
            // –°–ª–æ–≤–∞—Ä—å –ø–µ—Ä–µ–≤–æ–¥–æ–≤ –¥–ª—è —á–µ–∫–±–æ–∫—Å–æ–≤
            const translations = {
              '—É–∫–∞–∑–∞—Ç–∏ —É –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –º–æ—é –µ–ª–µ–∫—Ç—Ä–æ–Ω–Ω—É –∞–¥—Ä–µ—Å—É': ['record', 'email', 'response', 'include'],
              '–Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –º–µ–Ω—ñ –∫–æ–ø—ñ—é –º–æ—ó—Ö –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π': ['send', 'copy', 'responses', 'me']
            };
            
            allElements.forEach((el, index) => {
              const text = el.textContent || el.innerText;
              const ariaLabel = el.getAttribute('aria-label');
              const fullText = (text + ' ' + (ariaLabel || '')).toLowerCase();
              
              // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –ø–∞—Ä—É –ø–µ—Ä–µ–≤–æ–¥–æ–≤
              Object.entries(translations).forEach(([ukrainian, englishWords]) => {
                const matchedWords = englishWords.filter(word => fullText.includes(word));
                if (matchedWords.length >= 2) { // –ï—Å–ª–∏ —Å–æ–≤–ø–∞–ª–æ –º–∏–Ω–∏–º—É–º 2 —Å–ª–æ–≤–∞
                  elements.push({
                    index,
                    tagName: el.tagName,
                    text: text.substring(0, 100),
                    className: el.className,
                    id: el.id,
                    ariaLabel: ariaLabel,
                    matchedWords,
                    ukrainianPhrase: ukrainian,
                    outerHTML: el.outerHTML.substring(0, 200)
                  });
                }
              });
            });
            return elements;
          });
          
          console.log(`üìã –≠–ª–µ–º–µ–Ω—Ç—ã —Å —Ç–µ–∫—Å—Ç–æ–º "${field.title}":`, JSON.stringify(textElements, null, 2));
          console.log(`üìã –≠–ª–µ–º–µ–Ω—Ç—ã —Å –∞–Ω–≥–ª–∏–π—Å–∫–∏–º–∏ –ø–µ—Ä–µ–≤–æ–¥–∞–º–∏:`, JSON.stringify(englishTranslations, null, 2));
          
          // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –ø–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ —ç–ª–µ–º–µ–Ω—Ç—ã —Å –ø–æ—Ö–æ–∂–∏–º–∏ —Å–ª–æ–≤–∞–º–∏
          const similarElements = await page.evaluate((searchText) => {
            const elements = [];
            const keywords = searchText.toLowerCase().split(' ').filter(word => word.length > 3);
            const allElements = document.querySelectorAll('*');
            
            allElements.forEach((el, index) => {
              const text = el.textContent || el.innerText;
              if (text) {
                const textLower = text.toLowerCase();
                const matchedKeywords = keywords.filter(keyword => textLower.includes(keyword));
                if (matchedKeywords.length > 0) {
                  elements.push({
                    index,
                    tagName: el.tagName,
                    text: text.substring(0, 100),
                    className: el.className,
                    id: el.id,
                    ariaLabel: el.getAttribute('aria-label'),
                    matchedKeywords,
                    outerHTML: el.outerHTML.substring(0, 200)
                  });
                }
              }
            });
            return elements;
          }, field.title);
          
          
          // –ò—â–µ–º —á–µ–∫–±–æ–∫—Å –ø–æ —Ä–∞–∑–ª–∏—á–Ω—ã–º —Å–µ–ª–µ–∫—Ç–æ—Ä–∞–º
          const selectors = [
            `[role="checkbox"]`,
            `[aria-label*="${field.title}"]`,
            `input[type="checkbox"]`,
            `input[name="${field.name}"]`,
            `input[name="${field.id}"]`
          ];
          
          let clicked = false;
          for (const selector of selectors) {
            try {
              const elements = await page.$$(selector);
              
              if (elements.length > 0) {
                // –ò—â–µ–º —ç–ª–µ–º–µ–Ω—Ç —Å –Ω—É–∂–Ω—ã–º aria-label –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ–º
                for (let i = 0; i < elements.length; i++) {
                  const element = elements[i];
                  const ariaLabel = await page.evaluate(el => el.getAttribute('aria-label'), element);
                  const isChecked = await page.evaluate(el => el.getAttribute('aria-checked'), element);
                  const elementText = await page.evaluate(el => el.textContent || el.innerText, element);
                  
                  // –ï—Å–ª–∏ —ç–ª–µ–º–µ–Ω—Ç —É–∂–µ –æ—Ç–º–µ—á–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
                  if (isChecked === 'true') {
                    console.log(`‚úÖ –ß–µ–∫–±–æ–∫—Å "${field.title}" —É–∂–µ –æ—Ç–º–µ—á–µ–Ω`);
                    clicked = true;
                    break;
                  }
                  
                  // –ü—Ä–æ–≤–µ—Ä—è–µ–º aria-label (—á–∞—Å—Ç–∏—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ)
                  if (ariaLabel && (
                    ariaLabel.toLowerCase().includes(field.title.toLowerCase()) ||
                    field.title.toLowerCase().includes(ariaLabel.toLowerCase())
                  )) {
                    await element.click();
                    console.log(`‚úÖ –ß–µ–∫–±–æ–∫—Å "${field.title}" –æ—Ç–º–µ—á–µ–Ω –ø–æ aria-label`);
                    clicked = true;
                    break;
                  }
                  
                  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—Å—Ç —ç–ª–µ–º–µ–Ω—Ç–∞
                  if (elementText && (
                    elementText.toLowerCase().includes(field.title.toLowerCase()) ||
                    field.title.toLowerCase().includes(elementText.toLowerCase())
                  )) {
                    await element.click();
                    console.log(`‚úÖ –ß–µ–∫–±–æ–∫—Å "${field.title}" –æ—Ç–º–µ—á–µ–Ω –ø–æ —Ç–µ–∫—Å—Ç—É`);
                    clicked = true;
                    break;
                  }
                }
                if (clicked) break;
              }
            } catch (error) {
              console.log(`‚ùå –°–µ–ª–µ–∫—Ç–æ—Ä ${selector} –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª: ${error.message}`);
              continue;
            }
          }
          
          if (!clicked) {
            console.log(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–º–µ—Ç–∏—Ç—å —á–µ–∫–±–æ–∫—Å "${field.title}"`);
            
            // –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ —á–µ–∫–±–æ–∫—Å –ø–æ –∞–Ω–≥–ª–∏–π—Å–∫–∏–º –ø–µ—Ä–µ–≤–æ–¥–∞–º
            try {
              console.log(`üîç –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ —á–µ–∫–±–æ–∫—Å –ø–æ –∞–Ω–≥–ª–∏–π—Å–∫–∏–º –ø–µ—Ä–µ–≤–æ–¥–∞–º...`);
              
              // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—è
              let englishKeywords = [];
              if (field.title.toLowerCase().includes('—É–∫–∞–∑–∞—Ç–∏') && field.title.toLowerCase().includes('–µ–ª–µ–∫—Ç—Ä–æ–Ω–Ω—É')) {
                englishKeywords = ['record', 'email', 'response', 'include'];
              } else if (field.title.toLowerCase().includes('–Ω–∞–¥—ñ—Å–ª–∞—Ç–∏') && field.title.toLowerCase().includes('–∫–æ–ø—ñ—é')) {
                englishKeywords = ['send', 'copy', 'responses', 'me'];
              }
              
              console.log(`üîç –ê–Ω–≥–ª–∏–π—Å–∫–∏–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è "${field.title}":`, englishKeywords);
              
              const foundByEnglish = await page.evaluate((keywords) => {
                // –ò—â–µ–º –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã —Å role="checkbox" –∏–ª–∏ input[type="checkbox"]
                const checkboxes = document.querySelectorAll('[role="checkbox"], input[type="checkbox"]');
                
                for (let checkbox of checkboxes) {
                  const ariaLabel = checkbox.getAttribute('aria-label');
                  const parent = checkbox.parentElement;
                  const parentText = parent ? parent.textContent || parent.innerText : '';
                  const fullText = (ariaLabel + ' ' + parentText).toLowerCase();
                  
                  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Å –∞–Ω–≥–ª–∏–π—Å–∫–∏–º–∏ –∫–ª—é—á–µ–≤—ã–º–∏ —Å–ª–æ–≤–∞–º–∏
                  const matchedKeywords = keywords.filter(keyword => fullText.includes(keyword));
                  if (matchedKeywords.length >= 2) { // –ï—Å–ª–∏ —Å–æ–≤–ø–∞–ª–æ –º–∏–Ω–∏–º—É–º 2 —Å–ª–æ–≤–∞
                    return {
                      found: true,
                      method: 'english-translation',
                      ariaLabel: ariaLabel,
                      parentText: parentText.substring(0, 100),
                      matchedKeywords: matchedKeywords,
                      isChecked: checkbox.getAttribute('aria-checked')
                    };
                  }
                }
                
                return { found: false };
              }, englishKeywords);
              
              if (foundByEnglish.found) {
                console.log(`‚úÖ –ù–∞–π–¥–µ–Ω —á–µ–∫–±–æ–∫—Å –º–µ—Ç–æ–¥–æ–º "${foundByEnglish.method}":`, foundByEnglish);
                
                // –ö–ª–∏–∫–∞–µ–º –ø–æ –Ω–∞–π–¥–µ–Ω–Ω–æ–º—É —á–µ–∫–±–æ–∫—Å—É
                const checkboxElement = await page.evaluateHandle((keywords) => {
                  const checkboxes = document.querySelectorAll('[role="checkbox"], input[type="checkbox"]');
                  
                  for (let checkbox of checkboxes) {
                    const ariaLabel = checkbox.getAttribute('aria-label');
                    const parent = checkbox.parentElement;
                    const parentText = parent ? parent.textContent || parent.innerText : '';
                    const fullText = (ariaLabel + ' ' + parentText).toLowerCase();
                    
                    const matchedKeywords = keywords.filter(keyword => fullText.includes(keyword));
                    if (matchedKeywords.length >= 2) {
                      return checkbox;
                    }
                  }
                  return null;
                }, englishKeywords);
                
                if (checkboxElement && checkboxElement.asElement) {
                  await checkboxElement.asElement().click();
                  console.log(`‚úÖ –ß–µ–∫–±–æ–∫—Å "${field.title}" –æ—Ç–º–µ—á–µ–Ω –ø–æ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º—É –ø–µ—Ä–µ–≤–æ–¥—É`);
                  clicked = true;
                }
              } else {
                console.log(`‚ùå –ß–µ–∫–±–æ–∫—Å –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–∞–∂–µ –ø–æ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º—É –ø–µ—Ä–µ–≤–æ–¥—É`);
              }
            } catch (textSearchError) {
              console.log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–æ —Ç–µ–∫—Å—Ç—É: ${textSearchError.message}`);
            }
            
            // –ü–æ–ø—Ä–æ–±—É–µ–º –∫–ª–∏–∫–Ω—É—Ç—å –ø–æ –ø–µ—Ä–≤–æ–º—É –Ω–∞–π–¥–µ–Ω–Ω–æ–º—É —á–µ–∫–±–æ–∫—Å—É –∫–∞–∫ fallback
            if (!clicked) {
              try {
                const firstCheckbox = await page.$('[role="checkbox"], input[type="checkbox"]');
                if (firstCheckbox) {
                  await firstCheckbox.click();
                  console.log(`‚ö†Ô∏è –ö–ª–∏–∫–Ω—É–ª–∏ –ø–æ –ø–µ—Ä–≤–æ–º—É –Ω–∞–π–¥–µ–Ω–Ω–æ–º—É —á–µ–∫–±–æ–∫—Å—É –∫–∞–∫ fallback`);
                  clicked = true;
                }
              } catch (fallbackError) {
                console.log(`‚ùå Fallback —Ç–æ–∂–µ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª: ${fallbackError.message}`);
              }
            }
          }
        } else {
          console.log(`–ß–µ–∫–±–æ–∫—Å "${field.title}" –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç–º–µ—á–µ–Ω (–∑–Ω–∞—á–µ–Ω–∏–µ: false)`);
        }
        return;
      }

      // –ï—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –º–∞—Å—Å–∏–≤ –∏–ª–∏ —Å—Ç—Ä–æ–∫–∞, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –≤—ã–±–æ—Ä
      const valuesArray = Array.isArray(values) ? values : [values];
      
      for (const value of valuesArray) {
        // –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã –ø–æ–∏—Å–∫–∞ —á–µ–∫–±–æ–∫—Å–∞
        const selectors = [
          `input[name="${field.name}"][value="${value}"]`,
          `input[name="${field.name}"][type="checkbox"]`,
          `input[type="checkbox"]`,
          `[role="checkbox"]`,
          `[aria-label*="${field.title}"]`
        ];
        
        let clicked = false;
        for (const selector of selectors) {
          try {
            const elements = await page.$$(selector);
            if (elements.length > 0) {
              // –ò—â–µ–º —ç–ª–µ–º–µ–Ω—Ç —Å –Ω—É–∂–Ω—ã–º –∑–Ω–∞—á–µ–Ω–∏–µ–º
              for (const element of elements) {
                const elementValue = await page.evaluate(el => el.value, element);
                const ariaLabel = await page.evaluate(el => el.getAttribute('aria-label'), element);
                
                // –î–ª—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å role="checkbox" –ø—Ä–æ–≤–µ—Ä—è–µ–º aria-label
                if (selector.includes('role="checkbox"') || selector.includes('aria-label')) {
                  if (ariaLabel && ariaLabel.includes(field.title)) {
                    await element.click();
                    console.log(`‚úÖ –ß–µ–∫–±–æ–∫—Å "${field.title}" –æ—Ç–º–µ—á–µ–Ω`);
                    clicked = true;
                    break;
                  }
                } else if (elementValue === value || !value) {
                  await element.click();
                  console.log(`‚úÖ –ß–µ–∫–±–æ–∫—Å "${value}" –æ—Ç–º–µ—á–µ–Ω`);
                  clicked = true;
                  break;
                }
              }
              if (clicked) break;
            }
          } catch (error) {
            console.log(`‚ùå –°–µ–ª–µ–∫—Ç–æ—Ä ${selector} –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª: ${error.message}`);
            continue;
          }
        }
        
        if (!clicked) {
          console.log(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–º–µ—Ç–∏—Ç—å —á–µ–∫–±–æ–∫—Å "${value}"`);
        }
      }
      
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è —á–µ–∫–±–æ–∫—Å–∞ ${field.title}:`, error.message);
    }
  }

  async fillFileField(page, selector, field, account) {
    const filePath = this.getValueForField(field, account);
    if (filePath) {
      const fileInput = await page.$(selector);
      if (fileInput) {
        await fileInput.uploadFile(filePath);
      }
    }
  }

  getValueForField(field, account) {
    console.log(`üîç –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—è: ${field.title} (ID: ${field.id}, Name: ${field.name})`);
    console.log(`üìä –î–∞–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç–∞:`, account.data);
    console.log(`üìä –ü–æ–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞:`, account.fields);
    
    // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ (–µ—Å–ª–∏ –µ—Å—Ç—å)
    if (account.fields && account.fields[field.id] !== undefined) {
      console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ account.fields[${field.id}]:`, account.fields[field.id]);
      return account.fields[field.id];
    }
    
    // –ò—â–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –¥–∞–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–∞ –ø–æ –∏–º–µ–Ω–∏ –ø–æ–ª—è
    let value = account.data && account.data[field.name];
    console.log(`üîç –ü–æ–∏—Å–∫ –ø–æ field.name (${field.name}):`, value);
    
    // –ï—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –ø–æ ID
    if (value === undefined) {
      value = account.data && account.data[field.id];
      console.log(`üîç –ü–æ–∏—Å–∫ –ø–æ field.id (${field.id}):`, value);
    }
    
    // –ï—Å–ª–∏ –≤—Å–µ –µ—â–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    if (value === undefined && field.defaultValue) {
      value = field.defaultValue;
      console.log(`üîç –ò—Å–ø–æ–ª—å–∑—É–µ–º defaultValue:`, value);
    }
    
    console.log(`üìã –ò—Ç–æ–≥–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—è ${field.title} (${field.id}):`, value, typeof value);
    return value;
  }

  async submitForm(page, formConfig) {
    console.log('–ò—â–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º—ã...');
    
    try {
      
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º page.evaluate –¥–ª—è –ø–æ–∏—Å–∫–∞ –∫–Ω–æ–ø–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏
      const submitButton = await page.evaluate(() => {
        // –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º –Ω–∞—Å—Ç–æ—è—â–∏–µ –∫–Ω–æ–ø–∫–∏ —Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–º–∏ –∫–ª–∞—Å—Å–∞–º–∏ Google Forms
        const googleButtons = document.querySelectorAll('.freebirdFormviewerViewNavigationSubmitButton, [jsname="M2UYVd"], button[data-value="Submit"], .freebirdFormviewerViewNavigationSubmitButton, .appsMaterialWizButtonPaperbuttonLabel, .quantumWizButtonPaperbuttonLabel');
        if (googleButtons.length > 0) {
          const button = googleButtons[0];
          return {
            tagName: button.tagName,
            className: button.className,
            id: button.id,
            text: button.textContent,
            type: 'google-button'
          };
        }
        
        // –ò—â–µ–º –∫–Ω–æ–ø–∫–∏ —Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–º–∏ –∞—Ç—Ä–∏–±—É—Ç–∞–º–∏ Google Forms
        const googleSubmitButtons = document.querySelectorAll('[data-value="Submit"], [aria-label*="Submit"], [aria-label*="–û—Ç–ø—Ä–∞–≤–∏—Ç—å"], button[jsname="M2UYVd"]');
        if (googleSubmitButtons.length > 0) {
          const button = googleSubmitButtons[0];
          return {
            tagName: button.tagName,
            className: button.className,
            id: button.id,
            text: button.textContent,
            type: 'google-submit-button'
          };
        }
        
        // –ò—â–µ–º –∫–Ω–æ–ø–∫–∏ —Å —Ç–µ–∫—Å—Ç–æ–º Submit –∏–ª–∏ –û—Ç–ø—Ä–∞–≤–∏—Ç—å, –Ω–æ –∏—Å–∫–ª—é—á–∞–µ–º –¥–ª–∏–Ω–Ω—ã–µ —Ç–µ–∫—Å—Ç—ã —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏
        // –ò—Å–∫–ª—é—á–∞–µ–º span —ç–ª–µ–º–µ–Ω—Ç—ã, —Ç–∞–∫ –∫–∞–∫ –æ–Ω–∏ —á–∞—Å—Ç–æ —Å–æ–¥–µ—Ä–∂–∞—Ç –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
        const buttons = Array.from(document.querySelectorAll('button, input[type="submit"], div[role="button"]'));
        
        for (const button of buttons) {
          const text = button.textContent?.toLowerCase() || '';
          const ariaLabel = button.getAttribute('aria-label')?.toLowerCase() || '';
          
          // –ò—Å–∫–ª—é—á–∞–µ–º –¥–ª–∏–Ω–Ω—ã–µ —Ç–µ–∫—Å—Ç—ã (–±–æ–ª—å—à–µ 30 —Å–∏–º–≤–æ–ª–æ–≤) - —ç—Ç–æ —Å–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
          if (text.length > 30) continue;
          
          // –ò—Å–∫–ª—é—á–∞–µ–º —Ç–µ–∫—Å—Ç—ã —Å URL, —Å—Å—ã–ª–∫–∞–º–∏, –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏
          if (text.includes('http') || text.includes('www') || text.includes('link') || 
              text.includes('retweet') || text.includes('event') || text.includes('post') ||
              text.includes('twitter') || text.includes('x.com')) {
            continue;
          }
          
          // –ò—â–µ–º —Ç–æ–ª—å–∫–æ –∫–æ—Ä–æ—Ç–∫–∏–µ —Ç–µ–∫—Å—Ç—ã —Å "submit" –∏–ª–∏ "–æ—Ç–ø—Ä–∞–≤–∏—Ç—å"
          if ((text.trim() === 'submit' || text.trim() === '–æ—Ç–ø—Ä–∞–≤–∏—Ç—å' || 
               text.includes('submit') || text.includes('–æ—Ç–ø—Ä–∞–≤–∏—Ç—å')) && 
              text.length < 20) {
            return {
              tagName: button.tagName,
              className: button.className,
              id: button.id,
              text: button.textContent,
              type: 'text-button'
            };
          }
          
          if (ariaLabel.includes('submit') || ariaLabel.includes('–æ—Ç–ø—Ä–∞–≤–∏—Ç—å')) {
            return {
              tagName: button.tagName,
              className: button.className,
              id: button.id,
              text: button.textContent,
              type: 'aria-button'
            };
          }
        }
        
        // –ò—â–µ–º –∫–Ω–æ–ø–∫–∏ —Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–º–∏ –∞—Ç—Ä–∏–±—É—Ç–∞–º–∏
        const submitInputs = document.querySelectorAll('input[type="submit"], button[type="submit"]');
        if (submitInputs.length > 0) {
          const button = submitInputs[0];
          return {
            tagName: button.tagName,
            className: button.className,
            id: button.id,
            text: button.textContent || button.value,
            type: 'submit-input'
          };
        }
        
        // –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –ø–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –ª—é–±—É—é –∫–Ω–æ–ø–∫—É —Å –∫–æ—Ä–æ—Ç–∫–∏–º —Ç–µ–∫—Å—Ç–æ–º
        const shortButtons = Array.from(document.querySelectorAll('button, input[type="submit"]'));
        for (const button of shortButtons) {
          const text = button.textContent?.toLowerCase() || '';
          if (text.length > 0 && text.length < 15 && 
              !text.includes('http') && !text.includes('www') && 
              !text.includes('link') && !text.includes('retweet')) {
            return {
              tagName: button.tagName,
              className: button.className,
              id: button.id,
              text: button.textContent,
              type: 'short-button'
            };
          }
        }
        
        return null;
      });
      
      if (submitButton) {
        console.log(`–ù–∞–π–¥–µ–Ω–∞ –∫–Ω–æ–ø–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏:`, submitButton);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –∫–Ω–æ–ø–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏, –∞ –Ω–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è
        if (submitButton.text && submitButton.text.length > 50) {
          console.log('‚ö†Ô∏è –ù–∞–π–¥–µ–Ω–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π, –≤–æ–∑–º–æ–∂–Ω–æ —ç—Ç–æ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º...');
          submitButton = null;
        } else if (submitButton.text && (submitButton.text.includes('http') || submitButton.text.includes('retweet'))) {
          console.log('‚ö†Ô∏è –ù–∞–π–¥–µ–Ω–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç —Å—Å—ã–ª–∫—É, –≤–æ–∑–º–æ–∂–Ω–æ —ç—Ç–æ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º...');
          submitButton = null;
        }
      }
      
      if (submitButton) {
        // –ñ–¥–µ–º, –ø–æ–∫–∞ –∫–Ω–æ–ø–∫–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–≥—Ä—É–∑–∏—Ç—Å—è –∏ —Å—Ç–∞–Ω–µ—Ç –∫–ª–∏–∫–∞–±–µ–ª—å–Ω–æ–π
        console.log('‚è≥ –ñ–¥–µ–º –ø–æ–ª–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –∫–Ω–æ–ø–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏...');
        await page.waitForTimeout(2000); // –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –∑–∞–≥—Ä—É–∑–∫—É
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–Ω–æ–ø–∫–∞ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –∫–ª–∏–∫–∞–±–µ–ª—å–Ω–∞
        const isClickable = await page.evaluate(() => {
          const buttons = Array.from(document.querySelectorAll('button, input[type="submit"], div[role="button"], span'));
          for (const button of buttons) {
            const text = button.textContent?.toLowerCase() || '';
            const ariaLabel = button.getAttribute('aria-label')?.toLowerCase() || '';
            
            if (text.includes('submit') || text.includes('–æ—Ç–ø—Ä–∞–≤–∏—Ç—å') || 
                ariaLabel.includes('submit') || ariaLabel.includes('–æ—Ç–ø—Ä–∞–≤–∏—Ç—å')) {
              const style = window.getComputedStyle(button);
              const isVisible = style.display !== 'none' && style.visibility !== 'hidden' && style.opacity !== '0';
              const isEnabled = !button.disabled && !button.hasAttribute('disabled');
              const hasClickHandler = button.onclick !== null || button.getAttribute('onclick') !== null;
              
              console.log('–ö–Ω–æ–ø–∫–∞ –Ω–∞–π–¥–µ–Ω–∞:', {
                text: button.textContent,
                isVisible,
                isEnabled,
                hasClickHandler,
                className: button.className
              });
              
              return isVisible && isEnabled;
            }
          }
          return false;
        });
        
        if (!isClickable) {
          console.log('‚ö†Ô∏è –ö–Ω–æ–ø–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–π–¥–µ–Ω–∞, –Ω–æ –Ω–µ –∫–ª–∏–∫–∞–±–µ–ª—å–Ω–∞. –ñ–¥–µ–º –µ—â–µ...');
          await page.waitForTimeout(3000); // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –æ–∂–∏–¥–∞–Ω–∏–µ
        }
        
        // –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã –∫–ª–∏–∫–∞
        const clickMethods = [
            // –ú–µ—Ç–æ–¥ 1: –ö–ª–∏–∫ —á–µ—Ä–µ–∑ evaluate —Å –±–æ–ª–µ–µ —Ç–æ—á–Ω—ã–º –ø–æ–∏—Å–∫–æ–º
            async () => {
              const clicked = await page.evaluate(() => {
                // –ò—â–µ–º –∫–Ω–æ–ø–∫–∏ —Å —Ç–µ–∫—Å—Ç–æ–º Submit
                const buttons = Array.from(document.querySelectorAll('button, input[type="submit"], div[role="button"], span'));
                for (const button of buttons) {
                  const text = button.textContent?.toLowerCase() || '';
                  const ariaLabel = button.getAttribute('aria-label')?.toLowerCase() || '';
                  
                  if (text.includes('submit') || text.includes('–æ—Ç–ø—Ä–∞–≤–∏—Ç—å') || 
                      ariaLabel.includes('submit') || ariaLabel.includes('–æ—Ç–ø—Ä–∞–≤–∏—Ç—å')) {
                    
                    // –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã –∫–ª–∏–∫–∞
                    try {
                      button.click();
                      return true;
                    } catch (e) {
                      try {
                        button.dispatchEvent(new MouseEvent('click', { bubbles: true }));
                        return true;
                      } catch (e2) {
                        try {
                          button.dispatchEvent(new Event('click', { bubbles: true }));
                          return true;
                        } catch (e3) {
                          return false;
                        }
                      }
                    }
                  }
                }
                return false;
              });
              
              if (!clicked) {
                throw new Error('–ö–Ω–æ–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –∫–ª–∏–∫ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª');
              }
            },
          
            // –ú–µ—Ç–æ–¥ 2: –ö–ª–∏–∫ –ø–æ Google Forms –∫–Ω–æ–ø–∫–µ
            async () => {
              const clicked = await page.evaluate(() => {
                const googleButton = document.querySelector('.freebirdFormviewerViewNavigationSubmitButton, [jsname="M2UYVd"], .M7eMe');
                if (googleButton) {
                  // –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã –∫–ª–∏–∫–∞
                  try {
                    googleButton.click();
                    return true;
                  } catch (e) {
                    try {
                      googleButton.dispatchEvent(new MouseEvent('click', { bubbles: true }));
                      return true;
                    } catch (e2) {
                      try {
                        googleButton.dispatchEvent(new Event('click', { bubbles: true }));
                        return true;
                      } catch (e3) {
                        return false;
                      }
                    }
                  }
                }
                return false;
              });
              
              if (!clicked) {
                throw new Error('Google Forms –∫–Ω–æ–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –∫–ª–∏–∫ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª');
              }
            },
          
            // –ú–µ—Ç–æ–¥ 3: –ö–ª–∏–∫ –ø–æ —Å–µ–ª–µ–∫—Ç–æ—Ä—É
            async () => {
              const selector = submitButton.id ? `#${submitButton.id}` : 
                             submitButton.className ? `.${submitButton.className.split(' ')[0]}` : 
                             submitButton.tagName.toLowerCase();
              await page.click(selector);
            },
          
            // –ú–µ—Ç–æ–¥ 4: –ö–ª–∏–∫ –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º
            async () => {
              const element = await page.evaluateHandle(() => {
                const buttons = Array.from(document.querySelectorAll('button, input[type="submit"], div[role="button"], span'));
                for (const button of buttons) {
                  const text = button.textContent?.toLowerCase() || '';
                  if (text.includes('submit') || text.includes('–æ—Ç–ø—Ä–∞–≤–∏—Ç—å')) {
                    return button;
                  }
                }
                return null;
              });
              
              if (element && element.asElement) {
                const box = await element.asElement().boundingBox();
                if (box) {
                  await page.mouse.click(box.x + box.width / 2, box.y + box.height / 2);
                }
              }
            },
          
            // –ú–µ—Ç–æ–¥ 5: –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ä–º—ã —á–µ—Ä–µ–∑ JavaScript
            async () => {
              await page.evaluate(() => {
                // –ò—â–µ–º —Ñ–æ—Ä–º—É
                const form = document.querySelector('form');
                if (form) {
                  form.submit();
                  return true;
                }
                
                // –ï—Å–ª–∏ —Ñ–æ—Ä–º—ã –Ω–µ—Ç, –∏—â–µ–º –∫–Ω–æ–ø–∫—É –∏ —Å–∏–º—É–ª–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É
                const buttons = Array.from(document.querySelectorAll('button, input[type="submit"], div[role="button"], span'));
                for (const button of buttons) {
                  const text = button.textContent?.toLowerCase() || '';
                  if (text.includes('submit') || text.includes('–æ—Ç–ø—Ä–∞–≤–∏—Ç—å')) {
                    // –°–æ–∑–¥–∞–µ–º —Å–æ–±—ã—Ç–∏–µ submit
                    const submitEvent = new Event('submit', { bubbles: true, cancelable: true });
                    button.dispatchEvent(submitEvent);
                    
                    // –¢–∞–∫–∂–µ –ø—Ä–æ–±—É–µ–º –∫–ª–∏–∫
                    button.click();
                    return true;
                  }
                }
                return false;
              });
            }
        ];
        
        let clickSuccess = false;
        for (let i = 0; i < clickMethods.length; i++) {
          try {
            // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –∫–∞–∂–¥—ã–º –º–µ—Ç–æ–¥–æ–º –∫–ª–∏–∫–∞
            if (i > 0) {
              await page.waitForTimeout(1000);
            }
            
            await clickMethods[i]();
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –ª–∏ –∫–Ω–æ–ø–∫–∞ –±—ã–ª–∞ –Ω–∞–∂–∞—Ç–∞
            await page.waitForTimeout(500);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–∑–º–µ–Ω–∏–ª—Å—è –ª–∏ URL –∏–ª–∏ –ø–æ—è–≤–∏–ª–∏—Å—å –ª–∏ –ø—Ä–∏–∑–Ω–∞–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏
            const urlChanged = await page.evaluate(() => {
              return window.location.href.includes('formResponse') || 
                     window.location.href.includes('thankyou') ||
                     window.location.href.includes('confirmation');
            });
            
            const successMessage = await page.evaluate(() => {
              const body = document.body;
              const text = body.textContent.toLowerCase();
              return text.includes('your response has been recorded') ||
                     text.includes('—Å–ø–∞—Å–∏–±–æ') ||
                     text.includes('–æ—Ç–≤–µ—Ç –∑–∞–ø–∏—Å–∞–Ω') ||
                     text.includes('—Ñ–æ—Ä–º–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞');
            });
            
            if (urlChanged || successMessage) {
              console.log('‚úÖ –ö–Ω–æ–ø–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–∂–∞—Ç–∞ —É—Å–ø–µ—à–Ω–æ!');
              clickSuccess = true;
              return;
            }
          } catch (error) {
            continue;
          }
        }
      }
      
      // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –∫–Ω–æ–ø–∫—É, –ø—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ä–º—É —á–µ—Ä–µ–∑ Enter
      console.log('–ö–Ω–æ–ø–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –ø—Ä–æ–±—É–µ–º Enter...');
      await page.keyboard.press('Enter');
      
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∫–Ω–æ–ø–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏:', error.message);
      // –í –∫—Ä–∞–π–Ω–µ–º —Å–ª—É—á–∞–µ –ø—Ä–æ–±—É–µ–º Enter
      await page.keyboard.press('Enter');
    }
  }

  // –í–∫–ª—é—á–∞–µ—Ç —á–µ–∫–±–æ–∫—Å —Å–æ–≥–ª–∞—Å–∏—è –Ω–∞ —É–∫–∞–∑–∞–Ω–∏–µ email –≤ –æ—Ç–≤–µ—Ç–µ, –µ—Å–ª–∏ –æ–Ω –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç
  async ensureEmailConsentCheckbox(page, accountEmail) {
    // –ò—â–µ–º –ª—é–±–æ–π —á–µ–∫–±–æ–∫—Å, –≥–¥–µ —Ç–µ–∫—Å—Ç/aria-label —Å–æ–¥–µ—Ä–∂–∏—Ç –ø–æ–¥—Å–∫–∞–∑–∫–∏ –ø—Ä–æ email/–∞–¥—Ä–µ—Å –ø–æ—á—Ç—ã
    const keywords = [
      'email', 'e-mail', '–ø–æ—á—Ç', '—ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω', 'mail', '–∞–¥—Ä–µ—Å', 'response', '–æ—Ç–≤–µ—Ç'
    ];

    // –ñ–¥—ë–º —Ä–µ–Ω–¥–µ—Ä —á–µ–∫–±–æ–∫—Å–æ–≤ —á—É—Ç—å-—á—É—Ç—å, –Ω–æ –Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ
    await page.waitForTimeout(500);

    const checkboxHandle = await page.evaluateHandle((kw) => {
      const all = Array.from(document.querySelectorAll('[role="checkbox"], input[type="checkbox"]'));
      for (const el of all) {
        const aria = (el.getAttribute('aria-label') || '').toLowerCase();
        const parentText = (el.parentElement?.textContent || '').toLowerCase();
        const text = aria + ' ' + parentText;
        const hit = kw.some(k => text.includes(k));
        if (hit) {
          return el;
        }
      }
      return null;
    }, keywords);

    if (!checkboxHandle) {
      throw new Error('–ß–µ–∫–±–æ–∫—Å email-—Å–æ–≥–ª–∞—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –∫–ª–∏–∫–∞–µ–º –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
    const isChecked = await page.evaluate((el) => {
      const aria = el.getAttribute('aria-checked');
      if (aria === 'true') return true;
      if (el instanceof HTMLInputElement && el.type === 'checkbox') return el.checked === true;
      return false;
    }, checkboxHandle);

    if (!isChecked) {
      try {
        await checkboxHandle.asElement().click();
        await page.waitForTimeout(300);
        console.log('‚úÖ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω —á–µ–∫–±–æ–∫—Å email-—Å–æ–≥–ª–∞—Å–∏—è');
      } catch (e) {
        // –§–æ–ª–ª–±–µ–∫: –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –∫–ª–∏–∫–Ω—É—Ç—å –ø–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—É
        try {
          const container = await page.evaluateHandle((el) => el.closest('.bzfPab, .wFGF8, .uVccjd, .aiSeRd, .FXLARc, .wGQFbe, .oLlshd') || el, checkboxHandle);
          await container.asElement().click();
          await page.waitForTimeout(300);
          console.log('‚úÖ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω —á–µ–∫–±–æ–∫—Å —á–µ—Ä–µ–∑ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä');
        } catch {
          throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –∫–ª–∏–∫–Ω—É—Ç—å –ø–æ —á–µ–∫–±–æ–∫—Å—É email-—Å–æ–≥–ª–∞—Å–∏—è');
        }
      }
    } else {
      console.log('‚ÑπÔ∏è –ß–µ–∫–±–æ–∫—Å email-—Å–æ–≥–ª–∞—Å–∏—è —É–∂–µ –∞–∫—Ç–∏–≤–µ–Ω');
    }
  }

  async waitForSubmission(page) {
    try {
      
      // –ñ–¥–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è URL –∏–ª–∏ –ø–æ—è–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–µ
      await Promise.race([
        // –ñ–¥–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è URL (Google Forms –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏)
        page.waitForFunction(() => {
          const url = window.location.href;
          console.log('–¢–µ–∫—É—â–∏–π URL:', url);
          return url.includes('formResponse') || 
                 url.includes('thankyou') ||
                 url.includes('confirmation') ||
                 url.includes('viewform?usp=pp_url&formkey=');
        }, { timeout: 20000 }),
        
        // –ñ–¥–µ–º –ø–æ—è–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–µ
        page.waitForSelector('.freebirdFormviewerViewResponseConfirmationMessage, .thank-you, .success, [data-response-id], .freebirdFormviewerViewResponseConfirmationMessage', { 
          timeout: 20000 
        }),
        
        // –ñ–¥–µ–º –∏—Å—á–µ–∑–Ω–æ–≤–µ–Ω–∏—è —Ñ–æ—Ä–º—ã
        page.waitForFunction(() => {
          const form = document.querySelector('form');
          const submitButton = document.querySelector('button, input[type="submit"], div[role="button"], span');
          return !form || form.style.display === 'none' || !submitButton;
        }, { timeout: 20000 }),
        
        // –ñ–¥–µ–º –ø–æ—è–≤–ª–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        page.waitForFunction(() => {
          const body = document.body;
          const text = body.textContent.toLowerCase();
          return text.includes('your response has been recorded') ||
                 text.includes('—Å–ø–∞—Å–∏–±–æ') ||
                 text.includes('–æ—Ç–≤–µ—Ç –∑–∞–ø–∏—Å–∞–Ω') ||
                 text.includes('—Ñ–æ—Ä–º–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞');
        }, { timeout: 20000 })
      ]);
      
      console.log('‚úÖ –§–æ—Ä–º–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!');
      
    } catch (error) {
      console.log('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–∂–∏–¥–∞–Ω–∏–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è:', error.message);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è –ª–∏ URL
      const currentUrl = page.url();
      console.log('–¢–µ–∫—É—â–∏–π URL –ø–æ—Å–ª–µ –ø–æ–ø—ã—Ç–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏:', currentUrl);
      
      if (currentUrl.includes('formResponse') || currentUrl.includes('thankyou')) {
        console.log('‚úÖ –§–æ—Ä–º–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ (–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ –ø–æ URL)');
        return;
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–µ
      const successMessage = await page.evaluate(() => {
        const body = document.body;
        const text = body.textContent.toLowerCase();
        return text.includes('your response has been recorded') ||
               text.includes('—Å–ø–∞—Å–∏–±–æ') ||
               text.includes('–æ—Ç–≤–µ—Ç –∑–∞–ø–∏—Å–∞–Ω') ||
               text.includes('—Ñ–æ—Ä–º–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞');
      });
      
      if (successMessage) {
        console.log('‚úÖ –§–æ—Ä–º–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ (–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ –ø–æ —Ç–µ–∫—Å—Ç—É)');
        return;
      }
      
      console.log('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–∂–¥–∞—Ç—å—Å—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏, –Ω–æ —Ñ–æ—Ä–º–∞ –º–æ–≥–ª–∞ –±—ã—Ç—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞');
    }
  }

  async updateJobStatus(jobId, status, error = null) {
    try {
      const updates = {
        status,
        endTime: new Date().toISOString()
      };
      
      if (error) {
        updates.error = error;
        await this.jobModel.addLog(jobId, {
          type: 'error',
          message: error
        });
      }
      
      await this.jobModel.update(jobId, updates);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á–∏:', error);
    }
  }

  async sendNotification(notification) {
    try {
      const response = await fetch('http://localhost:3001/api/notifications', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(notification)
      });
      
      if (!response.ok) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', response.statusText);
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', error);
    }
  }

  async getJobStatus(jobId) {
    return await this.jobModel.getById(jobId);
  }

  async stopJob(jobId) {
    const job = await this.jobModel.getById(jobId);
    if (job && job.status === 'running') {
      const token = this.cancellationTokens.get(jobId) || { cancelled: false };
      token.cancelled = true;
      this.cancellationTokens.set(jobId, token);
      await this.jobModel.addLog(jobId, {
        type: 'warning',
        message: '–ó–∞–ø—Ä–æ—à–µ–Ω–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–¥–∞—á–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º'
      });
      // –ó–∞–∫—Ä—ã—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –±—Ä–∞—É–∑–µ—Ä—ã, —á—Ç–æ–±—ã –±—ã—Å—Ç—Ä–µ–µ –æ—Å–≤–æ–±–æ–¥–∏—Ç—å —Å–ª–æ—Ç—ã
      try {
        await this.profileManager.closeAllBrowsers();
      } catch (_) {}
    }
  }

  async getJobResults(jobId) {
    const job = await this.jobModel.getById(jobId);
    return job ? job.results : [];
  }

  async getAllJobs() {
    return await this.jobModel.getAll();
  }

  sleep(ms) {
    return new Promise(resolve => setTimeout(resolve, ms));
  }

  generateAnonymousAccounts(count, formConfig) {
    const accounts = [];
    
    for (let i = 0; i < count; i++) {
      const account = {
        id: `anon_${Date.now()}_${i}`,
        email: `anonymous_${i + 1}`,
        password: '',
        data: this.generateAnonymousData(formConfig.fields, i)
      };
      accounts.push(account);
    }
    
    return accounts;
  }

  generateAnonymousData(fields, index) {
    const data = {};
    
    fields.forEach(field => {
      const fieldName = field.name || field.id;
      
      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –ø–æ–ª—è
      switch (field.type) {
        case 'text':
        case 'textarea':
          if (fieldName.toLowerCase().includes('email')) {
            data[fieldName] = `user${index + 1}@example.com`;
          } else if (fieldName.toLowerCase().includes('name')) {
            data[fieldName] = `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${index + 1}`;
          } else if (fieldName.toLowerCase().includes('phone')) {
            data[fieldName] = `+7${Math.floor(Math.random() * 9000000000) + 1000000000}`;
          } else {
            data[fieldName] = `–û—Ç–≤–µ—Ç ${index + 1}`;
          }
          break;
          
        case 'number':
          data[fieldName] = Math.floor(Math.random() * 100) + 1;
          break;
          
        case 'select':
        case 'radio':
          if (field.options && field.options.length > 0) {
            // –î–ª—è —Ä–∞–¥–∏–æ–∫–Ω–æ–ø–æ–∫ —Å –æ–¥–Ω–æ–π –æ–ø—Ü–∏–µ–π –≤—Å–µ–≥–¥–∞ –≤—ã–±–∏—Ä–∞–µ–º —ç—Ç—É –æ–ø—Ü–∏—é
            if (field.type === 'radio' && field.options.length === 1) {
              data[fieldName] = field.options[0].value;
            } else {
              // –î–ª—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –æ–ø—Ü–∏–π –≤—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—É—é
              const randomOption = field.options[Math.floor(Math.random() * field.options.length)];
              data[fieldName] = randomOption.value;
            }
          }
          break;
          
        case 'checkbox':
          if (field.options && field.options.length > 0) {
            const selectedCount = Math.floor(Math.random() * field.options.length) + 1;
            const selected = [];
            for (let i = 0; i < selectedCount; i++) {
              const option = field.options[Math.floor(Math.random() * field.options.length)];
              if (!selected.includes(option.value)) {
                selected.push(option.value);
              }
            }
            data[fieldName] = selected;
          }
          break;
          
        case 'date':
          const date = new Date();
          date.setDate(date.getDate() + Math.floor(Math.random() * 365));
          data[fieldName] = date.toISOString().split('T')[0];
          break;
          
        default:
          data[fieldName] = `–ó–Ω–∞—á–µ–Ω–∏–µ ${index + 1}`;
      }
    });
    
    return data;
  }

  // –†–∞—Å—á–µ—Ç –∑–∞–¥–µ—Ä–∂–∫–∏ –º–µ–∂–¥—É —Å–∞–±–º–∏—Ç–∞–º–∏ —Ñ–æ—Ä–º
  calculateSubmitDelay(delaySettings, accountIndex = 0) {
    if (!delaySettings || !delaySettings.enabled) {
      return 0;
    }

    const { type, minDelay, maxDelay, fixedDelay, progressiveMultiplier } = delaySettings;

    switch (type) {
      case 'fixed':
        return fixedDelay || 3000;
        
      case 'random':
        return Math.floor(Math.random() * (maxDelay - minDelay + 1)) + minDelay;
        
      case 'progressive':
        const progressiveDelay = minDelay * Math.pow(progressiveMultiplier, accountIndex);
        return Math.min(progressiveDelay, maxDelay);
        
      default:
        return 3000; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 3 —Å–µ–∫—É–Ω–¥—ã
    }
  }

  // –û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–¥–∞—á
  async clearHistory() {
    try {
      await this.jobModel.clearAll();
      console.log('‚úÖ –ò—Å—Ç–æ—Ä–∏—è –∑–∞–¥–∞—á –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –æ—á–∏—â–µ–Ω–∞');
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–¥–∞—á:', error);
      throw error;
    }
  }

  async close() {
    if (this.browser) {
      await this.browser.close();
      this.browser = null;
    }
    
    // –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –ø—Ä–æ—Ñ–∏–ª–∏ –±—Ä–∞—É–∑–µ—Ä–∞
    await this.profileManager.closeAllBrowsers();
  }

  // –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ –ø–æ —Ç–µ–∫—Å—Ç—É –∏ –∫–ª–∞—Å—Å—É
  async findAndClickButtonByText(page, possibleTexts, className = 'VfPpkd-vQzf8d', timeout = 5000) {
    try {
      console.log(`üîç –ò—â–µ–º –∫–Ω–æ–ø–∫—É —Å —Ç–µ–∫—Å—Ç–æ–º: ${possibleTexts.join(', ')}`);
      
      // –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
      await page.waitForTimeout(1000);
      
      // –ò—â–µ–º –∫–Ω–æ–ø–∫—É –ø–æ —Ç–µ–∫—Å—Ç—É –∏ –∫–ª–∞—Å—Å—É
      const button = await page.evaluateHandle((texts, className) => {
        const elements = document.querySelectorAll(`span.${className}`);
        for (const element of elements) {
          const text = element.textContent.trim();
          if (texts.some(possibleText => text.includes(possibleText))) {
            return element;
          }
        }
        return null;
      }, possibleTexts, className);
      
      if (button && await button.asElement()) {
        const buttonText = await page.evaluate(el => el.textContent.trim(), button);
        console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–∞ –∫–Ω–æ–ø–∫–∞: "${buttonText}"`);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–Ω–æ–ø–∫–∞ –≤–∏–¥–∏–º–∞ –∏ –∫–ª–∏–∫–∞–±–µ–ª—å–Ω–∞
        const isVisible = await page.evaluate(el => {
          const rect = el.getBoundingClientRect();
          return rect.width > 0 && rect.height > 0 && el.offsetParent !== null;
        }, button);
        
        if (isVisible) {
          await button.asElement().click();
          await page.waitForTimeout(2000);
          console.log(`‚úÖ –ö–Ω–æ–ø–∫–∞ "${buttonText}" –Ω–∞–∂–∞—Ç–∞`);
          return true;
        } else {
          console.log(`‚ÑπÔ∏è –ö–Ω–æ–ø–∫–∞ "${buttonText}" –Ω–∞–π–¥–µ–Ω–∞, –Ω–æ –Ω–µ –≤–∏–¥–∏–º–∞`);
          return false;
        }
      } else {
        console.log(`‚ÑπÔ∏è –ö–Ω–æ–ø–∫–∞ —Å —Ç–µ–∫—Å—Ç–æ–º ${possibleTexts.join(', ')} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`);
        return false;
      }
    } catch (error) {
      console.log(`‚ÑπÔ∏è –ö–Ω–æ–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞: ${error.message}`);
      return false;
    }
  }

  // –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–Ω–æ–ø–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è #confirm –∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —à–∞–≥–æ–≤
  async handleConfirmButton(page) {
    try {
      console.log(`üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–Ω–æ–ø–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è #confirm...`);
      
      // –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ, —á—Ç–æ–±—ã —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–≥—Ä—É–∑–∏–ª–∞—Å—å
      await page.waitForTimeout(1000);
      
      const confirmButton = await page.$('#confirm');
      if (confirmButton) {
        console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–∞ –∫–Ω–æ–ø–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è #confirm, –∫–ª–∏–∫–∞–µ–º...`);
        await confirmButton.click();
        await page.waitForTimeout(2000); // –ñ–¥–µ–º –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–ª–∏–∫–∞
        console.log(`‚úÖ –ö–Ω–æ–ø–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –Ω–∞–∂–∞—Ç–∞`);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø–æ—è–≤–∏–ª–∞—Å—å –ª–∏ –∫–Ω–æ–ø–∫–∞ —Å–Ω–æ–≤–∞ (–∏–Ω–æ–≥–¥–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –æ–∫–æ–Ω)
        await page.waitForTimeout(1000);
        const confirmButtonAgain = await page.$('#confirm');
        if (confirmButtonAgain) {
          console.log(`üîÑ –ù–∞–π–¥–µ–Ω–∞ –µ—â–µ –æ–¥–Ω–∞ –∫–Ω–æ–ø–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è, –∫–ª–∏–∫–∞–µ–º –ø–æ–≤—Ç–æ—Ä–Ω–æ...`);
          await confirmButtonAgain.click();
          await page.waitForTimeout(2000);
          console.log(`‚úÖ –í—Ç–æ—Ä–∞—è –∫–Ω–æ–ø–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –Ω–∞–∂–∞—Ç–∞`);
        }
      } else {
        console.log(`‚ÑπÔ∏è –ö–Ω–æ–ø–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è #confirm –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`);
      }

      // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —à–∞–≥–∏ –ø–æ—Å–ª–µ –≤–≤–æ–¥–∞ –ø–∞—Ä–æ–ª—è (–º–æ–≥—É—Ç –≤—Å—Ç—Ä–µ—á–∞—Ç—å—Å—è –Ω–µ –≤—Å–µ–≥–¥–∞)
      console.log(`üîÑ –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —à–∞–≥–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ (–º–æ–≥—É—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤–æ–≤–∞—Ç—å)...`);
      
      // –®–∞–≥ 1: "–ù–µ —Å–µ–π—á–∞—Å" / "Not now" / "Later" (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
      try {
        const notNowClicked = await this.findAndClickButtonByText(page, [
          '–ù–µ —Å–µ–π—á–∞—Å', 'Not now', 'Later', '–ü–æ–∑–∂–µ', '–ù–µ –∑–∞—Ä–∞–∑', 'Not right now'
        ]);
        
        if (notNowClicked) {
          console.log(`‚úÖ –®–∞–≥ "–ù–µ —Å–µ–π—á–∞—Å" –≤—ã–ø–æ–ª–Ω–µ–Ω`);
          await page.waitForTimeout(2000);
          
          // –®–∞–≥ 2: "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å" / "Save" / "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–∞—Ä–æ–ª—å" (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
          try {
            const saveClicked = await this.findAndClickButtonByText(page, [
              '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å', 'Save', '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–∞—Ä–æ–ª—å', 'Save password', '–ó–±–µ—Ä–µ–≥—Ç–∏'
            ]);
            
            if (saveClicked) {
              console.log(`‚úÖ –®–∞–≥ "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å" –≤—ã–ø–æ–ª–Ω–µ–Ω`);
              await page.waitForTimeout(2000);
              
              // –®–∞–≥ 3: "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å" / "Skip" / "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏" (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
              try {
                const skipClicked = await this.findAndClickButtonByText(page, [
                  '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å', 'Skip', '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏', 'Skip setup', '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏', 'Skip settings'
                ]);
                
                if (skipClicked) {
                  console.log(`‚úÖ –®–∞–≥ "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å" –≤—ã–ø–æ–ª–Ω–µ–Ω`);
                } else {
                  console.log(`‚ÑπÔ∏è –®–∞–≥ "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å" –Ω–µ –Ω–∞–π–¥–µ–Ω - —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ`);
                }
              } catch (skipError) {
                console.log(`‚ÑπÔ∏è –®–∞–≥ "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å" –ø—Ä–æ–ø—É—â–µ–Ω: ${skipError.message}`);
              }
            } else {
              console.log(`‚ÑπÔ∏è –®–∞–≥ "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å" –Ω–µ –Ω–∞–π–¥–µ–Ω - —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ`);
            }
          } catch (saveError) {
            console.log(`‚ÑπÔ∏è –®–∞–≥ "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å" –ø—Ä–æ–ø—É—â–µ–Ω: ${saveError.message}`);
          }
        } else {
          console.log(`‚ÑπÔ∏è –®–∞–≥ "–ù–µ —Å–µ–π—á–∞—Å" –Ω–µ –Ω–∞–π–¥–µ–Ω - —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ`);
        }
      } catch (notNowError) {
        console.log(`‚ÑπÔ∏è –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —à–∞–≥–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–ø—É—â–µ–Ω—ã: ${notNowError.message}`);
      }
      
      console.log(`‚úÖ –ü—Ä–æ—Ü–µ—Å—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω (–¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —à–∞–≥–∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã)`);
      
    } catch (confirmError) {
      console.log(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–Ω–æ–ø–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: ${confirmError.message}`);
    }
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —á–µ–ª–µ–Ω–¥–∂–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ª–∏—á–Ω–æ—Å—Ç–∏ —á–µ—Ä–µ–∑ —Ä–µ–∑–µ—Ä–≤–Ω—É—é –ø–æ—á—Ç—É
  async handleVerificationChallenges(page, backupEmail) {
    // –ï—Å–ª–∏ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –ø–æ—á—Ç—ã –Ω–µ—Ç ‚Äî –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º
    if (!backupEmail) {
      throw new Error('–†–µ–∑–µ—Ä–≤–Ω–∞—è –ø–æ—á—Ç–∞ –Ω–µ –∑–∞–¥–∞–Ω–∞');
    }

    console.log('üîí –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏...');
    // –ò—â–µ–º –±–ª–æ–∫–∏ challenge
    // –Ø–≤–Ω–æ –∂–¥—ë–º –ø–æ—è–≤–ª–µ–Ω–∏—è –æ–¥–Ω–æ–≥–æ –∏–∑ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ challenge
    const challengeRoot = await this.waitForChallenge(page, 20000);
    if (!challengeRoot) {
      throw new Error('–ß–µ–ª–µ–Ω–¥–∂ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω');
    }

    // –ü–æ–ø—Ä–æ–±—É–µ–º –≤—ã–±—Ä–∞—Ç—å –æ–ø—Ü–∏—é –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ —Ä–µ–∑–µ—Ä–≤–Ω–æ–º—É email
    // 1) –Ø–≤–Ω–æ –∏—â–µ–º –Ω—É–∂–Ω—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏/–≤–∞—Ä–∏–∞–Ω—Ç—ã: div.VV3oRb[data-action="selectchallenge"][data-challengetype] —Å –¥–æ—á–µ—Ä–Ω–∏–º .l5PPKe
    //    –∏ div.l5PPKe[jsname="fmcmS"] –≤–æ –≤—Å–µ—Ö —Ñ—Ä–µ–π–º–∞—Ö
    let methodChosen = false;
    try {
      const candidateSelectors = [
        'div.VV3oRb[data-action="selectchallenge"][data-challengetype] .l5PPKe',
        'div.VV3oRb[data-action="selectchallenge"][data-challengetype]',
        'div.l5PPKe[jsname="fmcmS"]',
        'div.l5PPKe'
      ];
      const keywordSubstrings = [
        // RU
        '—Ä–µ–∑–µ—Ä–≤', '–≤–æ—Å—Å—Ç–∞–Ω–æ–≤', '–∑–∞–ø–∞—Å–Ω', '–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤', '—Ä–µ–∑–µ—Ä–≤–Ω',
        // EN
        'recovery', 'backup', 'alternate', 'alternative',
        // ES
        'respaldo', 'recuperaci√≥n', 'correo de respaldo',
        // PT/BR
        'recupera', 'alternativo',
        // IT/DE/FR
        'di backup', 'sicherungs', 'sauvegarde', 'r√©cup√©ration',
        // Generic email tokens
        'email', 'e-mail', '–ø–æ—á—Ç'
      ];
      const frames = page.frames();
      for (const frame of frames) {
        for (const sel of candidateSelectors) {
          const elements = await frame.$$(sel);
          for (const el of elements) {
            const text = (await frame.evaluate(e => e.textContent || '', el)).trim().toLowerCase();
            const match = keywordSubstrings.some(k => text.includes(k));
            if (match) {
              const visible = await frame.evaluate(e => {
                const r = e.getBoundingClientRect();
                return r.width > 0 && r.height > 0 && getComputedStyle(e).visibility !== 'hidden';
              }, el).catch(() => false);
              if (visible) {
                // –°–∫—Ä–æ–ª–ª–∏–º –≤ –≤–∏–¥–∏–º—É—é –æ–±–ª–∞—Å—Ç—å –∏ –∫–ª–∏–∫–∞–µ–º —á–µ—Ä–µ–∑ JS –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
                await frame.evaluate(e => { e.scrollIntoView({behavior:'auto', block:'center'}); }, el);
                await frame.evaluate(e => { if (e && typeof e.click === 'function') e.click(); }, el).catch(async () => {
                  try { await (await el.asElement()).click(); } catch {}
                });
                methodChosen = true;
                console.log(`‚úÖ –í—ã–±—Ä–∞–Ω –º–µ—Ç–æ–¥ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–æ –∫–∞—Ä—Ç–æ—á–∫–µ: "${text}"`);
                await page.waitForTimeout(1000);
                break;
              }
            }
          }
          if (methodChosen) break;
        }
        if (methodChosen) break;
      }

      // XPath-—Ñ–æ–ª–ª–±–µ–∫ –ø–æ –ø–æ–¥—Å—Ç—Ä–æ–∫–∞–º —Ç–µ–∫—Å—Ç–∞
      if (!methodChosen) {
        const xPaths = [
          "//div[contains(@class,'VV3oRb') and @data-action='selectchallenge']//div[contains(@class,'l5PPKe')]",
          "//div[contains(@class,'l5PPKe') and contains(translate(., 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz'), '—Ä–µ–∑–µ—Ä–≤')]",
          "//div[contains(@class,'l5PPKe') and contains(translate(., 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz'), 'backup')]",
          "//div[contains(@class,'l5PPKe') and contains(translate(., 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz'), 'recovery')]"
        ];
        for (const frame of frames) {
          for (const xp of xPaths) {
            const handles = await frame.$x(xp);
            if (handles && handles.length > 0) {
              const el = handles[0];
              try {
                await frame.evaluate(e => { e.scrollIntoView({behavior:'auto', block:'center'}); }, el);
                await frame.evaluate(e => { if (e && typeof e.click === 'function') e.click(); }, el);
                methodChosen = true;
                console.log('‚úÖ –í—ã–±—Ä–∞–Ω –º–µ—Ç–æ–¥ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–æ XPath');
                await page.waitForTimeout(1000);
                break;
              } catch {}
            }
          }
          if (methodChosen) break;
        }
      }
    } catch {}

    // 2) –ï—Å–ª–∏ –∫–∞—Ä—Ç–æ—á–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –ø—Ä–æ–±—É–µ–º –∫–ª–∏–∫ –ø–æ –∫–Ω–æ–ø–∫–∞–º/—Å—Å—ã–ª–∫–∞–º —Å —Ç–µ–∫—Å—Ç–∞–º–∏
    if (!methodChosen) {
      try {
        const clickedMethod = await this.findAndClickButtonByText(page, [
          // RU
          '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Ä–µ–∑–µ—Ä–≤–Ω—ã–π –∞–¥—Ä–µ—Å —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç—ã', '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —á–µ—Ä–µ–∑ —Ä–µ–∑–µ—Ä–≤–Ω—É—é –ø–æ—á—Ç—É', '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø–æ —Ä–µ–∑–µ—Ä–≤–Ω–æ–º—É email',
          // EN
          'Confirm your recovery email', 'Verify with backup email', 'Use your backup email', 'Use backup email', 'Confirm recovery email',
          // ES/IT/DE/FR variations (–ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω—ã–µ)
          'Confirmar correo de respaldo', 'Correo de respaldo', 'E-mail di backup', 'E-mail alternativo', 'Sicherungs-E-Mail', 'E-mail de r√©cup√©ration'
        ], 'div.l5PPKe[jsname="fmcmS"], button, div[role="button"], .VfPpkd-LgbsSe, a');
        if (clickedMethod) {
          methodChosen = true;
          console.log('‚úÖ –í—ã–±—Ä–∞–Ω –º–µ—Ç–æ–¥ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–æ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –ø–æ—á—Ç–µ (—á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫–∏)');
          await page.waitForTimeout(1000);
        }
      } catch {}
    }

    // –ò–Ω–æ–≥–¥–∞ —ç—Ç–æ —Ä–∞–¥–∏–æ-–∏–Ω–ø—É—Ç—ã/—á–∏–ø—ã
    const possibleEmailMethodSelectors = [
      'input[type="radio"][value*="email"]',
      '[data-challengetype*="email"]',
      'div[role="radio"][data-value*="email"]',
      'div[role="button"][data-email-option]'
    ];
    for (const sel of possibleEmailMethodSelectors) {
      const el = await page.$(sel);
      if (el) {
        try { await el.click(); await page.waitForTimeout(800); } catch {}
      }
    }

    // –ü–æ–ª–µ –≤–≤–æ–¥–∞ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –ø–æ—á—Ç—ã ‚Äî –∏—â–µ–º —Ä–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã
    const emailInputSelectors = [
      'input[type="email"]',
      'input[name*="email"]',
      'input[autocomplete="email"]',
      'input[aria-label*="email" i]',
      'input[aria-label*="–ø–æ—á—Ç" i]',
      'input', // –Ω–∞ –∫—Ä–∞–π–Ω–∏–π —Å–ª—É—á–∞–π
    ];
    let inputFound = null;
    for (const sel of emailInputSelectors) {
      const el = await page.$(sel);
      if (el) {
        const type = await page.evaluate(e => e.getAttribute('type') || '', el);
        const name = await page.evaluate(e => e.getAttribute('name') || '', el);
        const aria = await page.evaluate(e => e.getAttribute('aria-label') || '', el);
        if ((type.toLowerCase() === 'email') || /email|–ø–æ—á—Ç/i.test(name + ' ' + aria)) {
          inputFound = el;
          break;
        }
      }
    }

    if (!inputFound) {
      // –∏–Ω–æ–≥–¥–∞ —ç—Ç–æ –ø–æ–ª–µ —Ç–∏–ø–∞ text, –ø–æ–ø—Ä–æ–±—É–µ–º –¥–æ–∂–¥–∞—Ç—å—Å—è –≤–∏–¥–∏–º–æ–≥–æ –ø–æ–ª—è –≤–≤–æ–¥–∞
      try {
        await page.waitForSelector('input[type="email"], input[name*="email"], input[autocomplete="email"], input[type="text"]', { visible: true, timeout: 10000 });
        inputFound = await page.$('input[type="email"], input[name*="email"], input[autocomplete="email"], input[type="text"]');
      } catch {}
    }

    if (!inputFound) {
      throw new Error('–ü–æ–ª–µ –≤–≤–æ–¥–∞ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –ø–æ—á—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
    }

    // –í–≤–æ–¥–∏–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –ø–æ—á—Ç—É
    await inputFound.click({ clickCount: 3 });
    await page.type('input:focus', String(backupEmail), { delay: 80 });

    // –ò—â–µ–º –∫–Ω–æ–ø–∫—É –î–∞–ª–µ–µ/–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å
    const nextTexts = ['–î–∞–ª–µ–µ', 'Next', 'Continue', '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å', 'Confirm', '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å', 'Submit'];
    const clickedNext = await this.findAndClickButtonByText(page, nextTexts);
    if (!clickedNext) {
      // –ü—Ä–æ–±—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Å–µ–ª–µ–∫—Ç–æ—Ä
      const nextBtn = await page.$('#next, #submit, button[type="submit"], #passwordNext, #idvPreregisteredEmailNext');
      if (nextBtn) {
        await nextBtn.click();
      } else {
        // –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–∂–∞—Ç—å Enter –Ω–∞ –ø–æ–ª–µ
        try { await page.keyboard.press('Enter'); } catch {}
        await page.waitForTimeout(800);
        const stillHere = await page.$('input[type="email"], input[name*="email"], input[autocomplete="email"]').catch(() => null);
        if (stillHere) {
          throw new Error('–ö–Ω–æ–ø–∫–∞ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –ø–æ—Å–ª–µ –≤–≤–æ–¥–∞ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –ø–æ—á—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
        }
      }
    }

    // –ñ–¥–µ–º –≤–æ–∑–º–æ–∂–Ω–æ–π –Ω–∞–≤–∏–≥–∞—Ü–∏–∏/–ø–µ—Ä–µ—Ö–æ–¥–∞ —à–∞–≥–∞
    await Promise.race([
      page.waitForNavigation({ waitUntil: 'networkidle2', timeout: 15000 }).catch(() => {}),
      page.waitForTimeout(1500)
    ]);

    // –í–æ–∑–º–æ–∂–µ–Ω –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é—â–∏–π —à–∞–≥ ‚Äî —Å–Ω–æ–≤–∞ –ø–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–∂–∞—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    await this.handleConfirmButton(page);

    console.log('‚úÖ –ü–æ–ø—ã—Ç–∫–∞ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ —Ä–µ–∑–µ—Ä–≤–Ω—É—é –ø–æ—á—Ç—É –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
  }
}

module.exports = FormAutomator;
