const puppeteer = require('puppeteer');
const FormConfig = require('../models/FormConfig');
const AccountManager = require('./AccountManager');
const AutomationJob = require('../models/AutomationJob');
const BrowserProfileManager = require('./BrowserProfileManager');
const Proxy = require('../models/Proxy');
const fs = require('fs-extra');
const path = require('path');

class FormAutomator {
  constructor() {
    this.jobs = new Map();
    this.browser = null;
    this.jobModel = new AutomationJob();
    this.profileManager = new BrowserProfileManager();
    this.usedProxies = new Map(); // –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø—Ä–æ–∫—Å–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –∑–∞–¥–∞—á–∏
  }

  async initBrowser(options = {}) {
    if (!this.browser) {
      try {
        const headless = options.headless !== undefined ? options.headless : false;
        console.log(`üåê –ó–∞–ø—É—Å–∫ –±—Ä–∞—É–∑–µ—Ä–∞ Puppeteer... (headless: ${headless})`);
        this.browser = await puppeteer.launch({
          headless: headless,
          args: [
            '--no-sandbox',
            '--disable-setuid-sandbox',
            '--disable-dev-shm-usage',
            '--disable-accelerated-2d-canvas',
            '--no-first-run',
            '--no-zygote',
            '--disable-gpu'
          ],
          timeout: 30000
        });
        console.log(`‚úÖ –ë—Ä–∞—É–∑–µ—Ä —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω (headless: ${headless})`);
      } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±—Ä–∞—É–∑–µ—Ä–∞:`, error);
        throw error;
      }
    }
    return this.browser;
  }

  async startAutomation(formConfigId, accountIds, options = {}) {
    const jobId = `job_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
    
    console.log(`üéØ –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏: ${jobId}`);
    console.log(`üìù ID –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Ñ–æ—Ä–º—ã: ${formConfigId}`);
    console.log(`üë• –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤: ${options.accountData?.length || 0}`);
    console.log(`üîê –†–µ–∂–∏–º –≤—Ö–æ–¥–∞: ${options.loginMode || 'anonymous'}`);
    
    try {
      // –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Ñ–æ—Ä–º—ã
      console.log(`üîç –ü–æ–∏—Å–∫ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Ñ–æ—Ä–º—ã...`);
      const formConfig = await FormConfig.getById(formConfigId);
      if (!formConfig) {
        throw new Error('–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ñ–æ—Ä–º—ã –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
      }
      console.log(`‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ñ–æ—Ä–º—ã –Ω–∞–π–¥–µ–Ω–∞: ${formConfig.title}`);

      let accounts = [];
      
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç–æ–≤
      accounts = options.accountData.map(accountData => ({
        id: accountData.id,
        name: accountData.name,
        email: `${accountData.name}@example.com`,
        fields: accountData.fields,
        loginMode: options.loginMode || 'anonymous'
      }));
      
      // –ï—Å–ª–∏ —Ä–µ–∂–∏–º —Å –ª–æ–≥–∏–Ω–æ–º Google, –¥–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–∫–∫–∞—É–Ω—Ç–∞—Ö
      if (options.loginMode === 'google' && accountIds && accountIds.length > 0) {
        const accountManager = new AccountManager();
        const googleAccounts = await accountManager.getAccountsByIds(accountIds);
        
        // –°–æ–ø–æ—Å—Ç–∞–≤–ª—è–µ–º Google –∞–∫–∫–∞—É–Ω—Ç—ã —Å –¥–∞–Ω–Ω—ã–º–∏
        accounts.forEach((account, index) => {
          if (googleAccounts[index]) {
            account.googleAccount = googleAccounts[index];
            account.email = googleAccounts[index].email;
          }
        });
      }

      // –°–æ–∑–¥–∞–µ–º –ø–æ–Ω—è—Ç–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏
      const taskName = `${formConfig.title || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'} - ${accounts.length} –∞–∫–∫–∞—É–Ω—Ç–æ–≤ (${options.loginMode === 'google' ? '—Å –ª–æ–≥–∏–Ω–æ–º' : '–∞–Ω–æ–Ω–∏–º–Ω–æ'})`;
      
      // –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
      console.log(`üíæ –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...`);
      const job = await this.jobModel.create({
        id: jobId,
        name: taskName,
        formConfigId,
        formTitle: formConfig.title,
        status: 'running',
        startTime: new Date().toISOString(),
        totalAccounts: accounts.length,
        completedAccounts: 0,
        failedAccounts: 0,
        loginMode: options.loginMode || 'anonymous'
      });
      console.log(`‚úÖ –ó–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö`);

      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø—Ä–æ–∫—Å–∏ –¥–ª—è —ç—Ç–æ–π –∑–∞–¥–∞—á–∏
      this.usedProxies.set(jobId, new Set());
      console.log(`üìä –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø—Ä–æ–∫—Å–∏ –¥–ª—è –∑–∞–¥–∞—á–∏ ${jobId}`);

      // –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–π –ª–æ–≥
      console.log(`üìù –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ –ª–æ–≥–∞...`);
      await this.jobModel.addLog(jobId, {
        type: 'info',
        message: `–ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –¥–ª—è ${accounts.length} –∞–∫–∫–∞—É–Ω—Ç–æ–≤ (${options.loginMode === 'google' ? '—Å –ª–æ–≥–∏–Ω–æ–º Google' : '–∞–Ω–æ–Ω–∏–º–Ω–æ'})`
      });

      // –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—é –≤ —Ñ–æ–Ω–µ
      console.log(`üöÄ –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ...`);
      this.runAutomation(jobId, formConfig, accounts, options).catch(error => {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –≤ –∑–∞–¥–∞—á–µ ${jobId}:`, error);
        this.updateJobStatus(jobId, 'failed', error.message);
      });

      return jobId;

    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏:', error);
      throw error;
    }
  }

  async runAutomation(jobId, formConfig, accounts, options) {
    console.log(`üöÄ –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –¥–ª—è –∑–∞–¥–∞—á–∏ ${jobId}`);
    console.log(`üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤: ${accounts.length}`);
    console.log(`üìù –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ñ–æ—Ä–º—ã: ${formConfig.title}`);
    console.log(`‚öôÔ∏è –û–ø—Ü–∏–∏:`, JSON.stringify(options, null, 2));
    
    const job = await this.jobModel.getById(jobId);
    if (!job) {
      console.error(`‚ùå –ó–∞–¥–∞—á–∞ ${jobId} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö`);
      return;
    }

    console.log(`‚úÖ –ó–∞–¥–∞—á–∞ –Ω–∞–π–¥–µ–Ω–∞: ${job.status}`);

    try {
      // –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥ –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
      await this.jobModel.addLog(jobId, {
        type: 'info',
        message: '–ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –∞–∫–∫–∞—É–Ω—Ç–æ–≤'
      });
      
      for (let i = 0; i < accounts.length; i++) {
        const account = accounts[i];
        
        console.log(`\nüîÑ === –ò–¢–ï–†–ê–¶–ò–Ø ${i + 1}/${accounts.length} ===`);
        console.log(`üë§ –ê–∫–∫–∞—É–Ω—Ç: ${account.email}`);
        console.log(`üÜî ID –∞–∫–∫–∞—É–Ω—Ç–∞: ${account.id}`);
        
        try {
          console.log(`\nüöÄ –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –∞–∫–∫–∞—É–Ω—Ç–∞ ${i + 1}/${accounts.length}: ${account.email}`);
          console.log(`üìä –í—Å–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: ${accounts.length}`);
          
          // –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥ –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–∞
          await this.jobModel.addLog(jobId, {
            type: 'info',
            message: `–û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–∞ ${i + 1}/${accounts.length}: ${account.email}`,
            accountId: account.id
          });
          
          const result = await this.fillFormForAccountWithProfile(formConfig, account, options, i, jobId);
          
          // –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —É—Å–ø–µ—à–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
          await this.jobModel.addResult(jobId, {
            accountId: account.id,
            accountName: account.name,
            accountEmail: account.email,
            success: true,
            submittedAt: result.submittedAt,
            filledData: account.fields // –î–∞–Ω–Ω—ã–µ, –∫–æ—Ç–æ—Ä—ã–º–∏ –∑–∞–ø–æ–ª–Ω—è–ª–∞—Å—å —Ñ–æ—Ä–º–∞
          });
          
          // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤
          const updatedJob = await this.jobModel.getById(jobId);
          await this.jobModel.update(jobId, {
            completedAccounts: updatedJob.completedAccounts + 1
          });
          
          // –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥ –æ–± —É—Å–ø–µ—Ö–µ
          await this.jobModel.addLog(jobId, {
            type: 'success',
            message: `–ê–∫–∫–∞—É–Ω—Ç ${account.email} —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω`,
            accountId: account.id
          });
          
          console.log(`‚úÖ –ê–∫–∫–∞—É–Ω—Ç ${account.email} —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω (${i + 1}/${accounts.length})`);
          
          // –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥ –æ –∑–∞–¥–µ—Ä–∂–∫–µ –º–µ–∂–¥—É —Å–∞–±–º–∏—Ç–∞–º–∏
          if (options.delaySettings && options.delaySettings.enabled) {
            const submitDelay = this.calculateSubmitDelay(options.delaySettings, i);
            if (submitDelay > 0) {
              await this.jobModel.addLog(jobId, {
                type: 'info',
                message: `–ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Å–∞–±–º–∏—Ç–∞–º–∏: ${submitDelay}–º—Å (${options.delaySettings.type})`,
                accountId: account.id
              });
            }
          }

          // –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏ (–∫—Ä–æ–º–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ)
          if (i < accounts.length - 1) {
            const accountDelay = options.delay || 1000;
            console.log(`‚è≥ –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏: ${accountDelay}–º—Å`);
            await this.jobModel.addLog(jobId, {
              type: 'info',
              message: `–ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏: ${accountDelay}–º—Å`
            });
            await this.sleep(accountDelay);
            console.log(`‚úÖ –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞`);
          }
          
        } catch (error) {
          console.error(`‚ùå –û—à–∏–±–∫–∞ –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ ${account.email}:`, error);
          console.log(`üìä –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤... (${i + 1}/${accounts.length})`);
          
          // –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ—à–∏–±–∫–∏
          await this.jobModel.addResult(jobId, {
            accountId: account.id,
            accountName: account.name,
            accountEmail: account.email,
            success: false,
            error: error.message,
            filledData: account.fields // –î–∞–Ω–Ω—ã–µ, –∫–æ—Ç–æ—Ä—ã–º–∏ –ø—ã—Ç–∞–ª–∏—Å—å –∑–∞–ø–æ–ª–Ω–∏—Ç—å —Ñ–æ—Ä–º—É
          });
          
          // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –Ω–µ—É–¥–∞—á–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤
          const updatedJob = await this.jobModel.getById(jobId);
          await this.jobModel.update(jobId, {
            failedAccounts: updatedJob.failedAccounts + 1
          });
          
          // –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥ –æ–± –æ—à–∏–±–∫–µ
          await this.jobModel.addLog(jobId, {
            type: 'error',
            message: `–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–∞ ${account.email}: ${error.message}`,
            accountId: account.id
          });

          // –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏ –¥–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ (–∫—Ä–æ–º–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ)
          if (i < accounts.length - 1) {
            const accountDelay = options.delay || 1000;
            console.log(`‚è≥ –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏ –ø–æ—Å–ª–µ –æ—à–∏–±–∫–∏: ${accountDelay}–º—Å`);
            await this.jobModel.addLog(jobId, {
              type: 'info',
              message: `–ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏ –ø–æ—Å–ª–µ –æ—à–∏–±–∫–∏: ${accountDelay}–º—Å`
            });
            await this.sleep(accountDelay);
            console.log(`‚úÖ –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞`);
          }
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–∞
        console.log(`üèÅ –ó–∞–≤–µ—Ä—à–µ–Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–∞ ${i + 1}/${accounts.length}: ${account.email}`);
      }
      
      // –ó–∞–≤–µ—Ä—à–∞–µ–º –∑–∞–¥–∞—á—É
      await this.updateJobStatus(jobId, 'completed');
      await this.jobModel.addLog(jobId, {
        type: 'success',
        message: `–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${job.completedAccounts}, –û—à–∏–±–æ–∫: ${job.failedAccounts}`
      });

      // –û—á–∏—â–∞–µ–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø—Ä–æ–∫—Å–∏ –¥–ª—è —ç—Ç–æ–π –∑–∞–¥–∞—á–∏
      this.usedProxies.delete(jobId);
      console.log(`üßπ –û—á–∏—â–µ–Ω–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø—Ä–æ–∫—Å–∏ –¥–ª—è –∑–∞–¥–∞—á–∏ ${jobId}`);
      
      // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
      await new Promise(resolve => setTimeout(resolve, 1000));
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å —É—Å–ø–µ—à–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã
      if (job.completedAccounts > 0) {
        const notificationType = job.failedAccounts === 0 ? 'success' : 'warning';
        const notificationMessage = job.failedAccounts === 0 
          ? `üéâ –ó–∞–¥–∞—á–∞ "${formConfig.title}" –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ! –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${job.completedAccounts}`
          : `‚ö†Ô∏è –ó–∞–¥–∞—á–∞ "${formConfig.title}" –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Å –æ—à–∏–±–∫–∞–º–∏! –£—Å–ø–µ—à–Ω–æ: ${job.completedAccounts}, –û—à–∏–±–æ–∫: ${job.failedAccounts}`;
        
        await this.sendNotification({
          type: notificationType,
          message: notificationMessage,
          sound: true
        });
      }
      
      // –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –±—Ä–∞—É–∑–µ—Ä—ã –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –∑–∞–¥–∞—á
      console.log('üîí –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –±—Ä–∞—É–∑–µ—Ä—ã...');
      await this.profileManager.closeAllBrowsers();
      console.log('‚úÖ –í—Å–µ –±—Ä–∞—É–∑–µ—Ä—ã –∑–∞–∫—Ä—ã—Ç—ã');
      
    } catch (error) {
      console.error(`–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –∑–∞–¥–∞—á–µ ${jobId}:`, error);
      
      // –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –±—Ä–∞—É–∑–µ—Ä—ã –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
      try {
        console.log('üîí –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –±—Ä–∞—É–∑–µ—Ä—ã –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏...');
        await this.profileManager.closeAllBrowsers();
        console.log('‚úÖ –í—Å–µ –±—Ä–∞—É–∑–µ—Ä—ã –∑–∞–∫—Ä—ã—Ç—ã');
      } catch (closeError) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –±—Ä–∞—É–∑–µ—Ä–æ–≤:', closeError);
      }
      
      await this.updateJobStatus(jobId, 'failed', error.message);
      
      // –û—á–∏—â–∞–µ–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø—Ä–æ–∫—Å–∏ –¥–ª—è —ç—Ç–æ–π –∑–∞–¥–∞—á–∏
      this.usedProxies.delete(jobId);
      console.log(`üßπ –û—á–∏—â–µ–Ω–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø—Ä–æ–∫—Å–∏ –¥–ª—è –∑–∞–¥–∞—á–∏ ${jobId} (–æ—à–∏–±–∫–∞)`);
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
      await this.sendNotification({
        type: 'error',
        message: `‚ùå –ó–∞–¥–∞—á–∞ "${formConfig?.title || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è'}" –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –æ—à–∏–±–∫–æ–π: ${error.message}`,
        sound: true
      });
    }
  }

  async fillFormForAccountWithProfile(formConfig, account, options, accountIndex = 0, jobId = null) {
    let browser = null;
    
    console.log(`\nüîß === fillFormForAccountWithProfile START ===`);
    console.log(`üë§ –ê–∫–∫–∞—É–Ω—Ç: ${account.email} (${account.id})`);
    console.log(`üìä –ò–Ω–¥–µ–∫—Å –∞–∫–∫–∞—É–Ω—Ç–∞: ${accountIndex}`);
    console.log(`üîê –†–µ–∂–∏–º –≤—Ö–æ–¥–∞: ${options.loginMode}`);
    
    try {
      // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø—Ä–æ–∫—Å–∏ –¥–ª—è Google –∞–∫–∫–∞—É–Ω—Ç–æ–≤
      let proxySettings = null;
      if (options.loginMode === 'google' && options.selectedProxyGroup) {
        try {
          // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–∫—Å–∏ –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –≥—Ä—É–ø–ø—ã
          const proxies = await Proxy.getByGroup(options.selectedProxyGroup);
          console.log(`üìä –ù–∞–π–¥–µ–Ω–æ –ø—Ä–æ–∫—Å–∏ –≤ –≥—Ä—É–ø–ø–µ "${options.selectedProxyGroup}": ${proxies.length}`);
          
          if (proxies.length > 0) {
            // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø—Ä–æ–∫—Å–∏ –¥–ª—è —ç—Ç–æ–π –∑–∞–¥–∞—á–∏
            const usedProxiesForJob = this.usedProxies.get(jobId) || new Set();
            console.log(`üìä –£–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ –ø—Ä–æ–∫—Å–∏ –≤ —ç—Ç–æ–π –∑–∞–¥–∞—á–µ: ${usedProxiesForJob.size}`);
            
            // –ù–∞—Ö–æ–¥–∏–º –ø–µ—Ä–≤—ã–π –Ω–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–æ–∫—Å–∏
            let selectedProxy = null;
            let selectedProxyIndex = -1;
            
            for (let i = 0; i < proxies.length; i++) {
              const proxyId = proxies[i].id;
              if (!usedProxiesForJob.has(proxyId)) {
                selectedProxy = proxies[i];
                selectedProxyIndex = i;
                break;
              }
            }
            
            if (selectedProxy) {
              console.log(`üîó –í—ã–±–∏—Ä–∞–µ–º –Ω–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–æ–∫—Å–∏ ${selectedProxyIndex + 1}/${proxies.length} –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ ${account.id}: ${selectedProxy.host}:${selectedProxy.port}`);
              
              // –û—Ç–º–µ—á–∞–µ–º –ø—Ä–æ–∫—Å–∏ –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π –≤ —Ä–∞–º–∫–∞—Ö —ç—Ç–æ–π –∑–∞–¥–∞—á–∏
              usedProxiesForJob.add(selectedProxy.id);
              this.usedProxies.set(jobId, usedProxiesForJob);
              
              proxySettings = {
                enabled: true,
                type: selectedProxy.type,
                host: selectedProxy.host,
                port: selectedProxy.port,
                username: selectedProxy.username,
                password: selectedProxy.password
              };
              
              console.log(`‚úÖ –ü—Ä–æ–∫—Å–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ ${account.id}: ${selectedProxy.host}:${selectedProxy.port}`);
              console.log(`üìä –¢–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ –ø—Ä–æ–∫—Å–∏ –≤ —ç—Ç–æ–π –∑–∞–¥–∞—á–µ: ${usedProxiesForJob.size}/${proxies.length}`);
            } else {
              console.log(`‚ö†Ô∏è –í—Å–µ –ø—Ä–æ–∫—Å–∏ –≤ –≥—Ä—É–ø–ø–µ "${options.selectedProxyGroup}" —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã –≤ —ç—Ç–æ–π –∑–∞–¥–∞—á–µ`);
              throw new Error(`–í—Å–µ –ø—Ä–æ–∫—Å–∏ –≤ –≥—Ä—É–ø–ø–µ "${options.selectedProxyGroup}" —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã –≤ —ç—Ç–æ–π –∑–∞–¥–∞—á–µ`);
            }
          } else {
            console.log(`‚ö†Ô∏è –í –≥—Ä—É–ø–ø–µ –ø—Ä–æ–∫—Å–∏ "${options.selectedProxyGroup}" –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ–∫—Å–∏`);
            throw new Error(`–í –≥—Ä—É–ø–ø–µ –ø—Ä–æ–∫—Å–∏ "${options.selectedProxyGroup}" –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ–∫—Å–∏`);
          }
        } catch (proxyError) {
          console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –ø—Ä–æ–∫—Å–∏:`, proxyError);
          throw proxyError; // –ù–µ –∑–∞–ø—É—Å–∫–∞–µ–º –±–µ–∑ –ø—Ä–æ–∫—Å–∏, –µ—Å–ª–∏ –ø—Ä–æ–∫—Å–∏ –Ω—É–∂–µ–Ω
        }
      }
      
      // –ó–∞–ø—É—Å–∫–∞–µ–º –±—Ä–∞—É–∑–µ—Ä —Å –ø—Ä–æ—Ñ–∏–ª–µ–º –¥–ª—è —ç—Ç–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
      console.log(`üåê –ó–∞–ø—É—Å–∫ –±—Ä–∞—É–∑–µ—Ä–∞ —Å –ø—Ä–æ—Ñ–∏–ª–µ–º –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞: ${account.id}`);
      browser = await this.profileManager.launchBrowserWithProfile(account.id, options, proxySettings);
      
      // –ï—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è –≤—Ö–æ–¥ –≤ Google, –∞–≤—Ç–æ—Ä–∏–∑—É–µ–º—Å—è –ø—Ä–µ–∂–¥–µ —á–µ–º –∏–¥—Ç–∏ –Ω–∞ —Ñ–æ—Ä–º—É
      if ((options.loginMode === 'google')) {
        const loginEmail = (account.googleAccount && account.googleAccount.email) || account.email;
        const loginPassword = (account.googleAccount && account.googleAccount.password) || account.password;

        if (!loginEmail || !loginPassword) {
          throw new Error('–£ –∞–∫–∫–∞—É–Ω—Ç–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç email –∏–ª–∏ –ø–∞—Ä–æ–ª—å –¥–ª—è –≤—Ö–æ–¥–∞ –≤ Google');
        }

        console.log(`üîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤ Google –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞: ${loginEmail}`);
        await this.ensureLoggedInGoogle(browser, loginEmail, loginPassword);
        console.log('‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤ Google —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞');
      }

      // –ó–∞–ø–æ–ª–Ω—è–µ–º —Ñ–æ—Ä–º—É
      const result = await this.fillFormForAccount(browser, formConfig, account, options, accountIndex);
      
      return result;
      
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –≤ fillFormForAccountWithProfile –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ ${account.id}:`, error);
      throw error; // –ù–µ –ø—Ä–æ–±—É–µ–º –±–µ–∑ –ø—Ä–æ–∫—Å–∏, –µ—Å–ª–∏ –ø—Ä–æ–∫—Å–∏ –Ω—É–∂–µ–Ω
    } finally {
      // –ó–∞–∫—Ä—ã–≤–∞–µ–º –±—Ä–∞—É–∑–µ—Ä –¥–ª—è —ç—Ç–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
      console.log(`üîí –ó–∞–∫—Ä—ã–≤–∞–µ–º –±—Ä–∞—É–∑–µ—Ä –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ ${account.id}...`);
      if (browser) {
        try {
          await this.profileManager.closeBrowserForAccount(account.id);
          console.log(`‚úÖ –ë—Ä–∞—É–∑–µ—Ä —É—Å–ø–µ—à–Ω–æ –∑–∞–∫—Ä—ã—Ç –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ ${account.id}`);
        } catch (closeError) {
          console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –±—Ä–∞—É–∑–µ—Ä–∞ –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ ${account.id}:`, closeError);
        }
      } else {
        console.log(`‚ÑπÔ∏è –ë—Ä–∞—É–∑–µ—Ä –Ω–µ –±—ã–ª –∑–∞–ø—É—â–µ–Ω –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ ${account.id}`);
      }
      console.log(`üîß === fillFormForAccountWithProfile END ===\n`);
    }
  }

  async ensureLoggedInGoogle(browser, email, password) {
    const page = await browser.newPage();
    try {
      await page.setUserAgent('Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/114.0.5735.110 Safari/537.36');

      console.log(`üîê –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –≤—Ö–æ–¥–∞ –≤ Google –¥–ª—è: ${email}`);

      // –û—á–∏—â–∞–µ–º cookies —á–µ—Ä–µ–∑ Chrome DevTools Protocol
      console.log(`üßπ –û—á–∏—â–∞–µ–º cookies –∏ –∫—ç—à...`);
      const client = await page.target().createCDPSession();
      await client.send('Network.clearBrowserCookies');
      await client.send('Network.clearBrowserCache');

      // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤—Ö–æ–¥–∞ Google
      console.log(`üåê –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤—Ö–æ–¥–∞ Google...`);
      await page.goto('https://accounts.google.com/signin', { waitUntil: 'networkidle2', timeout: 60000 });

      // –¢–µ–ø–µ—Ä—å –æ—á–∏—â–∞–µ–º localStorage –∏ sessionStorage –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
      console.log(`üßπ –û—á–∏—â–∞–µ–º localStorage –∏ sessionStorage...`);
      try {
        await page.evaluate(() => {
          try {
            // –û—á–∏—â–∞–µ–º localStorage
            if (typeof localStorage !== 'undefined') {
              localStorage.clear();
            }
            // –û—á–∏—â–∞–µ–º sessionStorage
            if (typeof sessionStorage !== 'undefined') {
              sessionStorage.clear();
            }
            // –û—á–∏—â–∞–µ–º IndexedDB
            if (window.indexedDB) {
              indexedDB.databases().then(databases => {
                databases.forEach(db => {
                  indexedDB.deleteDatabase(db.name);
                });
              }).catch(() => {
                // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ IndexedDB
              });
            }
          } catch (error) {
            console.log('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ storage:', error.message);
          }
        });
      } catch (storageError) {
        console.log(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ storage: ${storageError.message}`);
        // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, —Ç–∞–∫ –∫–∞–∫ —ç—Ç–æ –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–ª–æ–≥–∏–Ω–µ–Ω –ª–∏ —É–∂–µ –¥—Ä—É–≥–æ–π –∞–∫–∫–∞—É–Ω—Ç
      const currentUrl = page.url();
      console.log(`üìç –¢–µ–∫—É—â–∏–π URL: ${currentUrl}`);

      // –ï—Å–ª–∏ –º—ã —É–∂–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –∞–∫–∫–∞—É–Ω—Ç–∞, –Ω—É–∂–Ω–æ –≤—ã–π—Ç–∏
      if (currentUrl.includes('myaccount.google.com') || currentUrl.includes('accounts.google.com/b/0/ManageAccount')) {
        console.log(`üö™ –û–±–Ω–∞—Ä—É–∂–µ–Ω –≤—Ö–æ–¥ –≤ –¥—Ä—É–≥–æ–π –∞–∫–∫–∞—É–Ω—Ç, –≤—ã—Ö–æ–¥–∏–º...`);
        try {
          // –ò—â–µ–º –∫–Ω–æ–ø–∫—É –≤—ã—Ö–æ–¥–∞
          const signOutButton = await page.$('a[href*="Logout"], button[aria-label*="Sign out"], a[aria-label*="Sign out"]');
          if (signOutButton) {
            await signOutButton.click();
            await page.waitForNavigation({ waitUntil: 'networkidle2', timeout: 30000 });
            console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ –≤—ã—à–ª–∏ –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞`);
          } else {
            // –ï—Å–ª–∏ –∫–Ω–æ–ø–∫–∞ –≤—ã—Ö–æ–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤—Ö–æ–¥–∞
            await page.goto('https://accounts.google.com/signin', { waitUntil: 'networkidle2', timeout: 60000 });
          }
        } catch (logoutError) {
          console.log(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤—Ö–æ–¥–∞: ${logoutError.message}`);
          await page.goto('https://accounts.google.com/signin', { waitUntil: 'networkidle2', timeout: 60000 });
        }
      }

      // –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –≤—Ö–æ–¥–∞
      await page.waitForSelector('input[type="email"], input#identifierId', { timeout: 30000 });

      // –í–≤–æ–¥–∏–º email
      console.log(`üìù –í–≤–æ–¥–∏–º email: ${email}`);
      const emailSelectorCandidates = ['input#identifierId', 'input[type="email"]'];
      let emailSelector = null;
      for (const sel of emailSelectorCandidates) {
        const el = await page.$(sel);
        if (el) { 
          emailSelector = sel; 
          break; 
        }
      }
      
      if (!emailSelector) {
        throw new Error('–ü–æ–ª–µ email –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ Google –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
      }

      // –û—á–∏—â–∞–µ–º –ø–æ–ª–µ –∏ –≤–≤–æ–¥–∏–º email
      await page.click(emailSelector, { clickCount: 3 });
      await page.type(emailSelector, String(email), { delay: 100 });
      
      // –ù–∞–∂–∏–º–∞–µ–º Next
      const nextBtn1 = await page.$('#identifierNext button, #identifierNext');
      if (!nextBtn1) throw new Error('–ö–Ω–æ–ø–∫–∞ Next –Ω–∞ —à–∞–≥–µ email –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
      await nextBtn1.click();

      // –ñ–¥–µ–º –ø–æ–ª–µ –ø–∞—Ä–æ–ª—è
      console.log(`üîë –ñ–¥–µ–º –ø–æ–ª–µ –ø–∞—Ä–æ–ª—è...`);
      await page.waitForSelector('input[name="Passwd"], input[type="password"]', { visible: true, timeout: 60000 });
      const passSelector = (await page.$('input[name="Passwd"]')) ? 'input[name="Passwd"]' : 'input[type="password"]';
      
      console.log(`üîë –í–≤–æ–¥–∏–º –ø–∞—Ä–æ–ª—å...`);
      await page.click(passSelector, { clickCount: 3 });
      await page.type(passSelector, String(password), { delay: 100 });
      
      // –ù–∞–∂–∏–º–∞–µ–º Next –¥–ª—è –ø–∞—Ä–æ–ª—è
      const nextBtn2 = await page.$('#passwordNext button, #passwordNext');
      if (!nextBtn2) throw new Error('–ö–Ω–æ–ø–∫–∞ Next –Ω–∞ —à–∞–≥–µ –ø–∞—Ä–æ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
      
      console.log(`‚è≥ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ä–º—É –≤—Ö–æ–¥–∞...`);
      await Promise.all([
        page.waitForNavigation({ waitUntil: 'networkidle2', timeout: 60000 }).catch(() => {}),
        nextBtn2.click()
      ]);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥
      console.log(`üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—à–Ω–æ—Å—Ç—å –≤—Ö–æ–¥–∞...`);
      const finalUrl = page.url();
      console.log(`üìç –§–∏–Ω–∞–ª—å–Ω—ã–π URL: ${finalUrl}`);
      
      // –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
      await page.waitForTimeout(3000);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã —É—Å–ø–µ—à–Ω–æ–≥–æ –≤—Ö–æ–¥–∞
      const isLoggedIn = await page.evaluate(() => {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤, —É–∫–∞–∑—ã–≤–∞—é—â–∏—Ö –Ω–∞ —É—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥
        const indicators = [
          'a[href*="SignOutOptions"]',
          'a[href*="Logout"]', 
          'img[alt*="Google Account"]',
          'a[aria-label*="Google Account"]',
          'div[aria-label*="Google Account"]',
          'button[aria-label*="Google Account"]'
        ];
        
        for (const selector of indicators) {
          if (document.querySelector(selector)) {
            return true;
          }
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º URL
        return window.location.href.includes('myaccount.google.com') || 
               window.location.href.includes('accounts.google.com/b/0/ManageAccount');
      });

      if (!isLoggedIn) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è –ª–∏ 2FA
        const need2fa = await page.$('div[id*="challenge"], div[data-challengetype], input[name="idvAnyPhonePin"], div[aria-label*="2-Step Verification"]');
        if (need2fa) {
          throw new Error('–¢—Ä–µ–±—É–µ—Ç—Å—è –¥–≤—É—Ö—ç—Ç–∞–ø–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ (2FA) –¥–ª—è –≤—Ö–æ–¥–∞ –≤ Google. –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è 2FA –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è.');
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—Ä—É–≥–∏–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã
        const errorMessage = await page.evaluate(() => {
          const errorSelectors = [
            'div[role="alert"]',
            '.error-msg',
            '[data-error]',
            '.error'
          ];
          
          for (const selector of errorSelectors) {
            const element = document.querySelector(selector);
            if (element && element.textContent.trim()) {
              return element.textContent.trim();
            }
          }
          return null;
        });
        
        if (errorMessage) {
          throw new Error(`–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞ –≤ Google: ${errorMessage}`);
        }
        
        throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤—Ö–æ–¥ –≤ Google. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç–∞.');
      }

      console.log(`‚úÖ –£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥ –≤ Google –∞–∫–∫–∞—É–Ω—Ç: ${email}`);

    } finally {
      await page.close().catch(() => {});
    }
  }

  async fillFormForAccount(browser, formConfig, account, options, accountIndex = 0) {
    const page = await browser.newPage();
    
    try {
      console.log(`\nüöÄ –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ–æ—Ä–º—ã –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞: ${account.name}`);
      console.log(`üìù URL —Ñ–æ—Ä–º—ã: ${formConfig.url}`);
      console.log(`üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª–µ–π: ${formConfig.fields.length}`);
      
      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º User-Agent
      await page.setUserAgent('Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36');
      
      // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Ñ–æ—Ä–º—É
      console.log('üåê –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Ñ–æ—Ä–º—ã...');
      await page.goto(formConfig.url, { waitUntil: 'networkidle2' });
      
      // –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ä–º—ã (—Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ Google Forms –º–æ–≥—É—Ç –Ω–µ –∏–º–µ—Ç—å —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–π —Ñ–æ—Ä–º—ã)
      console.log('‚è≥ –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ä–º—ã...');
      try {
        await page.waitForSelector('form', { timeout: 5000 });
        console.log('‚úÖ –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è —Ñ–æ—Ä–º–∞ –Ω–∞–π–¥–µ–Ω–∞');
      } catch (error) {
        console.log('‚ö†Ô∏è –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è —Ñ–æ—Ä–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –∂–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª–µ–π –≤–≤–æ–¥–∞...');
        await page.waitForSelector('input[type="text"], textarea, select', { timeout: 10000 });
        console.log('‚úÖ –ü–æ–ª—è –≤–≤–æ–¥–∞ –Ω–∞–π–¥–µ–Ω—ã');
      }
      
      // –ó–∞–ø–æ–ª–Ω—è–µ–º –ø–æ–ª—è —Ñ–æ—Ä–º—ã
      console.log('üìù –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ–ª–µ–π...');
      for (const field of formConfig.fields) {
        await this.fillField(page, field, account, options, formConfig);
      }
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ä–º—É
      if (options.submit !== false) {
        console.log('üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ä–º—É...');
        // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
        await page.waitForTimeout(1000);
        await this.submitForm(page, formConfig);
      }
      
      // –ñ–¥–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏
      console.log('‚è≥ –ñ–¥–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏...');
      await this.waitForSubmission(page);
      
      console.log('‚úÖ –§–æ—Ä–º–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!');
      
      // –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Å–∞–±–º–∏—Ç–∞–º–∏ —Ñ–æ—Ä–º
      if (options.delaySettings && options.delaySettings.enabled) {
        const submitDelay = this.calculateSubmitDelay(options.delaySettings, accountIndex);
        if (submitDelay > 0) {
          console.log(`‚è≥ –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Å–∞–±–º–∏—Ç–∞–º–∏: ${submitDelay}–º—Å (${options.delaySettings.type})`);
          await this.sleep(submitDelay);
          console.log('‚úÖ –ó–∞–¥–µ—Ä–∂–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
        }
      }
      
      return {
        success: true,
        submittedAt: new Date()
      };
      
    } finally {
      await page.close();
    }
  }

  async fillField(page, field, account, options, formConfig) {
    try {
      const selector = `[name="${field.name}"], #${field.id}`;
      
      switch (field.type) {
        case 'text':
        case 'email':
        case 'tel':
        case 'url':
        case 'textarea':
          await this.fillTextField(page, selector, field, account, formConfig);
          break;
          
        case 'number':
          await this.fillNumberField(page, selector, field, account);
          break;
          
        case 'date':
        case 'time':
        case 'datetime':
          await this.fillDateTimeField(page, selector, field, account);
          break;
          
        case 'select':
          await this.fillSelectField(page, selector, field, account);
          break;
          
        case 'radio':
          await this.fillRadioField(page, field, account);
          break;
          
        case 'checkbox':
          await this.fillCheckboxField(page, field, account);
          break;
          
        case 'file':
          await this.fillFileField(page, selector, field, account);
          break;
      }
      
    } catch (error) {
      console.error(`–û—à–∏–±–∫–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –ø–æ–ª—è ${field.name}:`, error);
      throw error;
    }
  }

  async fillTextField(page, selector, field, account, formConfig) {
    const value = this.getValueForField(field, account);
    if (!value) {
      console.log(`–ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–æ–ª–µ ${field.title} - –Ω–µ—Ç –∑–Ω–∞—á–µ–Ω–∏—è`);
      return;
    }

    console.log(`–ó–∞–ø–æ–ª–Ω—è–µ–º –ø–æ–ª–µ ${field.title} –∑–Ω–∞—á–µ–Ω–∏–µ–º: ${value}`);

    try {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–æ–ª–µ–µ —Ç–æ—á–Ω—ã–π –ø–æ–¥—Ö–æ–¥ –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ–ª—è
      let filled = false;
      
      // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –ø–æ–ª–µ –ø–æ –∏–Ω–¥–µ–∫—Å—É (–ø–æ—Ä—è–¥–∫—É –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ)
      const allInputs = await page.$$('input[type="text"], textarea');
      const fieldIndex = formConfig.fields.indexOf(field);
      
      if (allInputs.length > fieldIndex) {
        try {
          await allInputs[fieldIndex].click();
          await allInputs[fieldIndex].type(value);
          console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ –ø–æ–ª–µ ${field.title} –ø–æ –∏–Ω–¥–µ–∫—Å—É ${fieldIndex}`);
          filled = true;
        } catch (error) {
          console.log(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø–æ–ª–Ω–∏—Ç—å –ø–æ–ª–µ ${field.title} –ø–æ –∏–Ω–¥–µ–∫—Å—É: ${error.message}`);
        }
      }
      
      // –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –ø–æ –∏–Ω–¥–µ–∫—Å—É, –ø—Ä–æ–±—É–µ–º –¥—Ä—É–≥–∏–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã
      if (!filled) {
        const selectors = [
          selector, // –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Å–µ–ª–µ–∫—Ç–æ—Ä
          'input[aria-label*="' + field.title + '"]', // –ü–æ aria-label
          'input[placeholder*="' + field.title + '"]', // –ü–æ placeholder
          '.whsOnd.zHQkBf', // –ö–ª–∞—Å—Å –¥–ª—è –ø–æ–ª–µ–π Google Forms
          'input[type="text"]' // –û–±—â–∏–π —Å–µ–ª–µ–∫—Ç–æ—Ä –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –ø–æ–ª–µ–π
        ];

        for (const sel of selectors) {
          try {
            const elements = await page.$$(sel);
            if (elements.length > 0) {
              // –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π –¥–æ—Å—Ç—É–ø–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç
              await elements[0].click();
              await elements[0].type(value);
              console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ –ø–æ–ª–µ ${field.title} —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–º: ${sel}`);
              filled = true;
              break;
            }
          } catch (error) {
            console.log(`‚ùå –°–µ–ª–µ–∫—Ç–æ—Ä ${sel} –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª: ${error.message}`);
            continue;
          }
        }
      }

      if (!filled) {
        console.log(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø–æ–ª–Ω–∏—Ç—å –ø–æ–ª–µ ${field.title}`);
      }

    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –ø–æ–ª—è ${field.title}:`, error.message);
    }
  }

  async fillNumberField(page, selector, field, account) {
    const value = this.getValueForField(field, account);
    if (value) {
      await page.type(selector, value.toString());
    }
  }

  async fillDateTimeField(page, selector, field, account) {
    const value = this.getValueForField(field, account);
    if (value) {
      await page.type(selector, value);
    }
  }

  async fillSelectField(page, selector, field, account) {
    const value = this.getValueForField(field, account);
    if (value) {
      await page.select(selector, value);
    }
  }

  async fillRadioField(page, field, account) {
    const value = this.getValueForField(field, account);
    if (!value) {
      console.log(`–ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ä–∞–¥–∏–æ-–∫–Ω–æ–ø–∫—É ${field.title} - –Ω–µ—Ç –∑–Ω–∞—á–µ–Ω–∏—è`);
      return;
    }

    console.log(`–ó–∞–ø–æ–ª–Ω—è–µ–º —Ä–∞–¥–∏–æ-–∫–Ω–æ–ø–∫—É ${field.title} –∑–Ω–∞—á–µ–Ω–∏–µ–º: ${value}`);

    try {
      // –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã –ø–æ–∏—Å–∫–∞ —Ä–∞–¥–∏–æ-–∫–Ω–æ–ø–∫–∏
      const selectors = [
        `input[name="${field.name}"][value="${value}"]`,
        `input[name="${field.name}"][type="radio"]`,
        `input[type="radio"]`
      ];
      
      let clicked = false;
      for (const selector of selectors) {
        try {
          const elements = await page.$$(selector);
          if (elements.length > 0) {
            // –ò—â–µ–º —ç–ª–µ–º–µ–Ω—Ç —Å –Ω—É–∂–Ω—ã–º –∑–Ω–∞—á–µ–Ω–∏–µ–º
            for (const element of elements) {
              const elementValue = await page.evaluate(el => el.value, element);
              if (elementValue === value) {
                await element.click();
                console.log(`‚úÖ –†–∞–¥–∏–æ-–∫–Ω–æ–ø–∫–∞ "${value}" –≤—ã–±—Ä–∞–Ω–∞`);
                clicked = true;
                break;
              }
            }
            if (clicked) break;
          }
        } catch (error) {
          console.log(`‚ùå –°–µ–ª–µ–∫—Ç–æ—Ä ${selector} –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª: ${error.message}`);
          continue;
        }
      }
      
      if (!clicked) {
        console.log(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–±—Ä–∞—Ç—å —Ä–∞–¥–∏–æ-–∫–Ω–æ–ø–∫—É "${value}"`);
      }
      
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è —Ä–∞–¥–∏–æ-–∫–Ω–æ–ø–∫–∏ ${field.title}:`, error.message);
    }
  }

  async fillCheckboxField(page, field, account) {
    const values = this.getValueForField(field, account);
    if (!values) {
      console.log(`–ü—Ä–æ–ø—É—Å–∫–∞–µ–º —á–µ–∫–±–æ–∫—Å ${field.title} - –Ω–µ—Ç –∑–Ω–∞—á–µ–Ω–∏—è`);
      return;
    }

    console.log(`–ó–∞–ø–æ–ª–Ω—è–µ–º —á–µ–∫–±–æ–∫—Å ${field.title} –∑–Ω–∞—á–µ–Ω–∏—è–º–∏:`, values);

    try {
      // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –º–∞—Å—Å–∏–≤ –µ—Å–ª–∏ —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞
      const valuesArray = Array.isArray(values) ? values : [values];
      
      for (const value of valuesArray) {
        // –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã –ø–æ–∏—Å–∫–∞ —á–µ–∫–±–æ–∫—Å–∞
        const selectors = [
          `input[name="${field.name}"][value="${value}"]`,
          `input[name="${field.name}"][type="checkbox"]`,
          `input[type="checkbox"]`
        ];
        
        let clicked = false;
        for (const selector of selectors) {
          try {
            const elements = await page.$$(selector);
            if (elements.length > 0) {
              // –ò—â–µ–º —ç–ª–µ–º–µ–Ω—Ç —Å –Ω—É–∂–Ω—ã–º –∑–Ω–∞—á–µ–Ω–∏–µ–º
              for (const element of elements) {
                const elementValue = await page.evaluate(el => el.value, element);
                if (elementValue === value || !value) {
                  await element.click();
                  console.log(`‚úÖ –ß–µ–∫–±–æ–∫—Å "${value}" –æ—Ç–º–µ—á–µ–Ω`);
                  clicked = true;
                  break;
                }
              }
              if (clicked) break;
            }
          } catch (error) {
            console.log(`‚ùå –°–µ–ª–µ–∫—Ç–æ—Ä ${selector} –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª: ${error.message}`);
            continue;
          }
        }
        
        if (!clicked) {
          console.log(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–º–µ—Ç–∏—Ç—å —á–µ–∫–±–æ–∫—Å "${value}"`);
        }
      }
      
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è —á–µ–∫–±–æ–∫—Å–∞ ${field.title}:`, error.message);
    }
  }

  async fillFileField(page, selector, field, account) {
    const filePath = this.getValueForField(field, account);
    if (filePath) {
      const fileInput = await page.$(selector);
      if (fileInput) {
        await fileInput.uploadFile(filePath);
      }
    }
  }

  getValueForField(field, account) {
    // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ (–µ—Å–ª–∏ –µ—Å—Ç—å)
    if (account.fields && account.fields[field.id]) {
      return account.fields[field.id];
    }
    
    // –ò—â–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –¥–∞–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–∞ –ø–æ –∏–º–µ–Ω–∏ –ø–æ–ª—è
    let value = account.data && account.data[field.name];
    
    // –ï—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –ø–æ ID
    if (value === undefined) {
      value = account.data && account.data[field.id];
    }
    
    // –ï—Å–ª–∏ –≤—Å–µ –µ—â–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    if (value === undefined && field.defaultValue) {
      value = field.defaultValue;
    }
    
    return value;
  }

  async submitForm(page, formConfig) {
    console.log('–ò—â–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º—ã...');
    
    try {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º page.evaluate –¥–ª—è –ø–æ–∏—Å–∫–∞ –∫–Ω–æ–ø–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏
      const submitButton = await page.evaluate(() => {
        // –ò—â–µ–º –∫–Ω–æ–ø–∫–∏ —Å —Ç–µ–∫—Å—Ç–æ–º Submit –∏–ª–∏ –û—Ç–ø—Ä–∞–≤–∏—Ç—å
        const buttons = Array.from(document.querySelectorAll('button, input[type="submit"], div[role="button"], span'));
        
        for (const button of buttons) {
          const text = button.textContent?.toLowerCase() || '';
          const ariaLabel = button.getAttribute('aria-label')?.toLowerCase() || '';
          
          if (text.includes('submit') || text.includes('–æ—Ç–ø—Ä–∞–≤–∏—Ç—å') || 
              ariaLabel.includes('submit') || ariaLabel.includes('–æ—Ç–ø—Ä–∞–≤–∏—Ç—å')) {
            return {
              tagName: button.tagName,
              className: button.className,
              id: button.id,
              text: button.textContent
            };
          }
        }
        
        // –ò—â–µ–º –∫–Ω–æ–ø–∫–∏ —Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–º–∏ –∫–ª–∞—Å—Å–∞–º–∏ Google Forms
        const googleButtons = document.querySelectorAll('.freebirdFormviewerViewNavigationSubmitButton, [jsname="M2UYVd"], button[data-value="Submit"]');
        if (googleButtons.length > 0) {
          const button = googleButtons[0];
          return {
            tagName: button.tagName,
            className: button.className,
            id: button.id,
            text: button.textContent
          };
        }
        
        return null;
      });
      
      if (submitButton) {
        console.log(`–ù–∞–π–¥–µ–Ω–∞ –∫–Ω–æ–ø–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏:`, submitButton);
        
        // –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã –∫–ª–∏–∫–∞
        const clickMethods = [
          // –ú–µ—Ç–æ–¥ 1: –ö–ª–∏–∫ –ø–æ —Å–µ–ª–µ–∫—Ç–æ—Ä—É
          async () => {
            const selector = submitButton.id ? `#${submitButton.id}` : 
                           submitButton.className ? `.${submitButton.className.split(' ')[0]}` : 
                           submitButton.tagName.toLowerCase();
            await page.click(selector);
          },
          
          // –ú–µ—Ç–æ–¥ 2: –ö–ª–∏–∫ —á–µ—Ä–µ–∑ evaluate
          async () => {
            await page.evaluate(() => {
              const buttons = Array.from(document.querySelectorAll('button, input[type="submit"], div[role="button"], span'));
              for (const button of buttons) {
                const text = button.textContent?.toLowerCase() || '';
                if (text.includes('submit') || text.includes('–æ—Ç–ø—Ä–∞–≤–∏—Ç—å')) {
                  button.click();
                  return;
                }
              }
            });
          },
          
          // –ú–µ—Ç–æ–¥ 3: –ö–ª–∏–∫ –ø–æ Google Forms –∫–Ω–æ–ø–∫–µ
          async () => {
            await page.evaluate(() => {
              const googleButton = document.querySelector('.freebirdFormviewerViewNavigationSubmitButton, [jsname="M2UYVd"]');
              if (googleButton) {
                googleButton.click();
              }
            });
          }
        ];
        
        for (const clickMethod of clickMethods) {
          try {
            await clickMethod();
            console.log('‚úÖ –ö–Ω–æ–ø–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–∂–∞—Ç–∞ —É—Å–ø–µ—à–Ω–æ!');
            return;
          } catch (error) {
            console.log(`‚ùå –ú–µ—Ç–æ–¥ –∫–ª–∏–∫–∞ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª: ${error.message}`);
            continue;
          }
        }
      }
      
      // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –∫–Ω–æ–ø–∫—É, –ø—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ä–º—É —á–µ—Ä–µ–∑ Enter
      console.log('–ö–Ω–æ–ø–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –ø—Ä–æ–±—É–µ–º Enter...');
      await page.keyboard.press('Enter');
      
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∫–Ω–æ–ø–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏:', error.message);
      // –í –∫—Ä–∞–π–Ω–µ–º —Å–ª—É—á–∞–µ –ø—Ä–æ–±—É–µ–º Enter
      await page.keyboard.press('Enter');
    }
  }

  async waitForSubmission(page) {
    try {
      console.log('‚è≥ –ñ–¥–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º—ã...');
      
      // –ñ–¥–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è URL –∏–ª–∏ –ø–æ—è–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–µ
      await Promise.race([
        // –ñ–¥–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è URL (Google Forms –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏)
        page.waitForFunction(() => {
          return window.location.href.includes('formResponse') || 
                 window.location.href.includes('thankyou') ||
                 window.location.href.includes('confirmation');
        }, { timeout: 15000 }),
        
        // –ñ–¥–µ–º –ø–æ—è–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–µ
        page.waitForSelector('.freebirdFormviewerViewResponseConfirmationMessage, .thank-you, .success, [data-response-id]', { 
          timeout: 15000 
        }),
        
        // –ñ–¥–µ–º –∏—Å—á–µ–∑–Ω–æ–≤–µ–Ω–∏—è —Ñ–æ—Ä–º—ã
        page.waitForFunction(() => {
          const form = document.querySelector('form');
          return !form || form.style.display === 'none';
        }, { timeout: 15000 })
      ]);
      
      console.log('‚úÖ –§–æ—Ä–º–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!');
      
    } catch (error) {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è –ª–∏ URL
      const currentUrl = page.url();
      if (currentUrl.includes('formResponse') || currentUrl.includes('thankyou')) {
        console.log('‚úÖ –§–æ—Ä–º–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ (–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ –ø–æ URL)');
        return;
      }
      
      console.log('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–∂–¥–∞—Ç—å—Å—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏, –Ω–æ —Ñ–æ—Ä–º–∞ –º–æ–≥–ª–∞ –±—ã—Ç—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞');
    }
  }

  async updateJobStatus(jobId, status, error = null) {
    try {
      const updates = {
        status,
        endTime: new Date().toISOString()
      };
      
      if (error) {
        updates.error = error;
        await this.jobModel.addLog(jobId, {
          type: 'error',
          message: error
        });
      }
      
      await this.jobModel.update(jobId, updates);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á–∏:', error);
    }
  }

  async sendNotification(notification) {
    try {
      const response = await fetch('http://localhost:3001/api/notifications', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(notification)
      });
      
      if (!response.ok) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', response.statusText);
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', error);
    }
  }

  async getJobStatus(jobId) {
    return await this.jobModel.getById(jobId);
  }

  async stopJob(jobId) {
    const job = await this.jobModel.getById(jobId);
    if (job && job.status === 'running') {
      await this.jobModel.update(jobId, { 
        status: 'stopped',
        endTime: new Date().toISOString()
      });
      await this.jobModel.addLog(jobId, {
        type: 'info',
        message: '–ó–∞–¥–∞—á–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º'
      });
    }
  }

  async getJobResults(jobId) {
    const job = await this.jobModel.getById(jobId);
    return job ? job.results : [];
  }

  async getAllJobs() {
    return await this.jobModel.getAll();
  }

  sleep(ms) {
    return new Promise(resolve => setTimeout(resolve, ms));
  }

  generateAnonymousAccounts(count, formConfig) {
    const accounts = [];
    
    for (let i = 0; i < count; i++) {
      const account = {
        id: `anon_${Date.now()}_${i}`,
        email: `anonymous_${i + 1}`,
        password: '',
        data: this.generateAnonymousData(formConfig.fields, i)
      };
      accounts.push(account);
    }
    
    return accounts;
  }

  generateAnonymousData(fields, index) {
    const data = {};
    
    fields.forEach(field => {
      const fieldName = field.name || field.id;
      
      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –ø–æ–ª—è
      switch (field.type) {
        case 'text':
        case 'textarea':
          if (fieldName.toLowerCase().includes('email')) {
            data[fieldName] = `user${index + 1}@example.com`;
          } else if (fieldName.toLowerCase().includes('name')) {
            data[fieldName] = `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${index + 1}`;
          } else if (fieldName.toLowerCase().includes('phone')) {
            data[fieldName] = `+7${Math.floor(Math.random() * 9000000000) + 1000000000}`;
          } else {
            data[fieldName] = `–û—Ç–≤–µ—Ç ${index + 1}`;
          }
          break;
          
        case 'number':
          data[fieldName] = Math.floor(Math.random() * 100) + 1;
          break;
          
        case 'select':
        case 'radio':
          if (field.options && field.options.length > 0) {
            const randomOption = field.options[Math.floor(Math.random() * field.options.length)];
            data[fieldName] = randomOption.value;
          }
          break;
          
        case 'checkbox':
          if (field.options && field.options.length > 0) {
            const selectedCount = Math.floor(Math.random() * field.options.length) + 1;
            const selected = [];
            for (let i = 0; i < selectedCount; i++) {
              const option = field.options[Math.floor(Math.random() * field.options.length)];
              if (!selected.includes(option.value)) {
                selected.push(option.value);
              }
            }
            data[fieldName] = selected;
          }
          break;
          
        case 'date':
          const date = new Date();
          date.setDate(date.getDate() + Math.floor(Math.random() * 365));
          data[fieldName] = date.toISOString().split('T')[0];
          break;
          
        default:
          data[fieldName] = `–ó–Ω–∞—á–µ–Ω–∏–µ ${index + 1}`;
      }
    });
    
    return data;
  }

  // –†–∞—Å—á–µ—Ç –∑–∞–¥–µ—Ä–∂–∫–∏ –º–µ–∂–¥—É —Å–∞–±–º–∏—Ç–∞–º–∏ —Ñ–æ—Ä–º
  calculateSubmitDelay(delaySettings, accountIndex = 0) {
    if (!delaySettings || !delaySettings.enabled) {
      return 0;
    }

    const { type, minDelay, maxDelay, fixedDelay, progressiveMultiplier } = delaySettings;

    switch (type) {
      case 'fixed':
        return fixedDelay || 3000;
        
      case 'random':
        return Math.floor(Math.random() * (maxDelay - minDelay + 1)) + minDelay;
        
      case 'progressive':
        const progressiveDelay = minDelay * Math.pow(progressiveMultiplier, accountIndex);
        return Math.min(progressiveDelay, maxDelay);
        
      default:
        return 3000; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 3 —Å–µ–∫—É–Ω–¥—ã
    }
  }

  // –û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–¥–∞—á
  async clearHistory() {
    try {
      await this.jobModel.clearAll();
      console.log('‚úÖ –ò—Å—Ç–æ—Ä–∏—è –∑–∞–¥–∞—á –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –æ—á–∏—â–µ–Ω–∞');
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–¥–∞—á:', error);
      throw error;
    }
  }

  async close() {
    if (this.browser) {
      await this.browser.close();
      this.browser = null;
    }
    
    // –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –ø—Ä–æ—Ñ–∏–ª–∏ –±—Ä–∞—É–∑–µ—Ä–∞
    await this.profileManager.closeAllBrowsers();
  }
}

module.exports = FormAutomator;
